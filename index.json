{
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenCircleSurfaceEffect.html",
    "title": "Class TizenCircleSurfaceEffect",
    "keywords": "Class TizenCircleSurfaceEffect Inheritance System.Object Xamarin.Forms.Effect Xamarin.Forms.PlatformEffect < EvasObject , EvasObject > Xamarin.Forms.Platform.Tizen.PlatformEffect TizenCircleSurfaceEffect Inherited Members Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Container Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Control Xamarin.Forms.Effect.Resolve(System.String) Xamarin.Forms.Effect.Element Xamarin.Forms.Effect.IsAttached Xamarin.Forms.Effect.ResolveId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenCircleSurfaceEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() Overrides Xamarin.Forms.Effect.OnAttached() OnDetached() Declaration protected override void OnDetached() Overrides Xamarin.Forms.Effect.OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.html",
    "title": "Class FormsCircularUI",
    "keywords": "Class FormsCircularUI Inheritance System.Object FormsCircularUI Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class FormsCircularUI Fields Tag Declaration public static readonly string Tag Field Value Type Description System.String Properties IsInitialized Declaration public static bool IsInitialized { get; } Property Value Type Description System.Boolean Methods Init() Declaration public static void Init() Init(String) Declaration public static void Init(string apiKey) Parameters Type Name Description System.String apiKey"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStackLayout.html",
    "title": "Class CircleStackLayout",
    "keywords": "Class CircleStackLayout Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.Layout < Xamarin.Forms.View > Xamarin.Forms.StackLayout CircleStackLayout Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer < Xamarin.Forms.View > Xamarin.Forms.IElementConfiguration < Xamarin.Forms.StackLayout > Inherited Members Xamarin.Forms.StackLayout.OrientationProperty Xamarin.Forms.StackLayout.SpacingProperty Xamarin.Forms.StackLayout.On<T>() Xamarin.Forms.StackLayout.Orientation Xamarin.Forms.StackLayout.Spacing Xamarin.Forms.Layout<Xamarin.Forms.View>.OnAdded(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.Children Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStackLayout : StackLayout, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, ILayout, ILayoutController, IPaddingElement, IViewContainer<View>, IElementConfiguration<StackLayout> Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height Overrides Xamarin.Forms.StackLayout.LayoutChildren(System.Double, System.Double, System.Double, System.Double) OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description Xamarin.Forms.SizeRequest Overrides Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer<T> Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CheckDisplayStyle.html",
    "title": "Enum CheckDisplayStyle",
    "keywords": "Enum CheckDisplayStyle Enumeration for the style of the Check. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum CheckDisplayStyle Fields Name Description Default The default style is checkbox style. Onoff The toggle switch style. Small The small checkbox style. this style is only for circular devices"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Toast.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Toast.html",
    "title": "Class Toast",
    "keywords": "Class Toast The Toast class provides properties that show simple types of messages Inheritance System.Object Toast Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public static class Toast Examples Toast.DisplayText(\"Hello World\", 3000) Toast.DisplayIconText(\"Hello World\", new FileImageSource { File = \"icon.jpg\" }, 3000) Methods DisplayIconText(String, FileImageSource) It shows simplest icon and text messege in 3 seconds. Declaration public static void DisplayIconText(string text, FileImageSource icon) Parameters Type Name Description System.String text The body text of the toast. Xamarin.Forms.FileImageSource icon The file path of the toast icon. DisplayIconText(String, FileImageSource, Int32) It shows simplest icon and text messege. Declaration public static void DisplayIconText(string text, FileImageSource icon, int duration) Parameters Type Name Description System.String text The body text of the toast. Xamarin.Forms.FileImageSource icon The file path of the toast icon. System.Int32 duration How long to display the text in milliseconds. DisplayText(String) It shows the simplest form of the message in 3000 milliseconds. Declaration public static void DisplayText(string text) Parameters Type Name Description System.String text The body text of the toast. DisplayText(String, Int32) It shows the simplest form of the message in the given duration. Declaration public static void DisplayText(string text, int duration) Parameters Type Name Description System.String text The body text of the toast. System.Int32 duration How long to display the text in milliseconds."
  },
  "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.SelectedEventArgs.html",
    "title": "Class SelectedEventArgs",
    "keywords": "Class SelectedEventArgs Event arguments for events of RadioButton. Inheritance System.Object System.EventArgs SelectedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class SelectedEventArgs : EventArgs Constructors SelectedEventArgs(String, Boolean) Creates a new SelectedEventArgs object that represents a change from RadioButton. Declaration public SelectedEventArgs(string value, bool isSelected) Parameters Type Name Description System.String value The boolean value that checks whether the RadioButton is selected. System.Boolean isSelected Properties IsSelected Gets the IsSelected for the SelectedEventArgs object. Declaration public bool IsSelected { get; } Property Value Type Description System.Boolean Value Gets the Value for the SelectedEventArgs object. Declaration public string Value { get; } Property Value Type Description System.String"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaView.html",
    "title": "Class MediaView",
    "keywords": "Class MediaView The MediaView class is used to display the video output on the screen. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.Layout < Xamarin.Forms.View > MediaView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer < Xamarin.Forms.View > IVideoOutput Inherited Members Xamarin.Forms.Layout<Xamarin.Forms.View>.OnAdded(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Layout<Xamarin.Forms.View>.OnRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout<Xamarin.Forms.View>.Children Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [ContentProperty(\"Player\")] public class MediaView : Layout<View>, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, ILayout, ILayoutController, IPaddingElement, IViewContainer<View>, IVideoOutput Fields PlayerProperty Identifies the Player bindable property. Declaration public static readonly BindableProperty PlayerProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties OuputType Gets the video output type. Declaration public virtual VideoOuputType OuputType { get; } Property Value Type Description VideoOuputType Player Gets or sets the media player. Declaration public MediaPlayer Player { get; set; } Property Value Type Description MediaPlayer Methods LayoutChildren(Double, Double, Double, Double) Declaration protected override void LayoutChildren(double x, double y, double width, double height) Parameters Type Name Description System.Double x System.Double y System.Double width System.Double height Overrides Xamarin.Forms.Layout.LayoutChildren(System.Double, System.Double, System.Double, System.Double) OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() Overrides Xamarin.Forms.View.OnBindingContextChanged() OnMeasure(Double, Double) Declaration protected override SizeRequest OnMeasure(double widthConstraint, double heightConstraint) Parameters Type Name Description System.Double widthConstraint System.Double heightConstraint Returns Type Description Xamarin.Forms.SizeRequest Overrides Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Explicit Interface Implementations IVideoOutput.Controller Declaration View IVideoOutput.Controller { get; set; } Returns Type Description Xamarin.Forms.View IVideoOutput.MediaView Declaration VisualElement IVideoOutput.MediaView { get; } Returns Type Description Xamarin.Forms.VisualElement Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Xamarin.Forms.IViewContainer<T> IVideoOutput"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IndexPage.html",
    "title": "Class IndexPage",
    "keywords": "Class IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.MultiPage < Xamarin.Forms.ContentPage > IndexPage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Xamarin.Forms.IViewContainer < Xamarin.Forms.ContentPage > Xamarin.Forms.IPageContainer < Xamarin.Forms.ContentPage > Xamarin.Forms.IItemsView < Xamarin.Forms.ContentPage > Xamarin.Forms.IMultiPageController < Xamarin.Forms.ContentPage > Inherited Members Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemsSourceProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemTemplateProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SelectedItemProperty Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.CreateDefault(System.Object) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.SetupContent(Xamarin.Forms.ContentPage, System.Int32) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Xamarin.Forms.IItemsView<Xamarin.Forms.ContentPage>.UnhookContent(Xamarin.Forms.ContentPage) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnBackButtonPressed() Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnCurrentPageChanged() Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnPagesChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.OnPropertyChanged(System.String) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SetupContent(Xamarin.Forms.ContentPage, System.Int32) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.UnhookContent(Xamarin.Forms.ContentPage) Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemsSource Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.ItemTemplate Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.SelectedItem Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CurrentPage Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.Children Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CurrentPageChanged Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.PagesChanged Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageSourceProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconImageSourceProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBindingContextChanged() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImageSource Xamarin.Forms.Page.IconImageSource Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class IndexPage : MultiPage<ContentPage>, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, ILayout, IPageController, IVisualElementController, IElementController, IElementConfiguration<Page>, IPaddingElement, IViewContainer<ContentPage>, IPageContainer<ContentPage>, IItemsView<ContentPage>, IMultiPageController<ContentPage> Methods CreateDefault(Object) Declaration protected override ContentPage CreateDefault(object item) Parameters Type Name Description System.Object item Returns Type Description Xamarin.Forms.ContentPage Overrides Xamarin.Forms.MultiPage<Xamarin.Forms.ContentPage>.CreateDefault(System.Object) Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement> Xamarin.Forms.IViewContainer<T> Xamarin.Forms.IPageContainer<T> Xamarin.Forms.IItemsView<T> Xamarin.Forms.IMultiPageController<T>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapType.html",
    "title": "Enum GoogleMapType",
    "keywords": "Enum GoogleMapType Enumeration for the Google Map type of the MapView. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum GoogleMapType Fields Name Description Hybrid The mixture of normal and satellite views. Roadmap The default road map view. This is the default map type. Satellite The Google Earth satellite images. Terrain The physical map based on terrain information."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.MediaPlayerImpl.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.MediaPlayerImpl.html",
    "title": "Class MediaPlayerImpl",
    "keywords": "Class MediaPlayerImpl Inheritance System.Object MediaPlayerImpl Implements IPlatformMediaPlayer Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class MediaPlayerImpl : IPlatformMediaPlayer Constructors MediaPlayerImpl() Declaration public MediaPlayerImpl() Properties AspectMode Declaration public DisplayAspectMode AspectMode { get; set; } Property Value Type Description DisplayAspectMode AutoPlay Declaration public bool AutoPlay { get; set; } Property Value Type Description System.Boolean AutoStop Declaration public bool AutoStop { get; set; } Property Value Type Description System.Boolean Duration Declaration public int Duration { get; } Property Value Type Description System.Int32 IsMuted Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean Position Declaration public int Position { get; } Property Value Type Description System.Int32 UsesEmbeddingControls Declaration public bool UsesEmbeddingControls { get; set; } Property Value Type Description System.Boolean Volume Declaration public double Volume { get; set; } Property Value Type Description System.Double Methods GetAlbumArts() Declaration public Task<Stream> GetAlbumArts() Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > GetMetadata() Declaration public Task<IDictionary<string, string>> GetMetadata() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.String >> Pause() Declaration public void Pause() Seek(Int32) Declaration public Task<int> Seek(int ms) Parameters Type Name Description System.Int32 ms Returns Type Description System.Threading.Tasks.Task < System.Int32 > SetDisplay(IVideoOutput) Declaration public void SetDisplay(IVideoOutput output) Parameters Type Name Description IVideoOutput output SetSource(MediaSource) Declaration public void SetSource(MediaSource source) Parameters Type Name Description MediaSource source Start() Declaration public Task<bool> Start() Returns Type Description System.Threading.Tasks.Task < System.Boolean > Stop() Declaration public void Stop() Events BufferingProgressUpdated Declaration public event EventHandler<BufferingProgressUpdatedEventArgs> BufferingProgressUpdated Event Type Type Description System.EventHandler < BufferingProgressUpdatedEventArgs > PlaybackCompleted Declaration public event EventHandler PlaybackCompleted Event Type Type Description System.EventHandler PlaybackPaused Declaration public event EventHandler PlaybackPaused Event Type Type Description System.EventHandler PlaybackStarted Declaration public event EventHandler PlaybackStarted Event Type Type Description System.EventHandler PlaybackStopped Declaration public event EventHandler PlaybackStopped Event Type Type Description System.EventHandler UpdateStreamInfo Declaration public event EventHandler UpdateStreamInfo Event Type Type Description System.EventHandler Implements IPlatformMediaPlayer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IPlatformMediaPlayer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IPlatformMediaPlayer.html",
    "title": "Interface IPlatformMediaPlayer",
    "keywords": "Interface IPlatformMediaPlayer For internal use by platform renderers. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IPlatformMediaPlayer Properties AspectMode Declaration DisplayAspectMode AspectMode { get; set; } Property Value Type Description DisplayAspectMode AutoPlay Declaration bool AutoPlay { get; set; } Property Value Type Description System.Boolean AutoStop Declaration bool AutoStop { get; set; } Property Value Type Description System.Boolean Duration Declaration int Duration { get; } Property Value Type Description System.Int32 IsMuted Declaration bool IsMuted { get; set; } Property Value Type Description System.Boolean Position Declaration int Position { get; } Property Value Type Description System.Int32 UsesEmbeddingControls Declaration bool UsesEmbeddingControls { get; set; } Property Value Type Description System.Boolean Volume Declaration double Volume { get; set; } Property Value Type Description System.Double Methods GetAlbumArts() Declaration Task<Stream> GetAlbumArts() Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > GetMetadata() Declaration Task<IDictionary<string, string>> GetMetadata() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.String >> Pause() Declaration void Pause() Seek(Int32) Declaration Task<int> Seek(int ms) Parameters Type Name Description System.Int32 ms Returns Type Description System.Threading.Tasks.Task < System.Int32 > SetDisplay(IVideoOutput) Declaration void SetDisplay(IVideoOutput output) Parameters Type Name Description IVideoOutput output SetSource(MediaSource) Declaration void SetSource(MediaSource source) Parameters Type Name Description MediaSource source Start() Declaration Task<bool> Start() Returns Type Description System.Threading.Tasks.Task < System.Boolean > Stop() Declaration void Stop() Events BufferingProgressUpdated Declaration event EventHandler<BufferingProgressUpdatedEventArgs> BufferingProgressUpdated Event Type Type Description System.EventHandler < BufferingProgressUpdatedEventArgs > PlaybackCompleted Declaration event EventHandler PlaybackCompleted Event Type Type Description System.EventHandler PlaybackPaused Declaration event EventHandler PlaybackPaused Event Type Type Description System.EventHandler PlaybackStarted Declaration event EventHandler PlaybackStarted Event Type Type Description System.EventHandler PlaybackStopped Declaration event EventHandler PlaybackStopped Event Type Type Description System.EventHandler UpdateStreamInfo Declaration event EventHandler UpdateStreamInfo Event Type Type Description System.EventHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.UriMediaSource.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.UriMediaSource.html",
    "title": "Class UriMediaSource",
    "keywords": "Class UriMediaSource A MediaSource that loads a media from a URI Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element MediaSource UriMediaSource Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members MediaSource.FromFile(String) MediaSource.FromUri(Uri) MediaSource.OnSourceChanged() Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [TypeConverter(typeof(MediaSourceConverter))] public sealed class UriMediaSource : MediaSource, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable Fields UriProperty Identifies the File bindable property. Declaration public static readonly BindableProperty UriProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Uri Gets or sets the URI for the media to get. Declaration public Uri Uri { get; set; } Property Value Type Description System.Uri Methods OnPropertyChanged(String) Declaration protected override void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Overrides Xamarin.Forms.Element.OnPropertyChanged(System.String) ToString() Returns the path to the file for the media, prefixed with the string, \"Uri: \". Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators Implicit(Uri to UriMediaSource) Allows implicit casting from a Uri. Declaration public static implicit operator UriMediaSource(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description UriMediaSource Implicit(UriMediaSource to String) Allows implicit casting to a string. Declaration public static implicit operator string (UriMediaSource uri) Parameters Type Name Description UriMediaSource uri Returns Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Radio.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Radio.html",
    "title": "Class Radio",
    "keywords": "Class Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Radio Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Inherited Members Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Radio : View, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController Examples var radio1 = new Radio { GroupName = \"SoundMode\", IsSelected = true, Value = \"sound\" } var radio2 = new Radio { GroupName = \"SoundMode\", IsSelected = false, Value = \"vibrate\" } radio1.Selected += (s,e) => { Console.WriteLine($\"radio1 selected! value:{e.Value}\"); }; radio2.Selected += (s,e) => { Console.WriteLine($\"radio2 selected! value:{e.Value}\"); }; Fields ColorProperty BindableProperty. Identifies the Color bindable property. Declaration public static readonly BindableProperty ColorProperty Field Value Type Description Xamarin.Forms.BindableProperty GroupNameProperty BindableProperty. Identifies the GroupName bindable property. Declaration public static readonly BindableProperty GroupNameProperty Field Value Type Description Xamarin.Forms.BindableProperty IsSelectedProperty BindableProperty. Identifies the IsSelected bindable property. Declaration public static readonly BindableProperty IsSelectedProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Color Gets or sets a color value of Radio. Declaration public Color Color { get; set; } Property Value Type Description Xamarin.Forms.Color GroupName Gets or sets the name that specifies which Radio controls are mutually exclusive. It can be set to null. Declaration public string GroupName { get; set; } Property Value Type Description System.String IsSelected Gets or sets a boolean value that indicates whether this Radio is selected. Declaration public bool IsSelected { get; set; } Property Value Type Description System.Boolean Value Gets or sets the value of the Radio. This is a bindable property. Declaration public string Value { get; set; } Property Value Type Description System.String Events Selected Occurs when the Radio selection was changed. Declaration public event EventHandler<SelectedEventArgs> Selected Event Type Type Description System.EventHandler < SelectedEventArgs > Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.FormsWatchface.html",
    "title": "Class FormsWatchface",
    "keywords": "Class FormsWatchface Inheritance System.Object Application CoreApplication WatchApplication FormsWatchface Implements System.IDisposable Inherited Members WatchApplication.Window WatchApplication.Run(String[]) WatchApplication.OnTick(TimeEventArgs) WatchApplication.OnAmbientTick(TimeEventArgs) WatchApplication.OnAmbientChanged(AmbientEventArgs) WatchApplication.GetCurrentTime() WatchApplication.GetAmbientTickType() WatchApplication.SetAmbientTickType(AmbientTickType) WatchApplication.SetTimeTickFrequency(Int32, TimeTickResolution) WatchApplication.GetTimeTickFrequency(Int32, TimeTickResolution) WatchApplication.Resumed WatchApplication.Paused WatchApplication.TimeTick WatchApplication.AmbientTick WatchApplication.AmbientChanged CoreApplication.Exit() CoreApplication.OnLowMemory(LowMemoryEventArgs) CoreApplication.OnLowBattery(LowBatteryEventArgs) CoreApplication.OnLocaleChanged(LocaleChangedEventArgs) CoreApplication.OnRegionFormatChanged(RegionFormatChangedEventArgs) CoreApplication.OnDeviceOrientationChanged(DeviceOrientationEventArgs) CoreApplication.Dispose(Boolean) CoreApplication.Backend CoreApplication.Created CoreApplication.Terminated CoreApplication.AppControlReceived CoreApplication.LowMemory CoreApplication.LowBattery CoreApplication.LocaleChanged CoreApplication.RegionFormatChanged CoreApplication.DeviceOrientationChanged Application.Dispose() Application.Current Application.DirectoryInfo Application.ApplicationInfo System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class FormsWatchface : WatchApplication, IDisposable Constructors FormsWatchface() Declaration public FormsWatchface() Methods LoadWatchface(Application) Declaration public void LoadWatchface(Application application) Parameters Type Name Description Xamarin.Forms.Application application OnAppControlReceived(AppControlReceivedEventArgs) Declaration protected override void OnAppControlReceived(AppControlReceivedEventArgs e) Parameters Type Name Description AppControlReceivedEventArgs e Overrides CoreApplication.OnAppControlReceived(AppControlReceivedEventArgs) OnCreate() Declaration protected override void OnCreate() Overrides WatchApplication.OnCreate() OnPause() Declaration protected override void OnPause() Overrides WatchApplication.OnPause() OnResume() Declaration protected override void OnResume() Overrides WatchApplication.OnResume() OnRootViewUpdated(EvasObject) Declaration protected virtual void OnRootViewUpdated(EvasObject rootView) Parameters Type Name Description EvasObject rootView OnTerminate() Declaration protected override void OnTerminate() Overrides CoreApplication.OnTerminate() Run() Declaration public void Run() Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.UriMediaSourceHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.UriMediaSourceHandler.html",
    "title": "Class UriMediaSourceHandler",
    "keywords": "Class UriMediaSourceHandler Inheritance System.Object UriMediaSourceHandler Implements IMediaSourceHandler Xamarin.Forms.IRegisterable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public sealed class UriMediaSourceHandler : IMediaSourceHandler, IRegisterable Methods SetSource(Player, MediaSource) Declaration public Task<bool> SetSource(Player player, MediaSource source) Parameters Type Name Description Player player MediaSource source Returns Type Description System.Threading.Tasks.Task < System.Boolean > Implements IMediaSourceHandler Xamarin.Forms.IRegisterable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleStepper.html",
    "title": "Class CircleStepper",
    "keywords": "Class CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Stepper CircleStepper Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Stepper > IRotaryFocusable Inherited Members Xamarin.Forms.Stepper.MaximumProperty Xamarin.Forms.Stepper.MinimumProperty Xamarin.Forms.Stepper.ValueProperty Xamarin.Forms.Stepper.IncrementProperty Xamarin.Forms.Stepper.On<T>() Xamarin.Forms.Stepper.Increment Xamarin.Forms.Stepper.Maximum Xamarin.Forms.Stepper.Minimum Xamarin.Forms.Stepper.Value Xamarin.Forms.Stepper.ValueChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleStepper : Stepper, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, IElementConfiguration<Stepper>, IRotaryFocusable Fields LabelFormatProperty BindableProperty. Identifies the LabelFormat bindable property. Declaration public static readonly BindableProperty LabelFormatProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration [Obsolete(\"MarkerColor bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerColorProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerLineWidthProperty BindableProperty. Identifies the MarkerLineWidth bindable property. Declaration [Obsolete(\"MarkerLineWidth bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty TitleProperty BindableProperty. Identifies the Title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties LabelFormat Gets or sets format in which Value is shown Declaration public string LabelFormat { get; set; } Property Value Type Description System.String MarkerColor Gets or sets Marker color Declaration [Obsolete(\"MarkerColor is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public Color MarkerColor { get; set; } Property Value Type Description Xamarin.Forms.Color MarkerLineWidth Gets or sets length of Marker Declaration [Obsolete(\"MarkerLineWidth is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public int MarkerLineWidth { get; set; } Property Value Type Description System.Int32 Title Gets or sets title Declaration public string Title { get; set; } Property Value Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PopupEntryRenderer.html",
    "title": "Class PopupEntryRenderer",
    "keywords": "Class PopupEntryRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Xamarin.Forms.Entry > Xamarin.Forms.Platform.Tizen.ViewRenderer < Xamarin.Forms.Entry , Entry > Xamarin.Forms.Platform.Tizen.EntryRenderer PopupEntryRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.EntryRenderer.CreateNativeControl() Xamarin.Forms.Platform.Tizen.EntryRenderer.MinimumSize() Xamarin.Forms.Platform.Tizen.EntryRenderer.UpdateTextColor() Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, ElmSharp.Entry>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Entry>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, ElmSharp.Entry>.SetNativeControl(ElmSharp.Entry) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, ElmSharp.Entry>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Entry, ElmSharp.Entry>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetElement(Xamarin.Forms.Entry) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Entry>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PopupEntryRenderer : EntryRenderer, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors PopupEntryRenderer() Declaration public PopupEntryRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.EntryRenderer.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Entry>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Entry> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Xamarin.Forms.Entry > e Overrides Xamarin.Forms.Platform.Tizen.EntryRenderer.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Entry>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.PaddingItemClass.html",
    "title": "Class PaddingItemClass",
    "keywords": "Class PaddingItemClass Inheritance System.Object GenItemClass PaddingItemClass Implements System.IDisposable Inherited Members GenItemClass.Dispose(Boolean) GenItemClass.Dispose() GenItemClass.CreateItemClass() GenItemClass.ReleaseItemClass(IntPtr) GenItemClass.ItemStyle GenItemClass.GetTextHandler GenItemClass.GetContentHandler GenItemClass.DeleteHandler GenItemClass.ReusableContentHandler System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class PaddingItemClass : GenItemClass, IDisposable Constructors PaddingItemClass() Declaration public PaddingItemClass() Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryEventReceiver.html",
    "title": "Interface IRotaryEventReceiver",
    "keywords": "Interface IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryEventReceiver : IRotaryFocusable Methods Rotate(RotaryEventArgs) Rotate it by the RotaryEventArgs value. Declaration void Rotate(RotaryEventArgs args) Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.LatLng.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.LatLng.html",
    "title": "Struct LatLng",
    "keywords": "Struct LatLng A struct that has a latitude and longitude. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public struct LatLng Constructors LatLng(Double, Double) Constructor a new LatLng structure Declaration public LatLng(double latitude, double longitude) Parameters Type Name Description System.Double latitude System.Double longitude Properties Latitude Gets or sets a latitude degrees. Declaration public double Latitude { get; } Property Value Type Description System.Double Longitude Gets or sets a longitude degrees. Declaration public double Longitude { get; } Property Value Type Description System.Double Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() Operators Equality(LatLng, LatLng) Declaration public static bool operator ==(LatLng left, LatLng right) Parameters Type Name Description LatLng left LatLng right Returns Type Description System.Boolean Inequality(LatLng, LatLng) Declaration public static bool operator !=(LatLng left, LatLng right) Parameters Type Name Description LatLng left LatLng right Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaSource.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaSource.html",
    "title": "Class MediaSource",
    "keywords": "Class MediaSource Abstract class whose implementors load media contents from files or the Web. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element MediaSource FileMediaSource UriMediaSource Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [TypeConverter(typeof(MediaSourceConverter))] public abstract class MediaSource : Element, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable Constructors MediaSource() Declaration protected MediaSource() Methods FromFile(String) Returns a new MediaSource that reads from file. Declaration public static MediaSource FromFile(string file) Parameters Type Name Description System.String file The file path to use as a media source. Returns Type Description MediaSource Returns the MediaSource. FromUri(Uri) Returns a new MediaSource that reads from uri. Declaration public static MediaSource FromUri(Uri uri) Parameters Type Name Description System.Uri uri The uri path to use as a media source. Returns Type Description MediaSource Returns the MediaSource. OnSourceChanged() Declaration protected void OnSourceChanged() Operators Implicit(String to MediaSource) Declaration public static implicit operator MediaSource(string source) Parameters Type Name Description System.String source Returns Type Description MediaSource Implicit(Uri to MediaSource) Declaration public static implicit operator MediaSource(Uri uri) Parameters Type Name Description System.Uri uri Returns Type Description MediaSource Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IRotaryFocusable.html",
    "title": "Interface IRotaryFocusable",
    "keywords": "Interface IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapOption.html",
    "title": "Struct GoogleMapOption",
    "keywords": "Struct GoogleMapOption The GoogleMapOption struct used to define the properties that can be set on a GoogleMapView. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public struct GoogleMapOption Constructors GoogleMapOption(LatLng, GoogleMapType, Int32, Boolean, Boolean, ZoomControlPosition) Constructor a new GoogleMapOption structure Declaration public GoogleMapOption(LatLng center, GoogleMapType type = GoogleMapType.Roadmap, int zoomLevel = 10, bool visibleZoomControl = false, bool enableGesture = true, ZoomControlPosition controlPosition = ZoomControlPosition.RightBottom) Parameters Type Name Description LatLng center GoogleMapType type System.Int32 zoomLevel System.Boolean visibleZoomControl System.Boolean enableGesture ZoomControlPosition controlPosition Properties Center Gets or sets a center postion of GoogleMapOption. This value set center of MapView. But getting value not mean current center of MapView because value can't reflect user interaction. Declaration public LatLng Center { get; set; } Property Value Type Description LatLng HasGestureEnabled Gets or sets a boolean value that indicates whether zoom and pan interaction is enable. Declaration public bool HasGestureEnabled { get; set; } Property Value Type Description System.Boolean IsZoomControlVisible Gets or sets a boolean value that indicates whether zoom control is visible. Declaration public bool IsZoomControlVisible { get; set; } Property Value Type Description System.Boolean MapType Gets or sets a Google Map type value of GoogleMapOption. Declaration public GoogleMapType MapType { get; set; } Property Value Type Description GoogleMapType Zoom Gets or sets a zoom level of GoogleMapOption. This value set zoom level of MapView. But getting value not mean current zoom level of MapView because value can't reflect user interaction. Declaration public double Zoom { get; set; } Property Value Type Description System.Double ZoomControlPosition Gets or sets a boolean value that indicates whether zoom and pan interaction is enable. Declaration public ZoomControlPosition ZoomControlPosition { get; set; } Property Value Type Description ZoomControlPosition Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() ToString() Returns the values of GoogleMapOption\". Declaration public override string ToString() Returns Type Description System.String Overrides System.ValueType.ToString() Operators Equality(GoogleMapOption, GoogleMapOption) Declaration public static bool operator ==(GoogleMapOption left, GoogleMapOption right) Parameters Type Name Description GoogleMapOption left GoogleMapOption right Returns Type Description System.Boolean Inequality(GoogleMapOption, GoogleMapOption) Declaration public static bool operator !=(GoogleMapOption left, GoogleMapOption right) Parameters Type Name Description GoogleMapOption left GoogleMapOption right Returns Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleToolbarItem.html",
    "title": "Class CircleToolbarItem",
    "keywords": "Class CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.BaseMenuItem Xamarin.Forms.MenuItem Xamarin.Forms.ToolbarItem CircleToolbarItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.ToolbarItem.Order Xamarin.Forms.ToolbarItem.Priority Xamarin.Forms.MenuItem.AcceleratorProperty Xamarin.Forms.MenuItem.CommandProperty Xamarin.Forms.MenuItem.CommandParameterProperty Xamarin.Forms.MenuItem.IsDestructiveProperty Xamarin.Forms.MenuItem.IconImageSourceProperty Xamarin.Forms.MenuItem.IsEnabledProperty Xamarin.Forms.MenuItem.TextProperty Xamarin.Forms.MenuItem.GetAccelerator(Xamarin.Forms.BindableObject) Xamarin.Forms.MenuItem.SetAccelerator(Xamarin.Forms.BindableObject, Xamarin.Forms.Accelerator) Xamarin.Forms.MenuItem.OnClicked() Xamarin.Forms.MenuItem.Command Xamarin.Forms.MenuItem.CommandParameter Xamarin.Forms.MenuItem.IconImageSource Xamarin.Forms.MenuItem.IsDestructive Xamarin.Forms.MenuItem.Text Xamarin.Forms.MenuItem.IsEnabled Xamarin.Forms.MenuItem.IsEnabledPropertyName Xamarin.Forms.MenuItem.Clicked Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleToolbarItem : ToolbarItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, IMenuItemController Fields SubTextProperty BindableProperty. Identifies the Subtext bindable property to display on the menu item. Declaration public static readonly BindableProperty SubTextProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties SubText Gets or sets Subtext to display on the menu item Declaration public string SubText { get; set; } Property Value Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.HeaderOrFooterItemClass.html",
    "title": "Class HeaderOrFooterItemClass",
    "keywords": "Class HeaderOrFooterItemClass Inheritance System.Object GenItemClass HeaderOrFooterItemClass Implements System.IDisposable Inherited Members GenItemClass.Dispose(Boolean) GenItemClass.Dispose() GenItemClass.CreateItemClass() GenItemClass.ReleaseItemClass(IntPtr) GenItemClass.ItemStyle GenItemClass.GetTextHandler GenItemClass.GetContentHandler GenItemClass.DeleteHandler GenItemClass.ReusableContentHandler System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class HeaderOrFooterItemClass : GenItemClass, IDisposable Constructors HeaderOrFooterItemClass() Declaration public HeaderOrFooterItemClass() HeaderOrFooterItemClass(Boolean) Declaration public HeaderOrFooterItemClass(bool fishEye) Parameters Type Name Description System.Boolean fishEye Methods OnGetContent(Object, String) Declaration protected EvasObject OnGetContent(object data, string part) Parameters Type Name Description System.Object data System.String part Returns Type Description EvasObject Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventArgs.html",
    "title": "Class RotaryEventArgs",
    "keywords": "Class RotaryEventArgs Event arguments for RotaryEvent. Inheritance System.Object System.EventArgs RotaryEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class RotaryEventArgs : EventArgs Properties IsClockwise Gets or sets rotated direction of Rotary device. IsClockwise is true when Rotary device rotated in the clockwise direction or false on counter clockwise. Declaration public bool IsClockwise { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ActionButtonItem.html",
    "title": "Class ActionButtonItem",
    "keywords": "Class ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.BaseMenuItem Xamarin.Forms.MenuItem ActionButtonItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.MenuItem.AcceleratorProperty Xamarin.Forms.MenuItem.CommandProperty Xamarin.Forms.MenuItem.CommandParameterProperty Xamarin.Forms.MenuItem.IsDestructiveProperty Xamarin.Forms.MenuItem.IconImageSourceProperty Xamarin.Forms.MenuItem.IsEnabledProperty Xamarin.Forms.MenuItem.TextProperty Xamarin.Forms.MenuItem.GetAccelerator(Xamarin.Forms.BindableObject) Xamarin.Forms.MenuItem.SetAccelerator(Xamarin.Forms.BindableObject, Xamarin.Forms.Accelerator) Xamarin.Forms.MenuItem.OnClicked() Xamarin.Forms.MenuItem.Command Xamarin.Forms.MenuItem.CommandParameter Xamarin.Forms.MenuItem.IconImageSource Xamarin.Forms.MenuItem.IsDestructive Xamarin.Forms.MenuItem.Text Xamarin.Forms.MenuItem.IsEnabled Xamarin.Forms.MenuItem.IsEnabledPropertyName Xamarin.Forms.MenuItem.Clicked Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ActionButtonItem : MenuItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, IMenuItemController Fields BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description Xamarin.Forms.BindableProperty IsEnableProperty BindableProperty. Identifies the IsEnable bindable property. Declaration public static readonly BindableProperty IsEnableProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BackgroundColor Gets or sets a background color value of ActionButtonItem. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Xamarin.Forms.Color IsEnable Gets or sets a boolean value that indicates whether this ActionButtonItem is enabled. Declaration public bool IsEnable { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets a boolean value that indicates whether this ActionButtonItem is visible. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePage.html",
    "title": "Class CirclePage",
    "keywords": "Class CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.TemplatedPage Xamarin.Forms.ContentPage CirclePage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Inherited Members Xamarin.Forms.ContentPage.ContentProperty Xamarin.Forms.ContentPage.Content Xamarin.Forms.TemplatedPage.ControlTemplateProperty Xamarin.Forms.TemplatedPage.OnApplyTemplate() Xamarin.Forms.TemplatedPage.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.TemplatedPage.GetTemplateChild(System.String) Xamarin.Forms.TemplatedPage.ControlTemplate Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageSourceProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconImageSourceProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBackButtonPressed() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImageSource Xamarin.Forms.Page.IconImageSource Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePage : ContentPage, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, ILayout, IPageController, IVisualElementController, IElementController, IElementConfiguration<Page>, IPaddingElement, IControlTemplated Constructors CirclePage() Creates and initializes a new instance of the CirclePage class. Declaration public CirclePage() Fields ActionButtonProperty BindableProperty. Identifies the ActionButton bindable property. Declaration public static readonly BindableProperty ActionButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty RotaryFocusObjectProperty BindableProperty. Identifies the RotaryFocusObject bindable property Key. Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties ActionButton Gets or sets ActionButton that presents a menu item and associates it with a command Declaration public ActionButtonItem ActionButton { get; set; } Property Value Type Description ActionButtonItem CircleSurfaceItems Gets a list of CircleSurfaceItems represented through CircleSurface. Declaration public IList<ICircleSurfaceItem> CircleSurfaceItems { get; } Property Value Type Description System.Collections.Generic.IList < ICircleSurfaceItem > RotaryFocusObject Gets or sets object of RotaryFocusObject to receive bezel action(take a rotary event) from the current page. Declaration public IRotaryFocusable RotaryFocusObject { get; set; } Property Value Type Description IRotaryFocusable Methods OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() Overrides Xamarin.Forms.ContentPage.OnBindingContextChanged() Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Renderer Classes MediaViewRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleScrollView.html",
    "title": "Class CircleScrollView",
    "keywords": "Class CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.ScrollView CircleScrollView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.IScrollViewController Xamarin.Forms.ILayoutController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.ScrollView > IRotaryFocusable Inherited Members Xamarin.Forms.ScrollView.OrientationProperty Xamarin.Forms.ScrollView.ScrollXProperty Xamarin.Forms.ScrollView.ScrollYProperty Xamarin.Forms.ScrollView.ContentSizeProperty Xamarin.Forms.ScrollView.HorizontalScrollBarVisibilityProperty Xamarin.Forms.ScrollView.VerticalScrollBarVisibilityProperty Xamarin.Forms.ScrollView.On<T>() Xamarin.Forms.ScrollView.ScrollToAsync(System.Double, System.Double, System.Boolean) Xamarin.Forms.ScrollView.ScrollToAsync(Xamarin.Forms.Element, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ScrollView.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.ScrollView.Content Xamarin.Forms.ScrollView.ContentSize Xamarin.Forms.ScrollView.Orientation Xamarin.Forms.ScrollView.ScrollX Xamarin.Forms.ScrollView.ScrollY Xamarin.Forms.ScrollView.HorizontalScrollBarVisibility Xamarin.Forms.ScrollView.VerticalScrollBarVisibility Xamarin.Forms.ScrollView.Scrolled Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleScrollView : ScrollView, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, ILayout, IPaddingElement, IScrollViewController, ILayoutController, IElementConfiguration<ScrollView>, IFlowDirectionController, IRotaryFocusable Fields BarColorProperty BindableProperty. Identifies the Header, Footer cancel the Fish Eye Effect or not. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BarColor Gets or sets a scroll bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Xamarin.Forms.Color Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.IScrollViewController Xamarin.Forms.ILayoutController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceEffectBehavior.html",
    "title": "Class CircleSurfaceEffectBehavior",
    "keywords": "Class CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Behavior Xamarin.Forms.Behavior < Xamarin.Forms.Page > CircleSurfaceEffectBehavior Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnAttachedTo(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnDetachingFrom(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior.AssociatedType Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceEffectBehavior : Behavior<Page>, INotifyPropertyChanged, IDynamicResourceHandler, IAttachedObject Fields RotaryFocusObjectProperty Declaration public static readonly BindableProperty RotaryFocusObjectProperty Field Value Type Description Xamarin.Forms.BindableProperty Methods GetRotaryFocusObject(BindableObject) Declaration public static IRotaryFocusable GetRotaryFocusObject(BindableObject obj) Parameters Type Name Description Xamarin.Forms.BindableObject obj Returns Type Description IRotaryFocusable OnAttachedTo(Page) Declaration protected override void OnAttachedTo(Page page) Parameters Type Name Description Xamarin.Forms.Page page Overrides Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnAttachedTo(Xamarin.Forms.Page) OnDetachingFrom(Page) Declaration protected override void OnDetachingFrom(Page page) Parameters Type Name Description Xamarin.Forms.Page page Overrides Xamarin.Forms.Behavior<Xamarin.Forms.Page>.OnDetachingFrom(Xamarin.Forms.Page) SetRotaryFocusObject(BindableObject, IRotaryFocusable) Declaration public static void SetRotaryFocusObject(BindableObject obj, IRotaryFocusable focusable) Parameters Type Name Description Xamarin.Forms.BindableObject obj IRotaryFocusable focusable Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSliderSurfaceItemImplements.html",
    "title": "Class CircleSliderSurfaceItemImplements",
    "keywords": "Class CircleSliderSurfaceItemImplements Inheritance System.Object EvasObject AccessibleObject Widget CircleSlider CircleSliderSurfaceItemImplements Implements IAccessibleObject IRotaryActionWidget ICircleWidget Inherited Members CircleSlider.OnRealized() CircleSlider.CreateHandle(EvasObject) CircleSlider.CircleHandle CircleSlider.CircleSurface CircleSlider.Step CircleSlider.IsEnabled CircleSlider.BarColor CircleSlider.BackgroundColor CircleSlider.BarLineWidth CircleSlider.BackgroundLineWidth CircleSlider.BarAngle CircleSlider.BackgroundAngle CircleSlider.BarAngleOffset CircleSlider.BackgroundAngleOffset CircleSlider.BarAngleMinimum CircleSlider.BarAngleMaximum CircleSlider.Minimum CircleSlider.Maximum CircleSlider.Value CircleSlider.BarRadius CircleSlider.BackgroundRadius CircleSlider.ValueChanged Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetPartContent(String, EvasObject) Widget.SetPartContent(String, EvasObject, Boolean) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartText(String, String) Widget.GetPartText(String) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.OnUnrealize() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.Color EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleSliderSurfaceItemImplements : CircleSlider, IAccessibleObject, IRotaryActionWidget, ICircleWidget Constructors CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem, EvasObject, CircleSurface) Declaration public CircleSliderSurfaceItemImplements(CircleSliderSurfaceItem item, EvasObject parent, CircleSurface surface) Parameters Type Name Description CircleSliderSurfaceItem item EvasObject parent CircleSurface surface Implements IAccessibleObject IRotaryActionWidget ICircleWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPopup.html",
    "title": "Class TwoButtonPopup",
    "keywords": "Class TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. Inheritance System.Object Xamarin.Forms.BindableObject TwoButtonPopup Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPopup : BindableObject, INotifyPropertyChanged, IDynamicResourceHandler Examples var leftButton = new MenuItem() { Text = \"Save\", Icon = new FileImageSource{ File = \"icon_save.png\", }, Command = new Command(() => { ... }) }; var rightButton = new MenuItem() { Text = \"Delete\", Icon = new FileImageSource{ File = \"icon_delete.png\", }, Command = new Command(() => { ... }) }; var popup = new TwoButtonPopup(); popup.FirstButton = leftButton; popup.SecondButton = rightButton; popup.Title = \"Popup title\"; popup.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved\", }, } }; popup.BackButtonPressed += (s, e) => { popup.Dismiss(); }; Constructors TwoButtonPopup() Creates and initializes a new instance of the TwoButtonPopup class. Declaration public TwoButtonPopup() Fields ContentProperty BindableProperty. Identifies the content bindable property. Declaration public static readonly BindableProperty ContentProperty Field Value Type Description Xamarin.Forms.BindableProperty FirstButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty SecondButtonProperty BindableProperty. Identifies the second button bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description Xamarin.Forms.BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Content Gets or sets content view of the Popup. Declaration public View Content { get; set; } Property Value Type Description Xamarin.Forms.View FirstButton Gets or sets left button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem SecondButton Gets or sets right button of the Popup. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the TwoButtonPopup. Declaration public void Dismiss() Show() Shows the TwoButtonPopup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.TwoButtonPage.html",
    "title": "Class TwoButtonPage",
    "keywords": "Class TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.Page Xamarin.Forms.TemplatedPage Xamarin.Forms.ContentPage TwoButtonPage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Page > Inherited Members Xamarin.Forms.ContentPage.ContentProperty Xamarin.Forms.ContentPage.OnBindingContextChanged() Xamarin.Forms.ContentPage.Content Xamarin.Forms.TemplatedPage.ControlTemplateProperty Xamarin.Forms.TemplatedPage.OnApplyTemplate() Xamarin.Forms.TemplatedPage.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.TemplatedPage.GetTemplateChild(System.String) Xamarin.Forms.TemplatedPage.ControlTemplate Xamarin.Forms.Page.BusySetSignalName Xamarin.Forms.Page.AlertSignalName Xamarin.Forms.Page.ActionSheetSignalName Xamarin.Forms.Page.BackgroundImageSourceProperty Xamarin.Forms.Page.IsBusyProperty Xamarin.Forms.Page.PaddingProperty Xamarin.Forms.Page.TitleProperty Xamarin.Forms.Page.IconImageSourceProperty Xamarin.Forms.Page.DisplayActionSheet(System.String, System.String, System.String, System.String[]) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String) Xamarin.Forms.Page.DisplayAlert(System.String, System.String, System.String, System.String) Xamarin.Forms.Page.ForceLayout() Xamarin.Forms.Page.SendBackButtonPressed() Xamarin.Forms.Page.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.Page.OnAppearing() Xamarin.Forms.Page.OnBackButtonPressed() Xamarin.Forms.Page.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Page.OnDisappearing() Xamarin.Forms.Page.OnParentSet() Xamarin.Forms.Page.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Page.UpdateChildrenLayout() Xamarin.Forms.Page.On<T>() Xamarin.Forms.Page.BackgroundImageSource Xamarin.Forms.Page.IconImageSource Xamarin.Forms.Page.IsBusy Xamarin.Forms.Page.Padding Xamarin.Forms.Page.Title Xamarin.Forms.Page.ToolbarItems Xamarin.Forms.Page.LayoutChanged Xamarin.Forms.Page.Appearing Xamarin.Forms.Page.Disappearing Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class TwoButtonPage : ContentPage, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, ILayout, IPageController, IVisualElementController, IElementController, IElementConfiguration<Page>, IPaddingElement, IControlTemplated Fields FirstButtonProperty BindableProperty. Identifies the FirstButton bindable property. Declaration public static readonly BindableProperty FirstButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty OverlapProperty BindableProperty. Identifies the Overlap bindable property. Declaration public static readonly BindableProperty OverlapProperty Field Value Type Description Xamarin.Forms.BindableProperty SecondButtonProperty BindableProperty. Identifies the SecondButton bindable property. Declaration public static readonly BindableProperty SecondButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties FirstButton Gets or sets left button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Overlap Gets or sets the overlap or not overlap the buttons and page display. Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean SecondButton Gets or sets right button of TwoButtonPage. Text property of MenuItem is ignored since button has no space to display text. Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.ILayout Xamarin.Forms.IPageController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.GoogleMapViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.GoogleMapViewRenderer.html",
    "title": "Class GoogleMapViewRenderer",
    "keywords": "Class GoogleMapViewRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < GoogleMapView > Xamarin.Forms.Platform.Tizen.ViewRenderer < GoogleMapView , Xamarin.Forms.Platform.Tizen.Native.WebViewContainer > GoogleMapViewRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView, Xamarin.Forms.Platform.Tizen.Native.WebViewContainer>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.GoogleMapView>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView, Xamarin.Forms.Platform.Tizen.Native.WebViewContainer>.SetNativeControl(Xamarin.Forms.Platform.Tizen.Native.WebViewContainer) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView, Xamarin.Forms.Platform.Tizen.Native.WebViewContainer>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView, Xamarin.Forms.Platform.Tizen.Native.WebViewContainer>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetElement(Tizen.Wearable.CircularUI.Forms.GoogleMapView) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class GoogleMapViewRenderer : ViewRenderer<GoogleMapView, WebViewContainer>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<GoogleMapView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<GoogleMapView> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < GoogleMapView > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.GoogleMapView, Xamarin.Forms.Platform.Tizen.Native.WebViewContainer>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.GoogleMapView>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.VideoOuputType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.VideoOuputType.html",
    "title": "Enum VideoOuputType",
    "keywords": "Enum VideoOuputType Enumeration that specifies the video ouput. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum VideoOuputType Fields Name Description Buffer A buffer type. Overlay An overlay type."
  },
  "api/Tizen.Wearable.CircularUI.Renderer.MediaViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Renderer.MediaViewRenderer.html",
    "title": "Class MediaViewRenderer",
    "keywords": "Class MediaViewRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < MediaView > Xamarin.Forms.Platform.Tizen.ViewRenderer < MediaView , LayoutCanvas > MediaViewRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider IMediaViewProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.MediaView, Tizen.Wearable.CircularUI.Forms.LayoutCanvas>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.MediaView>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.MediaView, Tizen.Wearable.CircularUI.Forms.LayoutCanvas>.SetNativeControl(Tizen.Wearable.CircularUI.Forms.LayoutCanvas) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.MediaView, Tizen.Wearable.CircularUI.Forms.LayoutCanvas>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.MediaView, Tizen.Wearable.CircularUI.Forms.LayoutCanvas>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetElement(Tizen.Wearable.CircularUI.Forms.MediaView) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Dispose(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.MediaView>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class MediaViewRenderer : ViewRenderer<MediaView, LayoutCanvas>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider, IMediaViewProvider Methods OnElementChanged(ElementChangedEventArgs<MediaView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<MediaView> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < MediaView > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.MediaView, Tizen.Wearable.CircularUI.Forms.LayoutCanvas>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.MediaView>) Explicit Interface Implementations IMediaViewProvider.GetMediaView() Declaration MediaView IMediaViewProvider.GetMediaView() Returns Type Description MediaView Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider IMediaViewProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleSurfaceNotFoundException.html",
    "title": "Class CircleSurfaceNotFoundException",
    "keywords": "Class CircleSurfaceNotFoundException Inheritance System.Object System.Exception CircleSurfaceNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetType() System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax [Serializable] public class CircleSurfaceNotFoundException : Exception, ISerializable Constructors CircleSurfaceNotFoundException() Declaration public CircleSurfaceNotFoundException() CircleSurfaceNotFoundException(SerializationInfo, StreamingContext) Declaration protected CircleSurfaceNotFoundException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info System.Runtime.Serialization.StreamingContext context CircleSurfaceNotFoundException(String) Declaration public CircleSurfaceNotFoundException(string message) Parameters Type Name Description System.String message CircleSurfaceNotFoundException(String, Exception) Declaration public CircleSurfaceNotFoundException(string message, Exception innerException) Parameters Type Name Description System.String message System.Exception innerException Implements System.Runtime.Serialization.ISerializable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PopupEntry.html",
    "title": "Class PopupEntry",
    "keywords": "Class PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.InputView Xamarin.Forms.Entry PopupEntry Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IEntryController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Entry > Inherited Members Xamarin.Forms.Entry.ReturnTypeProperty Xamarin.Forms.Entry.ReturnCommandProperty Xamarin.Forms.Entry.ReturnCommandParameterProperty Xamarin.Forms.Entry.PlaceholderProperty Xamarin.Forms.Entry.PlaceholderColorProperty Xamarin.Forms.Entry.IsPasswordProperty Xamarin.Forms.Entry.TextProperty Xamarin.Forms.Entry.TextColorProperty Xamarin.Forms.Entry.HorizontalTextAlignmentProperty Xamarin.Forms.Entry.FontFamilyProperty Xamarin.Forms.Entry.FontSizeProperty Xamarin.Forms.Entry.FontAttributesProperty Xamarin.Forms.Entry.IsTextPredictionEnabledProperty Xamarin.Forms.Entry.CursorPositionProperty Xamarin.Forms.Entry.SelectionLengthProperty Xamarin.Forms.Entry.On<T>() Xamarin.Forms.Entry.HorizontalTextAlignment Xamarin.Forms.Entry.IsPassword Xamarin.Forms.Entry.Placeholder Xamarin.Forms.Entry.PlaceholderColor Xamarin.Forms.Entry.Text Xamarin.Forms.Entry.TextColor Xamarin.Forms.Entry.FontAttributes Xamarin.Forms.Entry.FontFamily Xamarin.Forms.Entry.FontSize Xamarin.Forms.Entry.IsTextPredictionEnabled Xamarin.Forms.Entry.ReturnType Xamarin.Forms.Entry.CursorPosition Xamarin.Forms.Entry.SelectionLength Xamarin.Forms.Entry.ReturnCommand Xamarin.Forms.Entry.ReturnCommandParameter Xamarin.Forms.Entry.Completed Xamarin.Forms.Entry.TextChanged Xamarin.Forms.InputView.KeyboardProperty Xamarin.Forms.InputView.IsSpellCheckEnabledProperty Xamarin.Forms.InputView.MaxLengthProperty Xamarin.Forms.InputView.IsReadOnlyProperty Xamarin.Forms.InputView.MaxLength Xamarin.Forms.InputView.Keyboard Xamarin.Forms.InputView.IsSpellCheckEnabled Xamarin.Forms.InputView.IsReadOnly Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class PopupEntry : Entry, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, IFontElement, IPlaceholderElement, ITextElement, ITextAlignmentElement, IEntryController, IElementConfiguration<Entry> Fields IsPopupOpenedProperty BindableProperty. Identifies whether Popup is opended or not. Declaration public static readonly BindableProperty IsPopupOpenedProperty Field Value Type Description Xamarin.Forms.BindableProperty PopupBackgroundColorProperty BindableProperty. Identifies color of Popup background. Declaration public static readonly BindableProperty PopupBackgroundColorProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties IsPopupOpened Gets or sets a status of Popup's open. Declaration public bool IsPopupOpened { get; set; } Property Value Type Description System.Boolean PopupBackgroundColor Gets or sets a color value of Popup. Declaration public Color PopupBackgroundColor { get; set; } Property Value Type Description Xamarin.Forms.Color Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IEntryController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.EmbeddingControls.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.EmbeddingControls.html",
    "title": "Class EmbeddingControls",
    "keywords": "Class EmbeddingControls A built-in media controls. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Layout Xamarin.Forms.TemplatedView Xamarin.Forms.ContentView EmbeddingControls Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController Inherited Members Xamarin.Forms.ContentView.ContentProperty Xamarin.Forms.ContentView.Content Xamarin.Forms.TemplatedView.ControlTemplateProperty Xamarin.Forms.TemplatedView.LayoutChildren(System.Double, System.Double, System.Double, System.Double) Xamarin.Forms.TemplatedView.OnApplyTemplate() Xamarin.Forms.TemplatedView.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.TemplatedView.GetTemplateChild(System.String) Xamarin.Forms.TemplatedView.ControlTemplate Xamarin.Forms.Layout.IsClippedToBoundsProperty Xamarin.Forms.Layout.CascadeInputTransparentProperty Xamarin.Forms.Layout.PaddingProperty Xamarin.Forms.Layout.ForceLayout() Xamarin.Forms.Layout.LayoutChildIntoBoundingRegion(Xamarin.Forms.VisualElement, Xamarin.Forms.Rectangle) Xamarin.Forms.Layout.LowerChild(Xamarin.Forms.View) Xamarin.Forms.Layout.RaiseChild(Xamarin.Forms.View) Xamarin.Forms.Layout.InvalidateLayout() Xamarin.Forms.Layout.OnChildMeasureInvalidated(System.Object, System.EventArgs) Xamarin.Forms.Layout.OnChildMeasureInvalidated() Xamarin.Forms.Layout.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.Layout.ShouldInvalidateOnChildAdded(Xamarin.Forms.View) Xamarin.Forms.Layout.ShouldInvalidateOnChildRemoved(Xamarin.Forms.View) Xamarin.Forms.Layout.UpdateChildrenLayout() Xamarin.Forms.Layout.IsClippedToBounds Xamarin.Forms.Layout.Padding Xamarin.Forms.Layout.CascadeInputTransparent Xamarin.Forms.Layout.LayoutChanged Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [XamlCompilation(XamlCompilationOptions.Compile)] [XamlFilePath(\"EmbeddingControls.xaml\")] public class EmbeddingControls : ContentView, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, ILayout, ILayoutController, IPaddingElement, IControlTemplated Constructors EmbeddingControls() Internal use only, initializes a new instance of the EmbeddingControls. Declaration public EmbeddingControls() Methods OnBindingContextChanged() Declaration protected override void OnBindingContextChanged() Overrides Xamarin.Forms.ContentView.OnBindingContextChanged() Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ILayout Xamarin.Forms.ILayoutController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Check.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Check.html",
    "title": "Class Check",
    "keywords": "Class Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Switch Check Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Switch > Inherited Members Xamarin.Forms.Switch.IsToggledProperty Xamarin.Forms.Switch.OnColorProperty Xamarin.Forms.Switch.On<T>() Xamarin.Forms.Switch.OnColor Xamarin.Forms.Switch.IsToggled Xamarin.Forms.Switch.Toggled Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Check : Switch, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, IElementConfiguration<Switch> Examples var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } Fields ColorProperty BindableProperty. Identifies the Color bindable property. Declaration public static readonly BindableProperty ColorProperty Field Value Type Description Xamarin.Forms.BindableProperty DisplayStyleProperty BindableProperty. Identifies the DisplayStyle bindable property. Declaration public static readonly BindableProperty DisplayStyleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Color Gets or sets a color value of Check. Declaration public Color Color { get; set; } Property Value Type Description Xamarin.Forms.Color DisplayStyle Gets or sets display style of Check. Declaration public CheckDisplayStyle DisplayStyle { get; set; } Property Value Type Description CheckDisplayStyle Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IMediaViewProvider.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IMediaViewProvider.html",
    "title": "Interface IMediaViewProvider",
    "keywords": "Interface IMediaViewProvider Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public interface IMediaViewProvider Methods GetMediaView() Declaration MediaView GetMediaView() Returns Type Description MediaView"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector.html",
    "title": "Class CircleDateTimeSelector",
    "keywords": "Class CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View CircleDateTimeSelector Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController IRotaryFocusable Inherited Members Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleDateTimeSelector : View, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IViewController, IVisualElementController, IElementController, IGestureController, IRotaryFocusable Fields DateTimeProperty BindableProperty. Identifies the DateTime bindable property. Declaration public static readonly BindableProperty DateTimeProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfAmPmProperty BindableProperty. Identifies the IsVisibleOfAmPm bindable property. Declaration public static readonly BindableProperty IsVisibleOfAmPmProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfDateProperty BindableProperty. Identifies the IsVisibleOfDate bindable property. Declaration public static readonly BindableProperty IsVisibleOfDateProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfHourProperty BindableProperty. Identifies the IsVisibleOfHour bindable property. Declaration public static readonly BindableProperty IsVisibleOfHourProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfMinuteProperty BindableProperty. Identifies the IsVisibleOfMinute bindable property. Declaration public static readonly BindableProperty IsVisibleOfMinuteProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfMonthProperty BindableProperty. Identifies the IsVisibleOfMonth bindable property. Declaration public static readonly BindableProperty IsVisibleOfMonthProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleOfYearProperty BindableProperty. Identifies the IsVisibleOfYear bindable property. Declaration public static readonly BindableProperty IsVisibleOfYearProperty Field Value Type Description Xamarin.Forms.BindableProperty MarkerColorProperty BindableProperty. Identifies the MarkerColor bindable property. Declaration [Obsolete(\"MarkerColor bindable property is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public static readonly BindableProperty MarkerColorProperty Field Value Type Description Xamarin.Forms.BindableProperty MaximumDateProperty BindableProperty. Identifies the MaximumDate bindable property. Declaration public static readonly BindableProperty MaximumDateProperty Field Value Type Description Xamarin.Forms.BindableProperty MinimumDateProperty BindableProperty. Identifies the MinimumDate bindable property. Declaration public static readonly BindableProperty MinimumDateProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueTypeProperty BindableProperty. Identifies the ValueType bindable property. Declaration public static readonly BindableProperty ValueTypeProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties DateTime Gets or sets the date / time. Declaration public DateTime DateTime { get; set; } Property Value Type Description System.DateTime IsVisibleOfAmPm Gets or sets a boolean value that indicates whether the AmPm field type is visible. Declaration public bool IsVisibleOfAmPm { get; set; } Property Value Type Description System.Boolean IsVisibleOfDate Gets or sets a boolean value that indicates whether the date field type is visible. Declaration public bool IsVisibleOfDate { get; set; } Property Value Type Description System.Boolean IsVisibleOfHour Gets or sets a boolean value that indicates whether the hour field type is visible. Declaration public bool IsVisibleOfHour { get; set; } Property Value Type Description System.Boolean IsVisibleOfMinute Gets or sets a boolean value that indicates whether the minute field type is visible. Declaration public bool IsVisibleOfMinute { get; set; } Property Value Type Description System.Boolean IsVisibleOfMonth Gets or sets a boolean value that indicates whether the month field type is visible. Declaration public bool IsVisibleOfMonth { get; set; } Property Value Type Description System.Boolean IsVisibleOfYear Gets or sets a boolean value that indicates whether the year field type is visible. Declaration public bool IsVisibleOfYear { get; set; } Property Value Type Description System.Boolean MarkerColor Gets or sets Marker color Declaration [Obsolete(\"MarkerColor is obsolete as of Tizen.NET version 4.0.0 and is no longer supported\")] public Color MarkerColor { get; set; } Property Value Type Description Xamarin.Forms.Color MaximumDate Gets or sets the maximum date when ValueType is Date. Declaration public DateTime MaximumDate { get; set; } Property Value Type Description System.DateTime MinimumDate Gets or sets the minimum date when ValueType is Date. Declaration public DateTime MinimumDate { get; set; } Property Value Type Description System.DateTime ValueType Gets or sets DateTimeType value. If it is Time, the UI will be changed to enable time selection. If it is a Date, the date can be changed. Declaration public DateTimeType ValueType { get; set; } Property Value Type Description DateTimeType Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.Internals.IGestureController IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleProgressBarSurfaceItem.html",
    "title": "Class CircleProgressBarSurfaceItem",
    "keywords": "Class CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleProgressBarSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleProgressBarSurfaceItem : CircleSurfaceItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem Fields ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Value Gets or sets the value of the progressbar. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.ItemsView < Xamarin.Forms.Cell > Xamarin.Forms.ListView CircleListView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ITemplatedItemsView < Xamarin.Forms.Cell > Xamarin.Forms.IItemsView < Xamarin.Forms.Cell > Xamarin.Forms.IListViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.ListView > IRotaryFocusable Inherited Members Xamarin.Forms.ListView.IsPullToRefreshEnabledProperty Xamarin.Forms.ListView.IsRefreshingProperty Xamarin.Forms.ListView.RefreshCommandProperty Xamarin.Forms.ListView.HeaderProperty Xamarin.Forms.ListView.HeaderTemplateProperty Xamarin.Forms.ListView.FooterProperty Xamarin.Forms.ListView.FooterTemplateProperty Xamarin.Forms.ListView.SelectedItemProperty Xamarin.Forms.ListView.SelectionModeProperty Xamarin.Forms.ListView.HasUnevenRowsProperty Xamarin.Forms.ListView.RowHeightProperty Xamarin.Forms.ListView.GroupHeaderTemplateProperty Xamarin.Forms.ListView.IsGroupingEnabledProperty Xamarin.Forms.ListView.SeparatorVisibilityProperty Xamarin.Forms.ListView.SeparatorColorProperty Xamarin.Forms.ListView.RefreshControlColorProperty Xamarin.Forms.ListView.HorizontalScrollBarVisibilityProperty Xamarin.Forms.ListView.VerticalScrollBarVisibilityProperty Xamarin.Forms.ListView.OnBindingContextChanged() Xamarin.Forms.ListView.BeginRefresh() Xamarin.Forms.ListView.EndRefresh() Xamarin.Forms.ListView.ScrollTo(System.Object, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ListView.ScrollTo(System.Object, System.Object, Xamarin.Forms.ScrollToPosition, System.Boolean) Xamarin.Forms.ListView.CreateDefault(System.Object) Xamarin.Forms.ListView.SetupContent(Xamarin.Forms.Cell, System.Int32) Xamarin.Forms.ListView.UnhookContent(Xamarin.Forms.Cell) Xamarin.Forms.ListView.On<T>() Xamarin.Forms.ListView.ValidateItemTemplate(Xamarin.Forms.DataTemplate) Xamarin.Forms.ListView.Footer Xamarin.Forms.ListView.FooterTemplate Xamarin.Forms.ListView.GroupDisplayBinding Xamarin.Forms.ListView.GroupHeaderTemplate Xamarin.Forms.ListView.GroupShortNameBinding Xamarin.Forms.ListView.HasUnevenRows Xamarin.Forms.ListView.Header Xamarin.Forms.ListView.HeaderTemplate Xamarin.Forms.ListView.IsGroupingEnabled Xamarin.Forms.ListView.IsPullToRefreshEnabled Xamarin.Forms.ListView.IsRefreshing Xamarin.Forms.ListView.RefreshCommand Xamarin.Forms.ListView.RowHeight Xamarin.Forms.ListView.SelectedItem Xamarin.Forms.ListView.SelectionMode Xamarin.Forms.ListView.SeparatorColor Xamarin.Forms.ListView.RefreshControlColor Xamarin.Forms.ListView.SeparatorVisibility Xamarin.Forms.ListView.HorizontalScrollBarVisibility Xamarin.Forms.ListView.VerticalScrollBarVisibility Xamarin.Forms.ListView.CachingStrategy Xamarin.Forms.ListView.ItemAppearing Xamarin.Forms.ListView.ItemDisappearing Xamarin.Forms.ListView.ItemSelected Xamarin.Forms.ListView.ItemTapped Xamarin.Forms.ListView.Refreshing Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemsSourceProperty Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemTemplateProperty Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.CreateDefault(System.Object) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.SetupContent(Xamarin.Forms.Cell, System.Int32) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.IItemsView<Xamarin.Forms.Cell>.UnhookContent(Xamarin.Forms.Cell) Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemsSource Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.ItemTemplate Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.ITemplatedItemsView<Xamarin.Forms.Cell>.ListProxy Xamarin.Forms.ItemsView<Xamarin.Forms.Cell>.Xamarin.Forms.ITemplatedItemsView<Xamarin.Forms.Cell>.TemplatedItems Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleListView : ListView, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IGestureController, ITemplatedItemsView<Cell>, IItemsView<Cell>, IListViewController, IViewController, IVisualElementController, IElementController, IElementConfiguration<ListView>, IRotaryFocusable Fields BarColorProperty BindableProperty. Identifies color of the scroll bar. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelEffectProperty BindableProperty. Identifies the Header, Footer cancel the Fish Eye Effect or not. Declaration public static readonly BindableProperty CancelEffectProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BarColor Gets or sets a scroll bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Xamarin.Forms.Color Methods GetCancelEffect(BindableObject) Gets the Header, Footer cancel the Fish Eye Effect or not. Declaration public static bool GetCancelEffect(BindableObject view) Parameters Type Name Description Xamarin.Forms.BindableObject view Returns Type Description System.Boolean SetCancelEffect(BindableObject, Boolean) Sets the Header, Footer cancel the Fish Eye Effect or not. Declaration public static void SetCancelEffect(BindableObject view, bool value) Parameters Type Name Description Xamarin.Forms.BindableObject view System.Boolean value Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController Xamarin.Forms.ITemplatedItemsView<TItem> Xamarin.Forms.IItemsView<T> Xamarin.Forms.IListViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement> IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.RotaryEventHandler.html",
    "title": "Delegate RotaryEventHandler",
    "keywords": "Delegate RotaryEventHandler Delegate for a triggering rotary event Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public delegate void RotaryEventHandler(RotaryEventArgs args); Parameters Type Name Description RotaryEventArgs args Rotated direction of Rotary device"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPopupImplementation.html",
    "title": "Class TwoButtonPopupImplementation",
    "keywords": "Class TwoButtonPopupImplementation Inheritance System.Object TwoButtonPopupImplementation Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPopupImplementation : ITwoButtonPopup, IDisposable Constructors TwoButtonPopupImplementation() Declaration public TwoButtonPopupImplementation() Properties Content Declaration public View Content { get; set; } Property Value Type Description Xamarin.Forms.View FirstButton Declaration public MenuItem FirstButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem SecondButton Declaration public MenuItem SecondButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageWidget.html",
    "title": "Class TwoButtonPageWidget",
    "keywords": "Class TwoButtonPageWidget Inheritance System.Object EvasObject AccessibleObject Widget Container Layout Background TwoButtonPageWidget Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable < EvasObject > Inherited Members Background.SetFileLoadSize(Int32, Int32) Background.CreateHandle(EvasObject) Background.Color Background.File Background.BackgroundOption Layout.Freeze() Layout.Thaw() Layout.Resizing() Layout.Resizing(Boolean, Boolean) Layout.GetEdjeData(String) Layout.GetPartText(String) Layout.SetPartText(String, String) Layout.BoxAppend(String, EvasObject) Layout.BoxPrepend(String, EvasObject) Layout.BoxRemove(String, EvasObject) Layout.BoxRemoveAll(String, Boolean) Layout.BoxInsertAt(String, EvasObject, UInt32) Layout.BoxInsertBefore(String, EvasObject, EvasObject) Layout.SetPartContent(String, EvasObject) Layout.SetPartContent(String, EvasObject, Boolean) Layout.SetTheme(String, String, String) Layout.SetFile(String, String) Layout.SetVerticalTextAlignment(String, Double) Layout.GetVerticalTextAlignment(String) Layout.OnRealized() Layout.EdjeObject Layout.TextBlockAccessibility Layout.BackgroundColor Layout.LanguageChanged Layout.ThemeChanged Container.AddChild(EvasObject) Container.RemoveChild(EvasObject) Container.ClearChildren() Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.IsEnabled Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageWidget : Background, IAccessibleObject, IContainable<EvasObject> Constructors TwoButtonPageWidget(EvasObject) Declaration public TwoButtonPageWidget(EvasObject parent) Parameters Type Name Description EvasObject parent Properties Canvas Declaration public Canvas Canvas { get; } Property Value Type Description Xamarin.Forms.Platform.Tizen.Native.Canvas Children Declaration public IList<EvasObject> Children { get; } Property Value Type Description System.Collections.Generic.IList < EvasObject > Overlap Declaration public bool Overlap { get; set; } Property Value Type Description System.Boolean Methods HideButton1() Declaration public void HideButton1() HideButton2() Declaration public void HideButton2() OnUnrealize() Declaration protected override void OnUnrealize() Overrides EvasObject.OnUnrealize() ShowButton1(String) Declaration public void ShowButton1(string text) Parameters Type Name Description System.String text ShowButton1(String, Action) Declaration public void ShowButton1(string text, Action action) Parameters Type Name Description System.String text System.Action action ShowButton1(String, String, Color, Action) Declaration public void ShowButton1(string text, string image, Color backgroundColor, Action action) Parameters Type Name Description System.String text System.String image Color backgroundColor System.Action action ShowButton1(String, String, Action) Declaration public void ShowButton1(string text, string image, Action action) Parameters Type Name Description System.String text System.String image System.Action action ShowButton2(String) Declaration public void ShowButton2(string text) Parameters Type Name Description System.String text ShowButton2(String, String) Declaration public void ShowButton2(string text, string image) Parameters Type Name Description System.String text System.String image ShowButton2(String, String, Color, Action) Declaration public void ShowButton2(string text, string image, Color backgroundColor, Action action) Parameters Type Name Description System.String text System.String image Color backgroundColor System.Action action ShowButton2(String, String, Action) Declaration public void ShowButton2(string text, string image, Action action) Parameters Type Name Description System.String text System.String image System.Action action Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description System.EventHandler < Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs > Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable<T>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView.html",
    "title": "Class CircleListView",
    "keywords": "Class CircleListView Inheritance System.Object EvasObject AccessibleObject Widget Container Layout GenList CircleGenList CircleListView Implements IAccessibleObject IRotaryActionWidget ICircleWidget Inherited Members CircleGenList.CreateHandle(EvasObject) CircleGenList.CircleHandle CircleGenList.CircleSurface CircleGenList.IsEnabled CircleGenList.VerticalScrollBackgroundColor CircleGenList.VerticalScrollBackgroundLineWidth CircleGenList.VerticalScrollBackgroundRadius CircleGenList.VerticalScrollBarColor CircleGenList.VerticalScrollBarLineWidth CircleGenList.VerticalScrollBarRadius CircleGenList.VerticalScrollBarVisiblePolicy GenList.Append(GenItemClass, Object) GenList.Append(GenItemClass, Object, GenListItemType) GenList.Append(GenItemClass, Object, GenListItemType, GenListItem) GenList.Prepend(GenItemClass, Object) GenList.Prepend(GenItemClass, Object, GenListItemType) GenList.Prepend(GenItemClass, Object, GenListItemType, GenListItem) GenList.InsertBefore(GenItemClass, Object, GenListItem) GenList.InsertBefore(GenItemClass, Object, GenListItem, GenListItemType) GenList.InsertBefore(GenItemClass, Object, GenListItem, GenListItemType, GenListItem) GenList.InsertAfter(GenItemClass, Object, GenListItem, GenListItemType, GenListItem) GenList.InsertSorted(GenItemClass, Object, Comparison<Object>, GenListItemType, GenListItem) GenList.ScrollTo(GenListItem, ScrollToPosition, Boolean) GenList.UpdateRealizedItems() GenList.GetItemByPosition(Int32, Int32, Int32) GenList.GetItemByIndex(Int32) GenList.Homogeneous GenList.ListMode GenList.FirstItem GenList.LastItem GenList.ReorderMode GenList.BlockCount GenList.IsHighlight GenList.LongPressTimeout GenList.FocusOnSelection GenList.IsMultiSelection GenList.SelectedItem GenList.SelectionMode GenList.Count GenList.ItemSelected GenList.ItemUnselected GenList.ItemPressed GenList.ItemReleased GenList.ItemActivated GenList.ItemDoubleClicked GenList.ItemExpanded GenList.ItemRealized GenList.ItemUnrealized GenList.ItemLongPressed GenList.ItemMoved GenList.ItemMovedAfter GenList.ItemMovedBefore GenList.Changed GenList.ScrollAnimationStarted GenList.ScrollAnimationStopped Layout.Freeze() Layout.Thaw() Layout.Resizing() Layout.Resizing(Boolean, Boolean) Layout.GetEdjeData(String) Layout.GetPartText(String) Layout.SetPartText(String, String) Layout.BoxAppend(String, EvasObject) Layout.BoxPrepend(String, EvasObject) Layout.BoxRemove(String, EvasObject) Layout.BoxRemoveAll(String, Boolean) Layout.BoxInsertAt(String, EvasObject, UInt32) Layout.BoxInsertBefore(String, EvasObject, EvasObject) Layout.SetPartContent(String, EvasObject) Layout.SetPartContent(String, EvasObject, Boolean) Layout.SetTheme(String, String, String) Layout.SetFile(String, String) Layout.SetVerticalTextAlignment(String, Double) Layout.GetVerticalTextAlignment(String) Layout.EdjeObject Layout.TextBlockAccessibility Layout.BackgroundColor Layout.LanguageChanged Layout.ThemeChanged Container.AddChild(EvasObject) Container.RemoveChild(EvasObject) Container.ClearChildren() Container.Children Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.OnUnrealize() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.Color EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListView : CircleGenList, IAccessibleObject, IRotaryActionWidget, ICircleWidget Constructors CircleListView(EvasObject, CircleSurface) Declaration public CircleListView(EvasObject parent, CircleSurface surface) Parameters Type Name Description EvasObject parent CircleSurface surface Properties Footer Declaration public VisualElement Footer { get; set; } Property Value Type Description Xamarin.Forms.VisualElement Header Declaration public VisualElement Header { get; set; } Property Value Type Description Xamarin.Forms.VisualElement HeaderRowHeight Declaration public int HeaderRowHeight { get; set; } Property Value Type Description System.Int32 Methods AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddItem(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddItem(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddSource(IEnumerable) Declaration public void AddSource(IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source AddSource(IEnumerable, Cell) Declaration public void AddSource(IEnumerable source, Cell before) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Cell before AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group AddSource(IEnumerable, TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void AddSource(IEnumerable source, TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description System.Collections.IEnumerable source Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Xamarin.Forms.Cell before ApplyScrollTo(Cell, ScrollToPosition, Boolean) Declaration public void ApplyScrollTo(Cell cell, ScrollToPosition position, bool animated) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.ScrollToPosition position System.Boolean animated ApplySelectedItem(Cell) Declaration public void ApplySelectedItem(Cell cell) Parameters Type Name Description Xamarin.Forms.Cell cell Clear() Declaration public void Clear() InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell>, Cell) Declaration public void InsertGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group, Cell before) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Xamarin.Forms.Cell before InsertItem(Cell, Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void InsertItem(Cell cell, Cell before, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Cell before Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group OnRealized() Declaration protected override void OnRealized() Overrides GenList.OnRealized() Remove(Cell) Declaration public void Remove(Cell cell) Parameters Type Name Description Xamarin.Forms.Cell cell Remove(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void Remove(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group RemoveSource(IEnumerable) Declaration public void RemoveSource(IEnumerable source) Parameters Type Name Description System.Collections.IEnumerable source ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public void ResetGroup(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Implements IAccessibleObject IRotaryActionWidget ICircleWidget"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewCache.html",
    "title": "Class ListViewCache",
    "keywords": "Class ListViewCache Inheritance System.Object ListViewCache Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class ListViewCache Properties InformalItemClass Declaration public static GenItemClass InformalItemClass { get; } Property Value Type Description GenItemClass InformalItemClassWithoutFishEye Declaration public static GenItemClass InformalItemClassWithoutFishEye { get; } Property Value Type Description GenItemClass PaddingItemClass Declaration public static GenItemClass PaddingItemClass { get; } Property Value Type Description GenItemClass Methods Get(Cell) Declaration public static CellRenderer Get(Cell cell) Parameters Type Name Description Xamarin.Forms.Cell cell Returns Type Description Xamarin.Forms.Platform.Tizen.CellRenderer Get(Cell, Boolean) Declaration public static CellRenderer Get(Cell cell, bool IsGroupHeader) Parameters Type Name Description Xamarin.Forms.Cell cell System.Boolean IsGroupHeader Returns Type Description Xamarin.Forms.Platform.Tizen.CellRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.InformationPopupImplementation.html",
    "title": "Class InformationPopupImplementation",
    "keywords": "Class InformationPopupImplementation Inheritance System.Object InformationPopupImplementation Implements System.IDisposable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class InformationPopupImplementation : IInformationPopup, IDisposable Constructors InformationPopupImplementation() Declaration public InformationPopupImplementation() Properties BottomButton Declaration public MenuItem BottomButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem IsProgressRunning Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Declaration public string Text { get; set; } Property Value Type Description System.String Title Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Declaration public void Dismiss() Dispose() Declaration public void Dispose() Dispose(Boolean) Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Finalize() Declaration protected void Finalize() Show() Declaration public void Show() Events BackButtonPressed Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.IDisposable"
  },
  "guide/CirclePage.html": {
    "href": "guide/CirclePage.html",
    "title": "CirclePage",
    "keywords": "CirclePage CirclePage, is a visual element, which is derived from Xamarin.Forms.Page . This occupies entire wearable screen. Overview CirclePage is a container of any control that uses circle object or Rotary Event . If you want to use any circle control or you want to handle the Rotary Event , you must use CirclePage . CirclePage can set BOTTOM button ( ActionButtonItem ), CircleProgressBar , CircleSlider and MoreOption on its own. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. BOTTOM button (ActionButtonItem) A semicircular button is shown at bottom of screen. See the following image: CircleProgressBar CircleProgressBar displays the progress status of a given task with the circular design. CircleSlider CircleSlider changes value corresponding to the Rotary Event . This displays a circle bar at the edge of the circle screen. You can change the radius of circle bar by modifying radius value. MoreOption MoreOption contains a cue button (in the figure on the left). When the cue button is clicked, the rotary selector view opens from the cue location (in the figure on the right). The rotary selector arranges multiple items around the circular edge of the screen. The focus switches between items when you rotate the bezel. Create CirclePage To create CirclePage, you must download Tizen.Wearable.CircularUI NuGet package in your application project. For more information, see QuickStart . Add a new XAML page to the Tizen Xamarin.Forms application. Import Tizen.Wearable.CircularUI.Forms and change the base class from ContentPage to CirclePage. This must be done in both the C# and XAML. In a XAML file, import CircularUI and define namespace as xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" The code example of this guide uses TCCirclePage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCirclePage.xaml C# file using Tizen.Wearable.CircularUI.Forms; using Xamarin.Forms.Xaml; namespace WearableUIGallery.TC { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCCirclePage : CirclePage { public TCCirclePage() { InitializeComponent(); } } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.Content> Add content in CirclePage You can set content in the CirclePage.Content . In the XAML file, code explains that CirclePage adds content with CircleDateTimeSelector . RotaryFocusObject property sets the currently focused control that is handled by rotating and display the circle object of the focused control. If the value is not set properly, the control will not receive the Rotary Event . For more information, see the following links: CirclePage API reference Xamarin.Forms.Page guide XAML file <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCirclePage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{Binding RotaryFocusTarget}\"> <w:CirclePage.BindingContext> <local:TCCirclePageViewModel RotaryFocusTarget=\"{x:Reference DateSelector}\"/> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"DateSelector\" IsVisibleOfDate=\"{Binding DateVisiblity}\" MaximumDate=\"1/1/2020\" MinimumDate=\"1/12/2015\" ValueType=\"Date\" /> </StackLayout> </w:CirclePage.Content> Add ActionButtonItem in CirclePage The ActionButtonItem in CirclePage displays BOTTOM button. The ActionButtonItem is derives from Xamarin.Forms.Menuitem . ActionButtonItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Text : Gets or sets text of button. For more information, see the following links: ActionButtonItem API reference Xamarin.Forms.MenuItem API reference XAML file <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ProgressBarVisibleCommand}\" Text=\"OK\" /> </w:CirclePage.ActionButton> Add ToolbarItems in CirclePage CirclePage ToolbarItems set items of rotary selector views. You can set each item with CircleToolbarItem property. CircleToolbarItem derives from Xamarin.Forms.ToolbarItem . CircleToolbarItem has the following properties: Command : Gets or sets the ICommand to be invoked on activation (item clicked). Icon : Gets or sets image of item. Text : Gets or sets title of item. For more information, see the following links: CircleToolbarItem API reference Xamarin.Forms.ToolbarItem API reference XAML file <w:CirclePage.ToolbarItems> <w:CircleToolbarItem Command=\"{Binding Play.Action}\" Icon=\"{Binding Play.Icon}\" SubText=\"{Binding Play.SubText}\" Text=\"{Binding Play.Text}\" /> <w:CircleToolbarItem Command=\"{Binding Stop.Action}\" Icon=\"{Binding Stop.Icon}\" SubText=\"{Binding Stop.SubText}\" Text=\"{Binding Stop.Text}\" /> ... </w:CirclePage.ToolbarItems> Add CircleProgressBarSurfaceItem in CirclePage CirclePage CircleSurfaceItems can set CircleProgressBarSurfaceItem and CircleSliderSurfaceItem . CircleProgressBarSurfaceItem represents Circle ProgressBar. progress1 at XAML code represents the outer circle of following image. progress2 represents the inner circle. If you use CircleProgressbar, you do not need to set the RotaryFocusObject property of CirclePage. When Value property is increased or decreased, circle object extends or shrinks the following to the Value property. CircleProgressBarSurfaceItem has the following properties: Value : Gets or sets the value of the progress bar. IsVisible : Gets or sets the visibility value of circle surface item. BarRadius : Gets or sets the bar radius value. BackgroundRadius : Gets or sets the background radius value. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleProgressBarSurfaceItem API reference The code example of this guide uses CircleProgressBar.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleProgressBar.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleProgressBar\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\"> <w:CirclePage.BindingContext> <local:CircleProgressBarViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,30,0,0\" BackgroundColor=\"Black\" HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <Label x:Name=\"label1\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel1}\" TextColor=\"White\" /> <Label x:Name=\"label2\" Margin=\"0,40\" FontAttributes=\"Bold\" FontSize=\"12\" Text=\"{Binding ProgressLabel2}\" TextColor=\"White\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleProgressBarSurfaceItem x:Name=\"progress1\" IsVisible=\"True\" Value=\"{Binding ProgressValue1}\" /> <w:CircleProgressBarSurfaceItem x:Name=\"progress2\" BackgroundColor=\"Black\" BackgroundLineWidth=\"15\" BackgroundRadius=\"70\" BarColor=\"Red\" BarLineWidth=\"15\" BarRadius=\"70\" IsVisible=\"True\" Value=\"{Binding ProgressValue2}\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> Add CircleSliderSurfaceItem in CirclePage CircleSliderSurfaceItem represents Circle Slider. slider at XAML code represents the circle of following image. If you use CircleSlider bar, you must set Circle Slider name at the RotaryFocusObject property of CirclePage. The Value property is the default value for the Slider. If you rotate the bezel, the Value property increases or decreases depending on the bezel behavior. The Increment property is the incremental or decremental change as you rotates the bezel. CircleSliderSurfaceItem has the following properties: Value : Gets or sets the value of the slider. Increment : The value of the slider is increased/decreased by the Increment value. Minimum : Gets or sets the minimum value of the slider. Maximum : Gets or sets the maximum value of the slider. BarLineWidth : Gets or sets the bar line width value. BackgroundLineWidth : Gets or sets the background line width value. BarColor : Gets or sets the bar color value. BackgroundLineWidth : Gets or sets the background color value. For more information, see the following links: CircleSurfaceItem API reference CircleSliderSurfaceItem API reference The code example of this guide uses CircleSlider.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSlider.xaml XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSlider\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label x:Name=\"label\" BindingContext=\"{x:Reference Name=slider}\" FontSize=\"12\" Text=\"{Binding Value, StringFormat='{0:F1}'}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage>"
  },
  "guide/GoogleMapView.html": {
    "href": "guide/GoogleMapView.html",
    "title": "GoogleMapView",
    "keywords": "GoogleMapView How to display Map in Tizen .NET application You can use the following ways for displaying map in your .NET applications. Tizen.Maps Tizen.Maps provides geocoding. reverse geocording, place searching, route calculation, and map view widgets. This provides the most functionality for map in Tizen .NET application. Tizen.Maps provides Here Maps . In some country, it has low map quality or outdated(e.g. China, Korea, Japan), You can check at mobile.here.com . So you need to make sure that the country where your app is deployed is provided with Here Map data. For using this API, you should use Tizen .NET UI framework which are EFLShrap or Elmsharp or NUI. If you want to use this APIs in Xamarin.Forms Application. you should make custom renderer. Xamarin.Forms.Maps You can use Xamarin.Forms.Maps in Xamarin.Forms application. Xamarin.Forms.Maps.Tizen renderer use Tizen.Maps. So It provides Here Maps data. But, it provides minimun set of map functionality. Use WebView and REST APIs Map providers support Javascirpt API and REST APIs for Web and application. You can retrive map data using System.Net.Http . You can implement javascript code for loading map and then set in Xamarin.Forms.WebView. Tizen.Wearable.CircularUI GoogleMapView GoogleMapView provides minimum functionality of Google Maps javascript APIs . Introduce GoogleMapView provides minimum functionality of Google Maps javascript APIs . It display google map data in WebView which is predefined in renderer. GoogleMapView only provides static map data. It doesn't mean that map can't scroll and zoom. GoogleMapView property value can't reflect user interaction. For example, it is impossible to get the position(geographical coordinates) value where user clicks in GoogleMapView. And, it is impossbile to display the user's current position dynamically. Therefore, you can use it to display a map of a specific area or marking designated positions in the map. Prerequisite 1. Get Google API Key To use the GoogleMapView , you must get an google API key in Google Cloud Patform Console . The API key is used to track API requests associated with your project for usage and billing. For more detail Information, please refer to Get API Key 2. Insert API key in FormsCircularUI.Init set your API key for the parameter of FormsCircularUI.Init(APIKEY) method. Your API key will be used for loading google javascript map in GoogleMapView. private static string APIKEY = \"Insert_Your_Google_API_key\"; ... global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(APIKEY); 3. Add Previleges Before using GoogleMapView for your application, you must add the http://tizen.org/privilege/internet and http://tizen.org/privilege/network.get previlege to tizen-manifest.xml file. Because GoogleMapView needs internet connection. Following figure show adding privilege to tizen-manifest.xml . If you want to get the current location, you should use location service which needs http://tizen.org/privilege/location privilege. Display map GoogleMapView displays google javascript map. GoogleMapView setting value can be changed with GoogleMapOption structure which set by the Update method. By default, GoogleMapOption structure is null. and GoogleMapView renderer set default value. Following example show default GoogleMapView without GoogleMapOption and screen capture of this example(figure1). The code example of this guide uses TCMapViewStackLayout1 code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewStackLayout1.xaml <ContentPage x:Class=\"WearableUIGallery.TC.TCMapViewStackLayout1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <StackLayout Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:GoogleMapView x:Name=\"GoogleMapView\" VerticalOptions=\"FillAndExpand\" HorizontalOptions=\"FillAndExpand\" /> </StackLayout> </ContentPage.Content> </ContentPage> Following example show the GoogleMapView with GoogleMapOption and screen capture of this example(figure2). Xaml code is same as the above example. Following example only show xaml.cs code. GoogleMapView center latitude and longitude value are set 34.0869 and -118.282242 . And then, Zoom value is set 10.1 and Maptype is set Hybrid . The code example of this guide uses TCMapViewStackLayout3 code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewStackLayout3.xaml.cs private static double Latitude = 34.0869; private static double Longitude = -118.282242; public TCMapViewStackLayout3() { InitializeComponent (); var position = new LatLng(Latitude, Longitude); var option = new GoogleMapOption(position); option.Zoom = 10.1; option.MapType = GoogleMapType.Hybrid; GoogleMapView.Update(option); } Default GoogleMapView(figure1) GoogleMapView with GoogleMapOption(figure2) Display pins in Map Specific locations can be marked on the map with Xamarin.Forms.Maps.Pin objects. Following example show the GoogleMapView with Pin objects. The figure is the result of this example code. public partial class TCMapViewPins1 : ContentPage { private static double Latitude = 40.7157961; private static double Longitude = -74.0252194; public TCMapViewPins1() { InitializeComponent (); var option = new GoogleMapOption(); var position = new LatLng(Latitude, Longitude); option.Center = position; option.Zoom = 12; mapview.Update(option); var marker1 = new Marker { Position = new LatLng(40.711493, -74.011351), Description = \"Westfield World Trade Center\", Address = \"185 Greenwich St, New York, NY 10007\", }; var marker2 = new Marker { Position = new LatLng(40.689651, -74.045412), Description = \"Statue of Liberty National Monument\", Address = \"New York, NY 10004\", }; var marker3 = new Marker { Position = new LatLng(40.748368, -73.985560), Description = \"Empire State Building\", Address = \"20 W 34th St, New York, NY 10001\", }; mapview.Markers.Add(marker1); mapview.Markers.Add(marker2); mapview.Markers.Add(marker3); } Display device current position (statical) If you want to display marker for your device's current position or display map on your current position, you can use Tizen.Location API. To use the Tizen.Location , you must add http://tizen.org/privilege/location privilege to tizen-manifest.xml (refer to above guide ) and you should add code for checking and requesting of privacy-related permission. Following code example show you how can check and request privacy-related permission. For more detail informaiton about privacy-related permission, please refer to Privacy-related Permissions guide . The code example of this guide uses TCMapViewCurrentPosition code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCMapViewCurrentPosition.xaml.cs public void PrivilegeCheck() { try { CheckResult result = PrivacyPrivilegeManager.CheckPermission(\"http://tizen.org/privilege/location\"); switch (result) { case CheckResult.Allow: break; case CheckResult.Deny: break; case CheckResult.Ask: /// Request to privacy popup PrivacyPrivilegeManager.RequestPermission(\"http://tizen.org/privilege/location\"); break; } } catch (Exception ex) { /// Exception handling } } If a user has granted permission to use the http://tizen.org/privilege/location , device can use Tizen.Location service. Following example code show the GoogleMapView which move to current position and display marker your device position. And the following figure is the result of this example code. void LocationInitialize() { try { _locator = new Locator(LocationType.Hybrid); if (_locator != null) { _locator.Start(); _locator.ServiceStateChanged += LocatorServiceStateChanged; } _locatorInitialized = true; } catch (Exception ex) { /// Exception handling } } public void LocatorServiceStateChanged(object sender, ServiceStateChangedEventArgs e) { if (e.ServiceState == ServiceState.Enabled) { GetCurrentPosition(); } ... } private void GetCurrentPosition() { var marker = new Marker(); try { Location location = _locator.GetLocation(); var current = new LatLng(location.Latitude, location.Longitude); Tizen.Log.Debug(\"CircularUI\", $\"Current:[{location.Latitude},{location.Longitude} ]\"); marker.Position = current; } catch (Exception ex) { ... } marker.Description = \"Current position\"; _option.Center = marker.Position; _option.Zoom = 14; mapviewPosition.Update(_option); mapviewPosition.Markers.Add(marker); }"
  },
  "guide/Localization.html": {
    "href": "guide/Localization.html",
    "title": "Localization",
    "keywords": "Localization This document describes how to localize your Tizen Xamarin.Forms application. String Localization Display the correct Language Image Localization Application Name Localization String Localization You can begin with reading the following how-to article of Xamarin.Forms Localization. For more information on String Localization, see Xamarin.Forms Localization . Explain how to create a resource file Add the RESX resource files that will be used to store all the text used in the your application. Change the string visibility from internal to public. Select your resx file and click Properties . In the Configuration Properties, change Custom Tool to PublicResXFileCodeGenerator as shown in the following image: Add language-specific resource files, which must follow a specific naming convention and use the same filename as the base resources file. Explain how to use a resource file Use name of texts with String type in the RESX files in your user interface code. C# file var speedLabel = new Label (); var maximumLabel = new Label (); speedLabel.Text = AppResources.Speed; maximumLabel.Text = AppResources.Maximum; Use name of texts with String type in the RESX files in the your xaml code. XAML file <Application x:Class=\"Speedmeter.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:Speedmeter\" xmlns:resx=\"clr-namespace:Speedmeter.Resx;\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <w:CirclePage> <CirclePage.Content> <AbsoluteLayout> <Label x:Name=\"SpeedLabel\" AbsoluteLayout.LayoutBounds=\"0.5, 0.3\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" Style=\"{StaticResource LabelStyle-Base}\" Text=\"{x:Static resx:AppResources.Speed}\" /> <Label x:Name=\"AverageLabel\" AbsoluteLayout.LayoutBounds=\"0.2, 0.7\" AbsoluteLayout.LayoutFlags=\"PositionProportional\" Style=\"{StaticResource LabelStyle-Base}\" Text=\"{x:Static resx:AppResources.Average}\" /> Display the correct Language To display the correct language, you must implement additional code in your project to determine which language the user has selected. Please refer to following Xamarin.Forms article. For more information, see Display the correct Language . Define an interface to use your DependencyService : public interface ILocalize { CultureInfo CurrentCultureInfo { get; } void SetLocale(CultureInfo ci); } Implement the DependencyService in Tizen platform project for getting current system language setting.( SystemSettings API is included in Tizen.Net nuget package) [assembly: Dependency(typeof(LocaleService))] namespace Speedmeter.Tizen.Wearable.DependencyService { class LocaleService : ILocalize { CultureInfo _currentCultureInfo; public LocaleService() { _currentCultureInfo = GetCurrentCultureInfo(); // To get notified when system locale settings has been changed SystemSettings.LocaleLanguageChanged += LanguageChanged; } public CultureInfo CurrentCultureInfo { get { return _currentCultureInfo; } } public void SetLocale(CultureInfo info) { Thread.CurrentThread.CurrentCulture = info; Thread.CurrentThread.CurrentUICulture = info; } CultureInfo GetCurrentCultureInfo() { var netLanguage = \"en\"; var TizenLocale = SystemSettings.LocaleLanguage; netLanguage = TizenToDotnetLanguage(TizenLocale.ToString().Replace(\"_\", \"-\")); CultureInfo info = null; try { info = new CultureInfo(netLanguage); } catch (CultureNotFoundException e1) { Console.WriteLine(\"cannot find the current cultureInfo. so use 'en'. (\" + e1.Message + \")\"); info = new CultureInfo(\"en\"); } return info; } private void LanguageChanged(object sender, LocaleLanguageChangedEventArgs e) { CultureInfo info = GetCurrentCultureInfo(); _currentCultureInfo = info; // Notify the change of locale information MessagingCenter.Send<ILocalize, CultureInfo>(this, \"LanguageChanged\", info); } string TizenToDotnetLanguage(string tizenLanguage) { var netLanguage = tizenLanguage; //certain languages need to be converted to CultureInfo equivalent switch (tizenLanguage) { case \"zh-CN\": // Chinese Simplified (People's Republic of China) netLanguage = \"zh-Hans\"; // correct code for .NET break; case \"zh-HK\": // Chinese Traditional (Hong Kong) case \"zh-hk\": case \"zh-tw\": // Chinese Traditional (Taiwan) case \"zh-TW\": netLanguage = \"zh-Hant\"; // correct code for .NET break; } Console.WriteLine(\"[Speedmeter] .NET Language/Locale:\" + netLanguage); return netLanguage; } } } Use the DependencyService in the Xamarin.Forms application to call the interface and set your RESX resource culture to the correct value. You can receive the culture information using MessagingCenter . You can also update your application UI when your application is running and system language has been changed. var ci = DependencyService.Get<ILocalize>().CurrentCultureInfo; Resx.AppResources.Culture = ci; // set the RESX for resource localization DependencyService.Get<ILocalize>().SetLocale(ci); // Whenever language has been changed, CurrentCulture will be updated. MessagingCenter.Subscribe<ILocalize, CultureInfo>(this, \"LanguageChanged\", (obj, culture) => { Resx.AppResources.Culture = culture; DependencyService.Get<ILocalize>().SetLocale(culture); //update your App UI }); Image Localization Tizen project supports localized images(resources) using different resource directories. Tizen uses res.xml file to specify the information about the directory, which contains the localized resources(For example, Image, Sound, and so on). The res.xml file is automatically generated when you build your application. To add the localized resource directories in your application in Visual Studio: In Solution Explorer, select Tizen project. Go to Tools > Tizen > Resource Manager Resource Manager window appears. In Configuration tab, select from the language drop-down list. Select the language, Click Add . Resource directories are automatically created in Tizen project as res.xml file. This file is generated in res directory of Tizen project after building an application as: Note Your application can sometimes run in a locale, for which you have not provided images. In that case, Tizen loads the default image from the resource content directory (yourApp.Tizen/res/content/). If there is no default image within resource content directory and the device sets the locale, for which you have not provided images, an error occurs. When you detect locale changes, you must update the resource culture. Then you must update the texts and images, which you want to localize. As for localized images, you can make custom image renderer to load the proper locale-specific images. Tizen provides the path of locale-specific images via ResourceManager.TryGetPath and ResourceManager.GetPath methods. With this, you can change class LocalizedImageRenderer :ImageRenderer using TizenResourceManager = Tizen.Applications.ResourceManager; public LocalizedImageRenderer() : base() { SystemSettings.LocaleLanguageChanged += SystemSettings_LocaleLanguageChanged; } // Invoked every time the language setting has been changed private void SystemSettings_LocaleLanguageChanged(object sender, LocaleLanguageChangedEventArgs e) { // Get the path of a proper image based on locale and update the source of an image Element.Source = TizenResourceManager.TryGetPath(TizenResourceManager.Category.Image, fileName); } Application Name Localization You can add localized application name and icon using tizen-manifest.xml in the Tizen project. Open the tizen-manifest.xml , select the Localization tab and click Add to add Name . Add application names for languages you want to support."
  },
  "guide/Quickstart_tizenXAMLAppTemplate.html": {
    "href": "guide/Quickstart_tizenXAMLAppTemplate.html",
    "title": "Tizen XAML App Template",
    "keywords": "Tizen XAML App Template 1) Create project Select 'Tizen XAML App' template on 'New project'. Select only wearable device at Tizen project wizard. Search Xamarin.Forms NuGet package and install latest version (supports version 3.1.0.583944 and higher) via NuGet package manager. Package source is Nuget.org . Search Tizen.Wearable.CircularUI NuGet package and install latest version via NuGet package manager. Package source is Nuget.org . Install Tizen.Wearable.CircularUI NuGet at portable class library (PCL) project. 2) Insert CircularUI control code Remove SampleCircleApp.cs that is generated automatically at PCL. Add App.xaml and App.xaml.cs using add item. In App.xaml file, remove all of the template code and replace it with the following code. This code defines the user interface for the page: xmlns:w=clr-namespace:Tizen.Wearable.CircularUI.Forms : w prefix means Tizen.Wearable.CircularUI.Forms namespace. <w:CirclePage> : CirclePage derive from Xamarin.Forms.Page . This Page content area has Label and Button . <w:CirclePage.CircleSurfaceItems> : CircleSliderSurfaceItem attached for CircleSurfaceItem of CirclePage . RotaryFocusObject is set reference of the slider . CircleSliderSurfaceItem has rotary focus. CircleSliderSurfaceItem can receive a Rotary Event from the wearable device's bezel interaction. For more information, see CirclePage guide . App.xaml file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <Application x:Class=\"SampleCircleApp.App\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:SimpleCircleApp\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <Application.MainPage> <NavigationPage x:Name=\"MainNavigation\"> <x:Arguments> <w:CirclePage x:Name=\"page\" NavigationPage.HasNavigationBar=\"False\" RotaryFocusObject=\"{x:Reference slider}\"> <w:CirclePage.Content> <StackLayout HorizontalOptions=\"Center\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label HorizontalTextAlignment=\"Center\" Text=\"Welcome to Xamarin Forms!\" /> <Button Clicked=\"OnButtonClicked\" Text=\"show toast\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.CircleSurfaceItems> <w:CircleSliderSurfaceItem x:Name=\"slider\" Increment=\"0.5\" IsVisible=\"True\" Maximum=\"15\" Minimum=\"0\" Value=\"3\" /> </w:CirclePage.CircleSurfaceItems> </w:CirclePage> </x:Arguments> </NavigationPage> </Application.MainPage> </Application> In App.xaml.cs, remove all of the template code and replace it with the following code: OnButtonClicked is an event handler of Button Clicked event. The following code simply displays Toast popup during three seconds: App.xaml.cs file using Tizen.Wearable.CircularUI.Forms; using System; using Xamarin.Forms; using Xamarin.Forms.Xaml; namespace SampleCircleApp { [XamlCompilation(XamlCompilationOptions.Compile)] public partial class App : Application { public App() { InitializeComponent(); } public void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } } } For initializing CircularUI instance, insert FormsCircularUI.Init() code in the Main method in SampleCircleApp.Tizen.Wearable.cs . You must import Tizen.Wearable.CircularUI.Forms.Renderer with using directives. SampleCircleApp.Tizen.Wearable.cs file using Tizen.Wearable.CircularUI.Forms.Renderer; static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); //must insert this initialize code app.Run(args); } 2. Build and launch your application. Build the solution In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Click Launch Tizen Emulator button, as displayed in the following image: For Windows OS, copy the application tpk file from the project binary path to sdb tool path. SampleCircleApp tpk: The file is located in ProjectPath\\SampleCircleApp.Tizen.Wearable\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk . Project path: To locate the project path, in the Solution Explorer view, right-click the solution name and click open folder in file explorer . sdb tool: This is located in c:\\tizen\\tools\\sdb.exe For Windows OS, launch Tizen Sdb Command Prompt (Tool > Tizen > Tizen Sdb Command Prompt). For Linux, you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp.Tizen.Wearable-1.0.0.tpk Launch wearable emulator to verify the application"
  },
  "guide/CreatingCertificates.html": {
    "href": "guide/CreatingCertificates.html",
    "title": "Creating Certificates",
    "keywords": "Creating Certificates This document explains how to create the necessary ceriticates or import existing ones to install the Tizen application on a Samsung Tizen wearable device. Creating Certificate Profile In the menu bar, click Tools > Tizen > Tizen Certificate Manager to launch the Certificate Manager. Import Old Profile If you have a profile, which you have created in the past, you can import it. Click the Cancel button, if you want to create a new profile. Create a New Certificate Profile Certificate profile contains author certificate and distributor certificate. New certificate profile Click the + button to create a certificate profile. Type of the certificate Select Samsung as the certificate profile to generate certificates to develop and install an application to the Samsung devices. To upload the application to the store, you must select the certificate profile as Samsung. However, if you want to use the emulator and do not want to upload the application to the store, select Tizen to create certificate locally. Type of the device Select Device Type and click Next . Create new or select old profile Select Create a new certificate profile to create a new profile. If there is an existing profile, then select the second option. For more information on Select an existing certificate profile , see how to manage certificate profile . Create a New Author Certificate An author certificate includes information about the author of the application. It is used to create an author signature, which ensures the integrity of the application from the author since the publication of the application. Create new or select existing author certificate Select Create a new author certificate . If there is an existing author certificate, see how to manage certificate profile . With Advanced options menu, you can check Use an existing author certificate option to select either the Android keystore, or you can also choose already existing Samsung author certificate. Click Next . The same signing key helps in maintaining secure peer authentication between the Tizen Gear App and the Android mobile app. For more information, see Accessory SDK . In case of selecting a Samsung author certificate, you can just renew the certificate with the same information. This renewed certificate will be the same as your original RSA key so upgrading your application is guaranteed. Information of the author certicate Enter the author name and password. It is recommended to set a strong password. If you want to use the same password for the distributor certificate in the next step, select the check box as shown in the following figure: Additional Fields contains more Certificate Signing Request(CSR) information to add, but are not mandatory. Click Next . Sign in to Samsung Account Samsung Account sign-in window appears. Click Sign in or Create new account . (To get a certificate, you must have a Samsung Account. If you do not have an account, it is recommended to create a new account.) Backup created Author certificate After sign in step, you can get the author certificate. The author certificate must be secure. Therefore, it is recommend creating a backup. Click Browse to specify the backup location. If you lose the author certificate, you cannot upgrade your application signed with the same certificate. Click Next . The next step is creating distributor certificate. Create a New Distributor Certificate Create new or select existing distributor certificate Select Create a new distributor certificate to create a new certificate. If you select Select an existing distributor certificate , see Managing Certificate Profile . Click Next . Information of the distributor certicate Select the Privilege level for the distributor certificate. The application must have a distributor certificate with appropriate privilege level to ensure that the implemented APIs work in the device. Note Privileges To protect the device system and user private data, the Tizen security architecture is based on privileges and application signing of the Linux basic security model. Linux basic security model includes process isolation and mandatory access control. The users must have options to grant privileges for security-sensitive operations. Public - No limitation. The privileges can be used by all Tizen application developers. Partner - No limitation to request and get the distributor certificate with this level. But when the application is uploaded to the store, store re-signs the application with official partner level distributor certificate, only for the registered partner developer at Samsung. If you have selected an option to apply same password to the author certificate and to the distributor certificate while entering author certificate information , the password is already saved. If you want to change the password, type the new password for the distributor certificate. After the device is connected to the Host PC, the DUID is automatically added to the list. If you want to add more devices, connect your device to your Host PC via USB or WiFi. The previous DUIDs in the list are not deleted even if you disconnect the device. To delete the DUIDs, click the trash icon. For more information, see How to connect the device to PC via WiFi . When you need to register devices that are more than 10, upload a txt file using Import a DUID list file menu. 1 DUID on a line and max 50 DUIDs are be available. Note The DUID of recent mobile and wearable devices start with 2.0#, but old devices are 1.0#. If a distributor certificate contains a 1.0# DUID, all devices with that certificate require one more step. For more information, see Permit Device To Install Applications guide. If you do not have any actual device but want to develop apps and upload to the store, launch the emulator virtual machine and use its DUID. Finish to create the distributor certificate Click Next , to get the distributor certificate. Click Finish . You can find the created profile and its information."
  },
  "guide/CircleStepper.html": {
    "href": "guide/CircleStepper.html",
    "title": "CircleStepper",
    "keywords": "CircleStepper CircleStepper allows you to select a value from a range of incremental values specified with Minimum , Maximum , and Increment properties. It is an extension of Xamarin.Forms.Stepper . LabelFormat have been added to the Xamarin.Forms.Stepper . You can modify the value with Bezel interaction . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . WARNING: The marker is no longer supported from Tizen 4.0 SDK which is applied bezel-less UX in 2019. Therefore, the above image is obsolete and marker related API was deprecated. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleStepper in CirclePage You can set the CircleStepper in the CirclePage.Content . For more information on how to add CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control that is handled by rotating and displaying the focused control's circle object. If this value properly is not set, then control can not receive Rotary Event . CircleStepper has the following properties: LabelFormat: This property gets or sets the format in which the value is shown. This example consists of StackLayout with a CircleStepper and two Labels in the CirclePage . Since 9 is set to Minimum and LabelFormat is set to \"% 1.1f\", \"9.0\" appears on the screen. Since the Increment is 7.5, it increases by 7.5 when you turn the bezel and increase the Value . The Maximum defined value is 99, hence the marker does not exceed this value. For more information, see the following links: CircleStepper API reference Xamarin.Forms.Stepper API reference Xamarin.Forms.Stepper Guide The code example of this guide uses XUIComponent's SpinnerDefault of CircleSpinner code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleSpinner\\SpinnerViewModel.cs and SpinnerDefault.xaml The following code shows CirclePage with CircleStepper: C# file public class SpinnerViewModel : INotifyPropertyChanged { double _value= 9.0; ... public double Value { get => _value; set { if (_value == value) return; _value = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleSpinner.SpinnerDefault\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleSpinner\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference stepper}\"> <w:CirclePage.BindingContext> <local:SpinnerViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout Padding=\"0,50,0,0\" Orientation=\"Vertical\"> <Label FontAttributes=\"Bold\" FontSize=\"11\" HorizontalTextAlignment=\"Center\" Text=\"Title\" TextColor=\"#0FB4EF\" /> <Label FontSize=\"8\" HorizontalTextAlignment=\"Center\" Text=\"unit\" TextColor=\"White\" /> <w:CircleStepper x:Name=\"stepper\" HorizontalOptions=\"CenterAndExpand\" Increment=\"7.5\" LabelFormat=\"%1.1f\" Maximum=\"99.0\" Minimum=\"9.0\" Value=\"{Binding Value}\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"SET\" /> </w:CirclePage.ActionButton> </w:CirclePage>"
  },
  "guide/CircleStackLayout.html": {
    "href": "guide/CircleStackLayout.html",
    "title": "CircleStackLayout",
    "keywords": "CircleStackLayout CircleStackLayout organizes views in a one-dimensional line (\"stack\"), either horizontally or vertically. CircleStackLayout is similar to Xamarin.Forms.StackLayout , but it arranges internal components in a form that fits the circular screen. Rectangular components are placed in close proximity to the circle. Margin is calculated after placement. If Orientation is not set, Vertical is used. The larger the Spacing value, the greater the distance between the components placed. At the right end of the following figure, the Spacing value is 50: Horizontal Vertical Spacing Note CircleStackLayout will lay out the children in the form of inserting a circle with a radius that is the shorter of \"width\" and \"height\". Therefore, it may be strange if one of the axes is very short, so it is better to use it when the width and height of the layout area are similar. Add CircleStackLayout in ContentPage You can set CircleStackLayout in ContentPage . In the following example, there is a large number of BoxView . Therefore, the entire content is larger than the screen size and uses CircleStackLayout in ScrollView . For more information, see the following links: CircleStackLayout API reference Xamarin.Forms.StackLayout API reference Xamarin.Forms.StackLayout Guide The code example of this guide uses TCCircleStackLayout.xaml code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleStackLayout.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCCircleStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> ... <ContentPage> <ScrollView> <w:CircleStackLayout> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> <BoxView BackgroundColor=\"Red\" /> <BoxView BackgroundColor=\"Orange\" /> <BoxView BackgroundColor=\"Yellow\" /> <BoxView BackgroundColor=\"Green\" /> <BoxView BackgroundColor=\"Blue\" /> <BoxView BackgroundColor=\"Navy\" /> <BoxView BackgroundColor=\"Purple\" /> </w:CircleStackLayout> </ScrollView> </ContentPage> ... </w:IndexPage> Bad case to using <ContentPage> <w:CircleStackLayout VerticalOptions=\"Center\" BackgroundColor=\"White\"> <Label VerticalOptions=\"Center\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </w:CircleStackLayout> </ContentPage> In Bad case, the width of CircleStackLayout is too long of the height of it. CircleStackLayout lay out the children in a small circle because it assumes shorter axes is a radius. Check out next very simple example of using StackLayout. <ContentPage> <StackLayout VerticalOptions=\"Center\" BackgroundColor=\"White\"> <Label VerticalOptions=\"Center\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </StackLayout> </ContentPage> You should check the size of the CircleStackLayout if you lay out the children to right place. <ContentPage> <w:CircleStackLayout VerticalOptions=\"Fill\" BackgroundColor=\"White\"> <Label HorizontalOptions=\"CenterAndExpand\" VerticalOptions=\"CenterAndExpand\" Text=\"Welcome to Xamarin Forms!\" BackgroundColor=\"Gray\"/> </w:CircleStackLayout> </ContentPage> In good case of the CircleStackLayout. you can see each vertex of the label that contacts inside of the circle."
  },
  "guide/TwoButtonPopup.html": {
    "href": "guide/TwoButtonPopup.html",
    "title": "TwoButtonPopup",
    "keywords": "TwoButtonPopup The TwoButtonPopup represents The Tizen Wearable EFL two button popup style. The TwoButtonPopup is used to select one of the two options such as cancel or done, and share or delete. Since TwoButtonPopup does not adhere as a control, this popup cannot be set in the XAML file. Create TwoButtonPopup The TwoButtonPopup.Title property sets the title of the popup. You can set the Content property with layouts such as StackLayout or ScrollView . The TwoButtonPopup.FirstButton property sets the left side button. The TwoButtonPopup.SecondButton property sets the right side button. You can set FirstButton and SecondButton using the MenuItem . You must add code at Command or Clicked event handler for controlling MenuItem clicked. For more information, see TwoButtonPopup API reference . The code example of this guide uses TCTwoButtonPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPopup.xaml.cs C# file var leftButton = new MenuItem() { Icon = new FileImageSource { File = \"image/b_option_list_icon_share.png\", }, Command = new Command(() => { /* must insert code when user press left button */ }) }; ... _popUp1 = new TwoButtonPopup(); _popUp1.FirstButton = leftButton; _popUp1.SecondButton = rightButton; _popUp1.Title = \"Popup title\"; _popUp1.Content = new StackLayout() { HorizontalOptions = LayoutOptions.FillAndExpand, Children = { new Label { Text = \"Will be saved, and sound, only on the Gear.\", }, new StackLayout { Orientation = StackOrientation.Horizontal, Padding = new Thickness(0, 30, 0, 30), Children = { checkbox, new Label { Text = \"Do not repeat\", } } } } }; } How to Set Long Text in TwoButtonPopup The TwoButtonPopup has Text property. This property is useful to set long text. If a long text is set using the Text property, you do not need to add StackLayout , ScrollView , Label to display long text. The area of the Text property overlaps the area of the Content property. Therefore, do not use two properties at the same time. C# file _popUp2 = new TwoButtonPopup(); _popUp2.FirstButton = leftButton2; _popUp2.SecondButton = rightButton2; _popUp2.Title = \"Popup title\"; _popUp2.Text = @\"This is scrollable popup text. This part is made by adding long text in popup. Popup internally added scroller to this layout when size of text is greater than total popup height. This has two button in action area and title text in title area\";"
  },
  "guide/CircleScrollView.html": {
    "href": "guide/CircleScrollView.html",
    "title": "CircleScrollView",
    "keywords": "CircleScrollView CircleScrollView is to ensure that larger views display well on smaller wearable devices. It is an extension of Xamarin.Forms.ScrollView . Similar to Xamarin.Forms.ScrollView , but the Scroller is rendered to CircleSurface . Scrolling is possible with Bezel interaction . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . Horizontal Vertical WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleScrollView in CirclePage You can set CircleScrollView in CirclePage.Content . For more information about how to add a CirclePage , see CirclePage guide . The following XAML code shows CirclePage with CircleScrollView . RotaryFocusObject property sets the currently focused control that is handled by rotating and displays the circle object of focused control. If the value is not set properly, the control does not receive the Rotary Event . The direction of the scroller depends on the setting of the Orientation value. In the following example, the Orientation of the CircleScrollView is set to Horizontal and is placed in the StackLayout to contain many images: For more information, see the following links: CircleScrollView API reference Xamarin.Forms.ScrollView API reference Xamarin.Forms.ScrollView Guide The code example of this guide uses HorizontalScroller.xaml code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleScroller/HorizontalScroller.xaml The following code shows CirclePage with CircleScrollView: XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleScroller.HorizontalScroller\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleScroller\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference myscroller}\"> <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Horizontal\"> <StackLayout HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\"> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_btn_delete_holo_dark.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_mute.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_ic_popup_btn_check.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_alert.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_bell.png\" VerticalOptions=\"CenterAndExpand\" /> <Image Source=\"tw_number_controller_icon_ringtone_sound.png\" VerticalOptions=\"CenterAndExpand\" /> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "guide/Toast.html": {
    "href": "guide/Toast.html",
    "title": "Toast",
    "keywords": "Toast Toast provides simple information. Toast automatically disappears after timeout (in seconds). Tizen Wearable Toast fills the entire screen with display message and image. Single text Icon and text Create Toast Toast is a static method. Therefore, you do not need any container or parent control for using this control. Toast provides two methods, Toast.DisplayText() displays simple text message and Toast.DisplayIconText() displays simple icon and simple text message. The first parameter of Toast.DisplayText() method is message text. The second parameter is timeout duration (milliseconds). The second parameter is optional. If you do not set this value, the default value is set to 3000 milliseconds (three seconds). The first parameter of Toast.DisplayIconText() method is message text. The second parameter is icon file path. You can set file path with new FileImageSource . The third parameter is timeout duration, which is optional. For more information, see Toast API reference . C# file Toast.DisplayText(\"Toast popup\", 3000); Toast.DisplayIconText(\"Toast popup2\", new FileImageSource { File = \"image/tw_ic_popup_btn_check.png\" }, 2000);"
  },
  "guide/ManagingCertificateProfile.html": {
    "href": "guide/ManagingCertificateProfile.html",
    "title": "Managing Certificate Profile",
    "keywords": "Managing Certificate Profile Before installing your application on a device or submitting it to the Tizen Store, it must be signed with a certificate profile. The signature verifies the source of the application and ensures that it is not tampered with since its publication. A certificate profile is a combination of the certificates used for signing. General Information In the menu bar, click Tools > Tizen > Tizen Certificate Manager to launch the Certificate Manager. The Active profile is indicated by the check mark. All of the application in this SDK will be signed with this active profile. You can create, delete, and set a profile to active here. Lower window shows the information of each certificate. You can replace the certificate with an existing one. The Tizen platform allows multiple distributor certificates up to two, which supports other device manufacturers or telecommunication companies. However, it is not needed for most of the developers generally. Changing Only a Distributor Certificate in a Profile There might be an instance where you need to register more devices or change the devices to the distributor certificate. However, author certificates rarely needs to be changed. This section explains how to change distributor certificate. Follow the same steps to create a certificate profile as described in create new or select old profile . Select an existing certificate profile Click Select an existing certificate profile and select a profile, for which you want to change the registered device and click Next . Use the existing author certificate If you click No to use the existing author certificate then move to create new or select existing distributor certiicate to register DUID. Note If you click Yes , it moves to create a new author certificate step and original author certificate will be removed permanently. It is recommended to consider the dialog box message carefully. However, the SDK automatically backups the original author.p12 file with timestamp extension such as author.p12_bak_20160806092013 in the profile directory to protect developer from unintended removal of author certificate. Create new Distributor for certificate profile Follow the same steps as mentioned in create new or select existing distributor certificate . Importing Existing Certificates If you already have both the author.p12 and distributor.p12 certificates and you do not require a new certificate from Samsung, you can import and use the available certificates to sign your application. In that case, create a new certificate profile and select existing certificates at each step. Follow the same steps as mentioned in creating certificate before creating a new profile or selecting an old profile . Select an existing author certificate The author certificate must be the same for the application that is to be upgraded. Select Select an existing author certificate and click Next . Click Browse to select your author.p12 file, enter the password then click Next . Select an existing distributor certificate Click Select an existing distributor certificate , click Browse to select your distributor.p12 file, enter the password and then click Finish . Find the created profile in the list Now you can find the created profile in the list. Troubleshooting Question : I lost the author.p12 . Can I upgrade my application? Answer : No. If the author key is different, the application cannot be upgraded."
  },
  "guide/HowToSetTheCustomFont.html": {
    "href": "guide/HowToSetTheCustomFont.html",
    "title": "How to set the custom font",
    "keywords": "How to set the custom font You can add the font path via Elmsharp.Utility.AppendGlobalFontPath . The parameter path must be a directory in which the fonts to be added are present. If you use only ElmSharp, you should make get the following code. using ElmSharp; using Tizen.Applications; namespace ElmSharpNewFont { class Program : CoreUIApplication { protected override void OnCreate() { var window = new Window(\"NewFontWindow\"); Utility.AppendGlobalFontPath(Application.Current.DirectoryInfo.Resource); var layout = new Box(window) { WeightX = NamedHint.Expand, WeightY = NamedHint.Expand, BackgroundColor = Color.Black }; window.AddResizeObject(layout); layout.Show(); var label = new Label(layout) { AlignmentX = 0.5, AlignmentY = 0.5, WeightX = NamedHint.Expand, WeightY = NamedHint.Expand, Text = \"안녕하세요.\", TextStyle = \"DEFAULT='font=YiSunShinBold font_size=39'\", }; label.Show(); layout.PackEnd(label); } static void Main(string[] args) { var app = new Program(); app.Run(args); } } } Application.Current.DirectoryInfo.Resource is application's resource directory in which the YiSunShin-Bold.ttf font is located In the Label.TextStyle , font= part should be font name not font family . YiSunShinBold is the font name and font family is YiSunShin Bold , but you can see that it is written as font name . Note The font name is actually postscript name in your TTF or OTF file. In some cases, a custom font can't be set with postscript name . If your custom font is not applied with postscript name , please try to set font family name Tip You can find postscript name and font family name from the font file with fc-query in the font config installed shell. fc-query -f \"%{postscriptname}\\n\" Font.ttf fc-query -f \"%{family}\\n\" Font.ttf Of course, it can also be used with Xamarin.Forms. using ElmSharp; using Tizen.Applications; namespace XamarinFormsNewFont { class Program : global::Xamarin.Forms.Platform.Tizen.FormsApplication { protected override void OnCreate() { base.OnCreate(); Utility.AppendGlobalFontPath(Application.Current.DirectoryInfo.Resource); LoadApplication(new App()); } static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); Tizen.Wearable.CircularUI.Forms.Renderer.FormsCircularUI.Init(); app.Run(args); } } } using Xamarin.Forms; namespace XamarinFormsNewFont { public class App : Application { public App() { MainPage = new ContentPage { Content = new StackLayout { VerticalOptions = LayoutOptions.Center, Children = { new Label { HorizontalTextAlignment = TextAlignment.Center, FontFamily = \"YiSunShinBold\", Text = \"Welcome to Xamarin Forms!\" } } } }; } } } Similarly, you can call Utility.AppendGlobalFontPath before the Label is used. Tip You can find YiSunShin font from here"
  },
  "guide/CreatingTestAutomation.html": {
    "href": "guide/CreatingTestAutomation.html",
    "title": "Creating UI automation test for Tizen .NET Application",
    "keywords": "Creating UI automation test for Tizen .NET Application This guide shows how to create and run a UI automation test using Appium and NUnit for Tizen .NET Application. Appium is an open source project supporting cross-platform test automation tool. You can find many guide and information. In This guide, Test Application uses WearableUIGallery which contains many TCs to check CircularUI API behavior. Appium Client has a test script for UI automation. This guide uses the Appium.CircularUI.Test . Please refer to the following image There are 4 step for building UI automation Prerequisite Modifying Your Application Make Testscript Run Testscript Prerequisite Installing Appium server appium guide : https://github.com/appium/appium/blob/master/docs/en/contributing-to-appium/appium-from-source.md appium git repository : https://github.com/appium/appium setup and run appium server (e.g ubunt) $ git clone https://github.com/appium/appium.git $ cd appium $ npm install appium-chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver $ npm install $ npm run build $ node . Modifying Your Application If your Application use CircularUI then download Tizen.Appium git. Otherwise, skips 2 ~ 3 steps and go to step 4 after adding Tizen.Appium NuGet in Your Application project. In the Tizen.Appium.csproj file, add WATCH to the DefineConstants value for being restored CircularUI NuGet. <PropertyGroup Condition=\"'$(Configuration)|$(Platform)'=='Debug|AnyCPU'\"> <DefineConstants>TRACE;DEBUG;TIZEN4_0;WATCH</DefineConstants> </PropertyGroup> <ItemGroup Condition=\"$(DefineConstants.Contains(WATCH))\"> <PackageReference Include=\"Tizen.Wearable.CircularUI\" Version=\"1.0.0-pre2-00118\" /> </ItemGroup> Add Tizen.Appium project to your application solution, and then add Tizen.Appium in a reference project in your application project. In the following Image, Tizen.Appium is added in Tizen.Wearable.CircularUI.Test.Appium solution, and then add in a reference project in WearableUIGallery.Tizen.Wearable project. Add Tizen.Appium.TizenAppium.StartService to main method and Tizen.Appium.TizenAppium.StopService to OnTerminate methods. protected override void OnTerminate() { base.OnTerminate(); #if UITest global::Tizen.Appium.TizenAppium.StopService(); #endif } static void Main(string[] args) { var app = new Program(); global::Xamarin.Forms.Platform.Tizen.Forms.Init(app); FormsCircularUI.Init(); #if UITest global::Tizen.Appium.TizenAppium.StartService(app); #endif app.Run(args); } Add AutomationId to the Xamarin.Forms control for allowing to find and control the specified control during the automation test. Please refer to the following code. <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check AutomationId=\"default\" DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check AutomationId=\"onOff\" DisplayStyle=\"Onoff\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> Make Testscript Install Nunit Test Adapter in visual studio : Visual Studio Tools > Extension and Update > Create unit test project(.NET framework) Visual Studio File > New > Project > Tap Test in Visual C# > Select Unit Test Project(.NET Framework) Remove NuGet packages (e.g NunitTestAdapter, Xamarin.UITest ...) except Nunit, and then update Nunit NuGet package to v3.11.0. Install following NuGet packages Appium.WebDriver (upper 4.0.0.4) Selenium.WebDriver Selenium.Support Newtonsoft.Json DotNetSeleniumExtras.PageObjects Castle.Core Remove auto-generated cs files(e.g AppInitializer.cs, Tests.cs), And then copy 3 files ( Program.cs, TestTemplate.cs, UITestDriver.cs ) from Tizen.Wearable.CircularUI\\test\\Appium.CircularUI.Tests\\ to your project. Set configuration. Please refer to InitTizen() in test\\Appium.CircularUI.Tests\\UITestDriver.cs . You should set AppiumOptions Set platformName to Tizen Set deviceName to your testing device name. Set appPackage to your Application package name. Set app to your Application tpk name. Create TizenDriver with Uri(Your Appium server IP address). In the below Example 192.168.0.49 is Appium server IP. You should insert your device's IP which installed Appium server. 4723 is designated port number for Appium server. void InitTizen(string platform, string profile) { AppiumOptions option = new AppiumOptions(); option.AddAdditionalCapability(\"platformName\", platform); option.AddAdditionalCapability(\"deviceName\", \"emulator-26111\"); option.AddAdditionalCapability(\"appPackage\", \"org.tizen.example.WearableUIGallery.Tizen.Wearable\"); option.AddAdditionalCapability(\"app\", \"org.tizen.example.WearableUIGallery.Tizen.Wearable-1.0.0.tpk\"); _driver = new TizenDriver<AppiumWebElement>(new Uri(\"http://192.168.0.49:4723/wd/hub\"), option); _touchScreen = new RemoteTouchScreen(_driver); } If you want to add a common set of functions that are performed before or after each test, please make SetUp method and TearDown method. In the following Appium.CircularUI.Tests code, SetUp and TearDown methods are called in TestTemplate Class. Each Test Class inherited the TestTemplate Class. using NUnit.Framework; namespace Appium.UITests { public class TestTemplate { public UITestDriver Driver; [OneTimeSetUp] public void Init() { Driver = UITestDriver.Instance; } [SetUp] public void TestSetUp() { Driver.FindTC(this.GetType().Name); } [TearDown] public void TestCleanUp() { Driver.GoHomePage(); } } } Write test script with Nunit feature. please refer to Nunit documentation using NUnit.Framework; namespace Appium.UITests { [TestFixture, Order(15)] public class Check : TestTemplate { [Test] public void CheckTest() { Driver.Click(\"default\"); Driver.Click(\"onOff\"); Driver.Click(\"small\"); var isToggled = Driver.GetAttribute<bool>(\"default\", \"IsToggled\"); Assert.True(isToggled, \"Check(default).IsToggled should be true, but got \" + isToggled); ... } } Run Testscript Launch your Tizen emulator or connect Tizen wearable device to PC which installed Appium server. Run Appium Server. Appium installed Path/appium (master)$ node . [Appium] Welcome to Appium v1.9.2-beta.2 (REV a95edb162350a359d6cc45b7aa89a3843b19f0ee) [Appium] Appium REST http interface listener started on 0.0.0.0:4723 Launch Test Explorer Window In Visual Studio 2017. Top menu bar > Test > Windows > Test Explorer Click Run All in Test Explorer window. You can run the selected test clicking the Run Selected Test menu with a mouse right click on a test case."
  },
  "guide/CircleDateTimeSelector.html": {
    "href": "guide/CircleDateTimeSelector.html",
    "title": "CircleDateTimeSelector",
    "keywords": "CircleDateTimeSelector CircleDateTimeSelector is a view for Date Picker and Time Picker. You can rotate the bezel to explore the screen using the Bezel interaction . The view of this selector covers the entire screen. To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . The Date display screen is a touch screen. You can set the value of the year: month: day by touch and by rotating the bezel. The Time display screen is also a touch screen. You can set the value of the hour: minute: AM / PM by touch and by rotating the bezel. Date Time WARNING: The marker is no longer supported from Tizen 4.0 SDK which is applied bezel-less UX in 2019. Therefore, marker related API was deprecated. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleDateTimeSelector in CirclePage You can set CircleDateTimeSelector in the CirclePage.Content . For more information on how to add a CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control using the rotating interaction, and displays the focused control's circle object. If the value is not set properly, the control will not receive the Rotary Event . CircleDateTimeSelector has the following properties: ValueType : The value of time is changed in Time, and the value of date is changed in Date. DateTime : Sets or gets date/time. MaximumDate : Sets or gets maximum date. MimimumDate : Sets or gets minimum date. The following example explains how to set a timepicker. Assign ValueType value for \"Time\" and set the current time to the DateTime property. When the code is executed, the current time will be displayed on the screen. Since the focussed area on the screen shows the hour item, the hour item is changed when the bezel is turned. To change the minutes, touch the minute item and turn the bezel. For more information, see CircleDateTimeSelector API reference . The code example of this guide uses CircleDateTime code of XUIComponent. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleDateTime/DateTimeViewModel.cs and CircleTime.xaml The following code shows CirclePage with CircleDateTimeSelector: C# file public class DateTimeViewModel : INotifyPropertyChanged { static DateTime _dateTime = DateTime.Now; public DateTime Datetime { get => _dateTime; set { //Console.WriteLine($\"Set Datetime value : {value.ToString()}\"); if (_dateTime == value) return; _dateTime = value; OnPropertyChanged(); } } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleDateTime.CircleTime\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleDateTime\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference timeSelector}\"> <w:CirclePage.BindingContext> <local:DateTimeViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <StackLayout BackgroundColor=\"Black\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"FillAndExpand\"> <w:CircleDateTimeSelector x:Name=\"timeSelector\" DateTime=\"{Binding Datetime, Mode=TwoWay}\" MaximumDate=\"1/1/2022\" MinimumDate=\"1/12/2010\" ValueType=\"Time\" /> </StackLayout> </w:CirclePage.Content> <w:CirclePage.ActionButton> <w:ActionButtonItem Command=\"{Binding ButtonPressedExit}\" Text=\"OK\" /> </w:CirclePage.ActionButton> </w:CirclePage>"
  },
  "guide/Check.html": {
    "href": "guide/Check.html",
    "title": "Check",
    "keywords": "Check Check provides Tizen Wearable specific CheckBox widget. Check accepts user input by the method of toggling. Check derives from Xamarin.Forms.Switch . Create Check You can easily add Check control with C# or XAML file. Tizen wearable device supports 3 styles of DisplayStyle ( Default , Onoff , Small ). Each shape of DisplayStyle depends on the device model. You can set the default value of check with IsToggled property. True value set Check selected. False value set Check unselected. Toggled event is raised when Check is toggled. You must add code for handling Toggled event. For more information, see the following links: Check API reference Xamarin.Forms.Switch API reference C# file var check = new Check { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, DisplayStyle = \"Onoff\" } check.Toggled += (s, e) => { Console.WriteLine(\"Check is now {0}\", e.Value); } XAML file Refer to TCCheck code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCeck.xaml <StackLayout Orientation=\"Vertical\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Default\" /> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledDefault\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Onoff\" /> <w:Check DisplayStyle=\"Onoff\" HorizontalOptions=\"FillAndExpand\" IsToggled=\"True\" Toggled=\"OnToggledOnOff\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Small\" /> <w:Check DisplayStyle=\"Small\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" Toggled=\"OnToggledSmall\" /> </StackLayout>"
  },
  "guide/TestingYourAppOnGear.html": {
    "href": "guide/TestingYourAppOnGear.html",
    "title": "Test Tizen .NET Application on a Gear device",
    "keywords": "Test Tizen .NET Application on a Gear device To publish a Tizen .NET Application to Samsung Gallaxy Apps store, you have to test it on Samsung Gear devices. Since Samsung Gear does not have a USB port, Tizen provides a support to publish the app to the app store over Wi-Fi. Therefore, you must connect the Gear device to Wi-Fi and the host PC to Wi-Fi or the Unshielded-Twisted-Pair (UTP) cable to the same local network. Prepare Gear Device To debug an application on the Samsung Gear device: Execute the Settings application. Scroll to the bottom of the menu and tap About watch . Tap Debugging to turn on. Press the back button of the hardware, scroll to the Connections menu, and tap it. Tap Wi-Fi to turn it on. Debugging over Wi-Fi You can install and execute your application on the Samsung Gear device over Wi-Fi. Open Visual Studio 2017 app on your developer computer. Select Tizen > Tizen Device Manager > Remote Device Manager . Click Scan Devices to search for remote Samsung Gear devices. You can see a list of available remote devices. Select the IP of Samsung Gear Device that you want to connect to. The connected Gear device appears on the Device Manager Explorer window. Connecting via the SDB command You can connect to Gear device via SDB command. Open the Command Prompt in the Host PC and enter the following command: $ sdb connect [Gear S2 IP address]:26101 Example $ sdb connect 192.168.0.71:26101 You can see the states of the connected Gear devices using SDB command. $ sdb devices List of devices attached 192.168.0.71:26101 device SM-R805U"
  },
  "guide/MediaView.html": {
    "href": "guide/MediaView.html",
    "title": "MediaView and MediaPlayer",
    "keywords": "MediaView and MediaPlayer Introduction MediaView is used to displaythe video on the screen. MediaPlayer provides functionality of playing multimedia. PlaybackState MediaPlayer has a PlaybackState . Some APIs only work on the certain state and some APIs transit the state. State diagram of PlaybackState Video output type Buffer It displays video data on the graphics buffer using GL surface. It is usually used to attach a video on a part of the view. MediaView Associating Player with MediaView MediaPlayer and video output are created independently. The developer needs to associate Player and the video output to display video data. Use Player property of MediaView <w:CirclePage x:Class=\"WearableUIGallery.TC.TCMediaViewStackLayout\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:CirclePage.Content> <StackLayout> <w:MediaView x:Name=\"View\"> <w:MediaPlayer x:Name=\"VideoPlayer\" Source=\"test.mp4\" AutoPlay=\"true\" UsesEmbeddingControls=\"true\"/> </w:MediaView> </StackLayout> </w:CirclePage.Content> </w:CirclePage> var view = new MediaView { Player = new MediaPlayer { UsesEmbeddingControls = true, AutoPlay = true, Source = MediaSource.FromFile(\"test.mp4\") } }; Embedding controls By default, MediaPlayer provides an embedding control. If you don't want to use the default embedding controls, set UsesEmbeddingControls to false. public bool UsesEmbeddingControls embedding contols (on playing) embedding contols (on pausing) without embedding controls AutoPlay/AutoStop Video can't play before media view is shown, so you need to know when the media views are available. If you use AutoPlay / AutoStop property, you don't need to care about the view state. AutoPlay public bool AutoPlay Automatically starts a player when a View is shown (Rendered). AutoStop public bool AutoStop Automatically stops a player when a View is gone (Renderer was disposed). Convert Position to Progress In many cases, MediaPlayer.Position is int value, whereas Progressbar.Progress is double value (0 to 1.0), so conversion is required. This can be easily implemented through a custom converter as follows. Create a custom converter Implements Xamarin.Forms.IValueConverter public class PositionToProgressConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { return ((int)value / (double)(GetParameter(parameter))); } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { return (int)((double)value * GetParameter(parameter)); } int GetParameter(object parameter) { var duration = ((Tizen.Wearable.CircularUI.Forms.MediaPlayer)parameter).Duration; if (duration == 0) duration = 1; return duration; } } Pass a MediaPlayer instance as the parameter Use a custom converter in Xaml .... <ContentPage.Resources> <ResourceDictionary> <local:PositionToProgressConverter x:Key=\"positionToProgress\"/> </ResourceDictionary> </ContentPage.Resources> ... <ProgressBar Progress=\"{Binding Source={x:Reference Player}, Path=Position, Converter={StaticResource positionToProgress}, ConverterParameter={x:Reference Player}}}\"/> ...."
  },
  "guide/CircleSurfaceEffectBehavior.html": {
    "href": "guide/CircleSurfaceEffectBehavior.html",
    "title": "CircleSurfaceEffectBehavior",
    "keywords": "CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a Behavior , which allows you to attach the CircleSurface to the Xamarin.Forms.Page . CircleSurface is a Tizen specific component that manages circle objects . Following are the two ways to add circle control such as CircleListView , CircleDateTimeSelector , CircleScrollView and CircleStepper at Page in Tizen Xamarin Forms application: Inserting these controls to CirclePage . Adding CircleSurfaceEffectBehavior in Page that includes circle control. Add CircleSurfaceEffectBehavior in Page Add the CircleSurfaceEffectBehavior in the <Page.Behaviors> and set RotaryFocusObject property to Attached Page with circle control name. The RotaryFocusObject sets the currently focused control that is handled by rotating and display the focused control's circle object. For more information, see the following links: CircleSurfaceEffectBehavior API reference Xamarin.Forms.Page guide Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior The code example of this guide uses TCListAppender code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCListAppender.xaml XAML file <w:TwoButtonPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCListAppender\" w:CircleSurfaceEffectBehavior.RotaryFocusObject=\"{x:Reference mylist}\"> <w:TwoButtonPage.Behaviors> <w:CircleSurfaceEffectBehavior/> </w:TwoButtonPage.Behaviors> <w:TwoButtonPage.Content> <w:CircleListView x:Name=\"mylist\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <w:CircleListView.Header> <x:String>Head</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Clicked=\"DoAdd\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Clicked=\"DoDel\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/TwoButtonPage.html": {
    "href": "guide/TwoButtonPage.html",
    "title": "TwoButtonPage",
    "keywords": "TwoButtonPage TwoButtonPage is derived from Xamarin.Forms.Page . TwoButtonPage has two semicircular buttons that are located at the left side and the right side of the circle. Non-overlapped Overlapped Create TwoButtonPage You can set controls in the TwoButtonPage.Content tag. In the XAML file example, a long text Label and two buttons are set as the content. If the Overlap property is set to true , the Content area occupies the entire screen. If the Overlap property is set to false , the Content area occupies the available area on the screen excluding the button area. The default value of Overlap property is always false . TwoButtonPage.firstButton sets left side button. TwoButtonPage.SecondButton sets right side button. You can add buttons using MenuItem . For more information, see the following links: TwoButtonPage API reference Xamarin.Forms.Page guide Xamarin.Forms.MenuItem API reference The code example of this guide uses TCTwoButtonPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCTwoButtonPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:TwoButtonPage x:Class=\"WearableUIGallery.TC.TCTwoButtonPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:TwoButtonPage.BindingContext> <local:TCTwoButtonPageViewModel /> </w:TwoButtonPage.BindingContext> <w:TwoButtonPage.Content> <ScrollView> <StackLayout HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"FillAndExpand\"> <Label HorizontalOptions=\"FillAndExpand\" HorizontalTextAlignment=\"Center\" Text=\"{Binding Text}\" VerticalOptions=\"FillAndExpand\" /> <Button Clicked=\"OnRemove1\" Text=\"Remove 1\" /> <Button Clicked=\"OnRemove2\" Text=\"Remove 2\" /> </StackLayout> </ScrollView> </w:TwoButtonPage.Content> <w:TwoButtonPage.FirstButton> <MenuItem Command=\"{Binding Command1}\" Icon=\"image/tw_ic_popup_btn_check.png\" /> </w:TwoButtonPage.FirstButton> <w:TwoButtonPage.SecondButton> <MenuItem Command=\"{Binding Command2}\" Icon=\"image/tw_ic_popup_btn_delete.png\" /> </w:TwoButtonPage.SecondButton> </w:TwoButtonPage>"
  },
  "guide/PermitDeviceToInstallApps.html": {
    "href": "guide/PermitDeviceToInstallApps.html",
    "title": "Permit Device To Install Applications",
    "keywords": "Permit Device To Install Applications In the menu bar, click Tools > Tizen > Tizen Device Manager . Right-click anywhere in the file explorer of the Device Manager and select Permit to install applications . Troubleshooting If failed to install application to device, follow the instructions: Verify the device date and time. If the certificate issued is before the device date and time, the application cannot be installed, as the certificate is considered invalid. Verify whether the permit to install applications process is performed correctly."
  },
  "guide/LibraryList.html": {
    "href": "guide/LibraryList.html",
    "title": "Third Party Libraries for Tizen .NET Application",
    "keywords": "Third Party Libraries for Tizen .NET Application Following is the list of libraries filtered based on the purpose: Hardware Messaging Multimedia Security System User interface Hardware Libraries for programming with hardware. Barcode Scanner - Scans and creates barcodes with ZXing.NET.Mobile. Battery Status - Gathers battery level, charging status, and charging type. Connectivity - Gets network connectivity information such as type and verifies whether the connection is available. Device Info - Properties about device such as OS, Model, and Id. Device Motion - Provides access to Accelerometer, Gyroscope, Magnetometer, and Compass. Messaging Libraries for manipulating message. Messaging - Make phone call, send sms, and send e-mail. Multimedia Libraries for manipulating multimedia. FFImageLoading - Image loading with caching, placeholders, transformations and so on. SimpleAudioPlayer - Plays local files and audio data as a stream. This allows you to store audio data in a portable class library and play it on all supported platforms. SkiaSharp - Is a cross-platform 2D graphics API for .NET platforms based on Google's Skia Graphics Library. It provides a comprehensive 2D API that can be used across mobile, server, and desktop models to render images. Media - Takes photos and videos using camera and selects them from gallery. Media Manager - Play and control audio and video. Security Libraries for manipulating secure storage. Secure Storage - Provides secure storage for key-value pairs. It can be used to securely store sensitive data strings such as password, session token, credit card number, and so on. System Libraries for manipulating system. Permissions - Verifies and requests runtime permissions. Settings - Simple and consistent cross platform settings API. User interface Libraries for working with graphical user interface applications. Share - Shares texts, links, or opens a browser. User Dialogs - This library is for standard user dialog from core .net standard library, actionsheets, alerts, confirmations, loading, login, progress, prompt, and toast."
  },
  "guide/CircleListView.html": {
    "href": "guide/CircleListView.html",
    "title": "CircleListView",
    "keywords": "CircleListView CircleListView is a view for presenting lists of data, a short list that does not require scrolling, and a long list that requires scrolling. This view is an extension of Xamarin.Forms.ListView . Similar to Xamarin.Forms.ListView , but the Scroller is rendered to CircleSurface . You can move the list using Bezel interaction and Drag . To receive Rotary event , it must be registered as RotaryFocusObject , property of CirclePage . Normal list Group list 2 texts and 1 icon list Components Header : Text or view that is displayed at the beginning of a list. Cells : Data in a CircleListView is presented in cells. Each cell corresponds to a row of data. Footer : Text or view that is displayed at end of a list. WARNING: CircleListView , CircleDateTimeSelector , CircleScrollView , CircleStepper must be confined in the CirclePage container or Page with CircleSurfaceEffectBehavior . If you add these controls in any other way, it may cause an exception or cannot display the controls. Add CircleListView in CirclePage You can set CircleListView in the CirclePage.Content . For more information on how to add a CirclePage , see CirclePage guide . RotaryFocusObject property sets the currently focused control using the rotating interaction, and displays the focused control's circle object. If the value is not set properly, the control will not receive the Rotary Event . You can either set the Header and/or Footer to a simple text, or to a more complex layout. Using HeaderTemplate and FooterTemplate properties you can create more complex layouts for the header and footer that support data binding. The following example has cells, header, footer. And use the DataTemplate to format a data object for display. WARNING: The CircleListView 's backend which is EFL extension , has a limitation not being focused and not being tapped on the top and bottom of the screen in Wearable Circle devices. If each item of a list has too small or too high a height, the first or last item of a list cannot be focused and tapped. To avoid this inherent problem, you should specify a proper height value (120 recommended) by the ViewCell or ListView Header or Footer. For more information, see the following links: CircleListView API reference Xamarin.Forms.ListView API reference Xamarin.Forms.ListView Guide The code example of this guide uses TCCircleListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleListView.xaml The following code shows CirclePage with CircleListView: XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCCircleListView\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference mylist}\"> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\"> <w:CircleListView.ItemsSource> <x:Array x:Key=\"array\" Type=\"{x:Type sys:String}\"> <x:String>Item 1</x:String> <x:String>Item 2</x:String> <x:String>Item 3</x:String> <x:String>Item 4</x:String> <x:String>Item 5</x:String> <x:String>Item 6</x:String> <x:String>Item 7</x:String> <x:String>Item 8</x:String> <x:String>Item 9</x:String> <x:String>Item 10</x:String> <x:String>Item 11</x:String> <x:String>Item 12</x:String> </x:Array> </w:CircleListView.ItemsSource> <w:CircleListView.Header> <x:String>Header</x:String> </w:CircleListView.Header> <w:CircleListView.Footer> <x:String>Footer</x:String> </w:CircleListView.Footer> <w:CircleListView.ItemTemplate> <DataTemplate> <TextCell Text=\"{Binding .}\" /> </DataTemplate> </w:CircleListView.ItemTemplate> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label HeightRequest=\"120\" FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Red\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> <w:CircleListView.FooterTemplate> <DataTemplate> <Label HeightRequest=\"120\" FontAttributes=\"Bold\" FontSize=\"Large\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"Blue\" /> </DataTemplate> </w:CircleListView.FooterTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Add Group List as list contents You can add group list as contents of CircleListView . To enable grouping: Create a list of List<>. Set ItemsSource to that list. Set IsGroupingEnabled to true. Set GroupDisplayBinding to bind to the property of the groups that is being used as the title of the group. The code example of this guide uses TCGroupList code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCGroupList.xaml C# file namespace WearableUIGallery.TC { ... public class GroupModel : List<NamedList<string>> { public GroupModel() { Add(new NamedList<string>(\"group1\") { \"Aaliyah\", \"Aamir\", \"Aaralyn \", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\" }); Add(new NamedList<string>(\"group2\") { \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\" }); Add(new NamedList<string>(\"group3\") { \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\" }); Add(new NamedList<string>(\"group4\") { \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }); } } public class NamedList<T> : List<T> { public NamedList(string name) => Name = name; public string Name { get; set; } }} XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCGroupList\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <w:CirclePage.BindingContext> <local:GroupModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" GroupDisplayBinding=\"{Binding Name}\" IsGroupingEnabled=\"True\" ItemsSource=\"{Binding .}\"> <w:CircleListView.Header> <x:String>TITLE</x:String> </w:CircleListView.Header> <w:CircleListView.HeaderTemplate> <DataTemplate> <Label FontAttributes=\"Bold\" FontSize=\"10\" HeightRequest=\"120\" HorizontalTextAlignment=\"Center\" Text=\"{Binding .}\" TextColor=\"#6CC3F1\" /> </DataTemplate> </w:CircleListView.HeaderTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage> Add a list with 2 texts and 1 icon as list contents You can add a list with two texts and one icon as contents of CircleListView . This can easily be done using ViewCell . It is nested inside a DataTemplate , which is inside CircleListView.ItemTemplate . The Layout of ViewCell is managed by a StackLayout . You can place it in the StackLayout with your desired configuration. The code example of this guide uses XUIComponent's CircleList of Style2text1icon1 code. The code is available in sample\\XUIComponents\\UIComponents\\UIComponents\\Samples\\CircleList/ListViewModel.cs and Style2text1icon1.xaml C# file namespace WearableUIGallery.TC { public class ListViewModel : INotifyPropertyChanged { static List<string> _names = new List<string> { \"Aaliyah\", \"Aamir\", \"Aaralyn\", \"Aaron\", \"Abagail\", \"Babitha\", \"Bahuratna\", \"Bandana\", \"Bulbul\", \"Cade\", \"Caldwell\", \"Chandan\", \"Caster\", \"Dagan \", \"Daulat\", \"Dag\", \"Earl\", \"Ebenzer\", \"Ellison\", \"Elizabeth\", \"Filbert\", \"Fitzpatrick\", \"Florian\", \"Fulton\", \"Frazer\", \"Gabriel\", \"Gage\", \"Galen\", \"Garland\", \"Gauhar\", \"Hadden\", \"Hafiz\", \"Hakon\", \"Haleem\", \"Hank\", \"Hanuman\", \"Jabali \", \"Jaimini\", \"Jayadev\", \"Jake\", \"Jayatsena\", \"Jonathan\", \"Kamaal\", \"Jeirk\", \"Jasper\", \"Jack\", \"Mac\", \"Macy\", \"Marlon\", \"Milson\" }; ... public List<string> Names => _names; public ObservableCollection<CheckableName> CheckableNames { get; private set; } public int CheckedNamesCount { get => _checkedNamesCount; private set { if (_checkedNamesCount != value) { _checkedNamesCount = value; OnPropertyChanged(); UpdateSelectOptionMessage(); } } } public ListViewModel() { CheckableNames = new ObservableCollection<CheckableName>(); foreach (var name in _names) { var data = new CheckableName(name, false); data.PropertyChanged += (s, e) => { if (e.PropertyName == \"Checked\") { CheckedNamesCount += data.Checked ? 1 : -1; } }; CheckableNames.Add(data); } ... } } public class CheckableName : INotifyPropertyChanged { string _name; bool _checked; public CheckableName(string name, bool isChecked) { _name = name; _checked = isChecked; } public event PropertyChangedEventHandler PropertyChanged; public string Name { get => _name; set { if (_name != value) { _name = value; OnPropertyChanged(); } } } public bool Checked { get => _checked; set { if (_checked != value) { _checked = value; OnPropertyChanged(); } } } ... } XAML file <w:CirclePage x:Class=\"UIComponents.Samples.CircleList.Style2text1icon1\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:UIComponents.Samples.CircleList\" xmlns:sys=\"clr-namespace:System;assembly=netstandard\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" RotaryFocusObject=\"{x:Reference mylist}\"> <w:CirclePage.BindingContext> <local:ListViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" ItemsSource=\"{Binding Names}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" HorizontalOptions=\"FillAndExpand\" Orientation=\"Horizontal\" VerticalOptions=\"FillAndExpand\" WidthRequest=\"360\"> <StackLayout HorizontalOptions=\"CenterAndExpand\" Orientation=\"Vertical\" VerticalOptions=\"Center\"> <Label FontSize=\"8\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> <Label FontSize=\"5\" HorizontalOptions=\"Center\" HorizontalTextAlignment=\"Center\" Text=\"{Binding ., StringFormat='elm.text.1:{0}'}\" VerticalOptions=\"Center\" VerticalTextAlignment=\"Center\" /> </StackLayout> <w:Check DisplayStyle=\"Default\" HorizontalOptions=\"End\" VerticalOptions=\"Center\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate> </w:CircleListView> </w:CirclePage.Content> </w:CirclePage>"
  },
  "guide/CircleImage.html": {
    "href": "guide/CircleImage.html",
    "title": "CircleImage",
    "keywords": "CircleImage CircleImage is view that hold an image with circle shape. CircleImage derives from Xamarin.Forms.Image . Page ListView Item Create CircleImage You can easily add CircleImage control with C# or XAML file. Following example show the way how to use CircleImage control. C# file var circleImage = new CircleImage { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, Source = \"image.jpg\" }; StackLayout layout = new StackLayout { BackgroundColor = Color.Transparent, Children = { circleImage } }; XAML file Refer to TCCircleImage code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleImage.xaml <ContentPage x:Class=\"WearableUIGallery.TC.TCCircleImage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage.Content> <StackLayout HorizontalOptions=\"Center\" VerticalOptions=\"Center\"> <w:CircleImage Source=\"image/100_1.jpg\" Aspect=\"AspectFill\" WidthRequest=\"200\" HeightRequest=\"200\" BackgroundColor=\"Black\"/> </StackLayout> </ContentPage.Content> </ContentPage> Inserting CircleImage in ListView Item Following example show the way how to insert CircleImage control in CircleListView Item. Refer to TCCircleImageListView code at the test\\WearableUIGallery\\WearableUIGallery\\TC\\TCCircleImageListView.xaml <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout Orientation=\"Horizontal\" HorizontalOptions=\"FillAndExpand\" VerticalOptions=\"Center\" Padding=\"30,10,30,10\"> <w:CircleImage Source=\"{Binding .}\" Aspect=\"AspectFill\" VerticalOptions=\"Center\" HorizontalOptions=\"StartAndExpand\" WidthRequest=\"80\" HeightRequest=\"80\"/> <Label Text=\"{Binding .}\" VerticalOptions=\"Center\" HorizontalOptions=\"CenterAndExpand\" VerticalTextAlignment=\"Center\" HorizontalTextAlignment=\"Center\" HeightRequest=\"50\"/> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate>"
  },
  "guide/Radio.html": {
    "href": "guide/Radio.html",
    "title": "Radio",
    "keywords": "Radio Radio displays one or more options. You can select only one of the options having same GroupName property. Radio can select only one item among items having same GroupName property. Create Radio The GroupName property specifies mutually exclusive Radio controls. If you select one Radio control of radio control group, other items are not selected. IsSelected property sets default selected value of Radio control. Selected event occurs when the Radio selection is changed. Value property sets any value of Radio control. Value property is useful to distinguish which item is selected if all Radio control has the same Selected event handler. The following code explains the process of creating Radio . For more information, see Radio API reference . The code example of this guide uses TCRadioStackLayout code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioStackLayout.xaml.cs XAML file <w:CirclePage.Content> <w:CircleScrollView x:Name=\"myscroller\" Orientation=\"Vertical\"> <StackLayout Padding=\"50,50\" Orientation=\"Vertical\"> <Label x:Name=\"label1\" FontSize=\"Medium\" HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding RadioLabel1, StringFormat='SoundMode:{0}'}\"/> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Sound.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Sound.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Sound.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Sound.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Vibrate.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Vibrate.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Vibrate.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Vibrate.Value}\" /> </StackLayout> <StackLayout Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Mute.Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding Mute.GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding Mute.IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" Value=\"{Binding Mute.Value}\" /> </StackLayout> </StackLayout> </StackLayout> </w:CircleScrollView> </w:CirclePage.Content> C# file public void OnSelected(object sender, SelectedEventArgs args) { Radio radio = sender as Radio; if (radio != null) { Console.WriteLine($\"<<OnSelected>> Radio Value:{radio.Value}, GroupName:{radio.GroupName}, IsSelected:{radio.IsSelected}\"); } } Add Radio in ListViewItem If you want to use Radio control on ListView, you can add Radio control in ViewCell for customizing item. When you use Radio on ListView, you must set HasUnevenRows property True . If you don't set this property, Unwanted item's radio can be selected when you scroll up the ListView Since Xamarin.Forms reuse ListView Item rendering The code example of this guide uses TCRadioListView code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCRadioListView.xaml.cs XAML file <w:CirclePage.BindingContext> <local:TCRadioViewModel /> </w:CirclePage.BindingContext> <w:CirclePage.Content> <w:CircleListView x:Name=\"mylist\" HasUnevenRows=\"True\" ItemsSource=\"{Binding SampleData}\"> <w:CircleListView.ItemTemplate> <DataTemplate> <ViewCell> <StackLayout HeightRequest=\"120\" Orientation=\"Horizontal\"> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"{Binding Text}\" VerticalOptions=\"Center\" /> <w:Radio GroupName=\"{Binding GroupName}\" HorizontalOptions=\"End\" IsSelected=\"{Binding IsSelected, Mode=TwoWay}\" Selected=\"OnSelected\" VerticalOptions=\"Center\" Value=\"{Binding Value}\" /> </StackLayout> </ViewCell> </DataTemplate> </w:CircleListView.ItemTemplate>"
  },
  "guide/InformationPopup.html": {
    "href": "guide/InformationPopup.html",
    "title": "InformationPopup",
    "keywords": "InformationPopup InformationPopup can represent three types of Tizen Wearable EFL popup style shown in the following figures. This popup is used to display any information or warning. Since InformationPopup does not adhere as a control, this popup cannot be set in the XAML file. Single text Bottom button Progress Create single text InformationPopup Single text InformationPopup is used for displaying text. It is similar to the Toast popup, but this popup does not disappear automatically. Text property can be set with text. When you press the back button of the device, BackButtonPressed event occurs. To dismiss the popup that occurs during this event, add Dismiss() in the BackButtonPressed event handle code. For more information, see InformationPopup API reference . The code example of this guide uses TCInformationPopup code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCInformationPopup.xaml.cs C# file _textPopUp = new InformationPopup(); _textPopUp.Text = \"This is text popup test\"; _textPopUp.BackButtonPressed += (s, e) => { _textPopUp.Dismiss(); label1.Text = \"text popup is dismissed\"; }; Create bottom button InformationPopup You can set BottomButton property with MenuItem . The bottom button is used for confirmation dialog purpose, that asks user to approve requested operation. InformationPopup has Title property for displaying title. When you click the bottom button, BottomButton.Clicked event occurs. C# file var bottomButton = new MenuItem() { Text = \"OK\", Command = new Command(() => { /* must insert code when user press left button */ }) }; _textButtonPopUp = new InformationPopup(); _textButtonPopUp.Title = \"Popup title\"; _textButtonPopUp.Text = \"This is text and button popup test\"; _textButtonPopUp.BottomButton = bottomButton; _textButtonPopUp.BottomButton.Clicked += (s, e) => { _textButtonPopUp.Dismiss(); label1.Text = \"text&button is dismissed\"; }; Create progress InformationPopup InformationPopup has IsProgressRunning property. If this property sets true , small circle progress bar is displayed in the center of the screen. C# file _progressPopUp = new InformationPopup(); _progressPopUp.Title = \"Popup title\"; _progressPopUp.Text = \"This is progress test\"; _progressPopUp.IsProgressRunning = true;"
  },
  "guide/ContextPopupEffectBehavior.html": {
    "href": "guide/ContextPopupEffectBehavior.html",
    "title": "ContextPopupEffectBehavior",
    "keywords": "ContextPopupEffectBehavior ContextPopupEffectBehavior is a Behavior for Xamarin.Forms that is used to create the View with one or two buttons. A popup with only one button will have an Accept button only. The default text for Accept button is OK. When Visibility is set to True , the popup appears on the screen. The popup displayed with the Accept or Cancel button is executed automatically. Accept command is executed when click Accept button. After the command is executed, popup disappears and Visibility is set to False . If you touch outside of the popup, the popup is removed. It is same to execute Cancel command. You can adjust the X and Y value to change the position of popup. Add popup with ContextPopupEffectBehavior in CirclePage You can set popup with the ContextPopupEffectBehavior in any View . For more information on how to add CirclePage , see CirclePage guide . ContextPopupEffectBehavior has the following properties: AcceptCommand : System.Windows.Input.ICommand . This command is executed when Accept. CancelCommand : System.Windows.Input.ICommand . This command is executed when Cancel. It is also executed when the popup disappears on touching an area outside the popup. Visibility : This property when set to True , the popup appears and when set to False , the popup disappears. The CancelCommand works even when the popup disappears and the Visibility is set to False . PositionOption : The popup has the following position type BottomOfView : The popup appears at the bottom of the view with ContextPopupEffectBehavior . The position is changed by offset in the center of view. CenterOfParent : In the center of the screen, you can move the values of offset to adjust position of popup. Absolute : The value of offset is X, Y and popup is placed on the screen. Relative : Set the width of the screen to Offset.X * Window.Width and height of the screen to Offset.Y * Window.Height. In the example, you can see a Check with the ContextPopupEffectBehavior in the AbsoluteLayout set into the CirclePage . The text for the AcceptText and the CancelText are set. Also, the commands for AcceptCommand and CancelCommand are set. When selected, Yes will change the background color to green and No will change the background color to red. The PositionOption is set as CenterOfParent . The value of Visibility is set to IsToggled . BottomOfView CenterOfParent Absolute/Relative For more information, see the following links: ContextPopupEffectBehavior API reference Xamarin.Forms.Behaviors Guide Consuming a Xamarin.Forms Behavior To create a context popup in CirclePage, use the following code: C# file [XamlCompilation(XamlCompilationOptions.Compile) public partial class TCConfirm : CirclePage { public TCConfirm () { AcceptedCommand = new Command(() => BackgroundColor = Color.Green); CancelCommand = new Command(() => BackgroundColor = Color.Red); InitializeComponent (); CtxCheck.PropertyChanged += (s, e) => { if (e.PropertyName == Check.IsToggledProperty.PropertyName) System.Diagnostics.Debug.WriteLine($\"IsToggled = {CtxCheck.IsToggled}\"); }; } public ICommand AcceptedCommand { get; private set; } public ICommand CancelCommand { get; private set; } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCConfirm\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"mypage\"> <ContentPage.Content> <AbsoluteLayout> <w:Check x:Name=\"CtxCheck\" AbsoluteLayout.LayoutBounds=\"0.5, 0.2, 1, 0.25\" AbsoluteLayout.LayoutFlags=\"All\" HorizontalOptions=\"CenterAndExpand\" IsToggled=\"False\" VerticalOptions=\"CenterAndExpand\"> <w:Check.Behaviors> <w:ContextPopupEffectBehavior AcceptCommand=\"{Binding AcceptedCommand, Source={x:Reference mypage}}\" AcceptText=\"Yes\" CancelCommand=\"{Binding CancelCommand, Source={x:Reference mypage}}\" CancelText=\"No\" Visibility=\"{Binding IsToggled, Source={x:Reference CtxCheck}, Mode=TwoWay}\" PositionOption=\"BottomOfView\"/> </w:Check.Behaviors> </w:Check> </AbsoluteLayout> </ContentPage.Content> </w:CirclePage> Screenshot 1st scene with Check 2nd scene with context popup 3rd scene when selects 'Yes'"
  },
  "guide/Quickstart.html": {
    "href": "guide/Quickstart.html",
    "title": "Quickstart",
    "keywords": "Quickstart This guide explains how to create an application that represents Toast and CircleSlider . If you press the button, Toast pops up and it automatically disappears after timeout (in seconds). If you rotate the bezel of Tizen wearable device, CircleSlider bar is moves forward or backward direction. This document requires Visual Studio and the Visual Studio tools for Tizen . If you have not installed it, please install it first. 1. Set up development environment and create project Create a Tizen Xamarin Forms application. For more information, see Tizen.org guide . In this guide, project name is SampleCircleApp Tizen Wearable App Template 1) Create project Select 'Tizen Wearable App' template on 'New project'. You can use APIs of Xamarin.Forms and Tizen.Wearable.CircularUI now. Remark : If you want to choose 'Tizen XAML App template', for more information, see Guide of Tizen XAML App template . 2) Insert CircularUI control code In App.cs file, add the following code. This code defines the user interface for the page: CirclePage is derive from Xamarin.Forms.Page . This Page content area has Label and Button . For more information, see CirclePage guide . circlePage.CircleSurfaceItems.Add() : CircleSliderSurfaceItem is attached for CircleSurfaceItem of CirclePage . RotaryFocusObject is set circleSlider . CircleSliderSurfaceItem has rotary focus. It can receive a Rotary Event from the wearable device's bezel interaction. OnButtonClicked is an event handler of Button Clicked event. The following code simply displays Toast popup during three seconds: App.cs file using System; using Xamarin.Forms; using Tizen.Wearable.CircularUI.Forms; namespace SampleCircleApp { public class App : Application { public App() { Button btn = new Button { Text = \"show toast\" }; btn.Clicked += OnButtonClicked; CircleSliderSurfaceItem circleSlider = new CircleSliderSurfaceItem() { Increment = 0.5, IsVisible = true, Maximum = 15, Minimum = 0, Value = 3, }; // The root page of your application CirclePage circlePage = new CirclePage() { Content = new StackLayout { HorizontalOptions = LayoutOptions.Center, VerticalOptions = LayoutOptions.Center, Orientation = StackOrientation.Vertical, Children = { new Label { HorizontalTextAlignment = TextAlignment.Center, Text = \"Welcome to Xamarin Forms!\" }, btn } }, }; circlePage.CircleSurfaceItems.Add(circleSlider); circlePage.RotaryFocusObject = circleSlider; MainPage = circlePage; } private void OnButtonClicked(object sender, EventArgs e) { Toast.DisplayText(\"Toast popup\", 3000); } ... } } 2. Build and launch your application. Build the solution In the Visual Studio menu, select Build > Build Solution. In the Solution Explorer view, right-click the solution name and select Build. Launch Tizen Emulator Click Launch Tizen Emulator button, as displayed in the following image: For Windows OS, copy the application tpk file from the project binary path to sdb tool path. SampleCircleApp tpk: The file is located in ProjectPath\\SampleCircleApp\\SampleCircleApp\\bin\\Debug\\tizen40\\org.tizen.example.SampleCircleApp-1.0.0.tpk . Project path: To locate the project path, in the Solution Explorer view, right-click the solution name and click open folder in file explorer . sdb tool: This is located in c:\\tizen\\tools\\sdb.exe For Windows OS, launch Tizen Sdb Command Prompt (Tool > Tizen > Tizen Sdb Command Prompt). For Linux, you can use sdb command directly in your project path. Install your app with sdb command sdb install org.tizen.example.SampleCircleApp-1.0.0.tpk Launch wearable emulator to verify the application"
  },
  "guide/PopupEntry.html": {
    "href": "guide/PopupEntry.html",
    "title": "PopupEntry",
    "keywords": "PopupEntry PopupEntry is a control that allows you to enter text with the IME when you click on Entry . Overview PopupEntry control has exactly the same usage as the Entry . However, in the case of a regular Entry in a circular screen, the input text gets hidden behind the IME at the time of input. The PopupEntry allows the input to be on a pop up, hence the written text is visible. The following images shows a screen with a normal Entry and a screen with the text on the IME when you click on Entry . The Entry is not visible because it is masked by the IME. The above image is the same as using PopupEntry , It can type text while watching it properly. When PopupEntry is used: The BackgroundColor of the input pop up is the same as the BackgroundColor of the PopupEntry . The default color of the PopupEntry is set if you don't set the BackgroundColor . The TextColor inside the input pop up is also the same as the TextColor of the PopupEntry . The IsPassword property of the input pop up is also the same as the PopupEntry . WARNING: If you set the PopupEntry width under the specific size(e.g 280), the PopupEntry can be truncated follow to device native theme. How to use PopupEntry uses the same method as the Entry . <?xml version=\"1.0\" encoding=\"utf-8\" ?> <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Class=\"WearableUIGallery.TC.TCPopupEntry\"> <ContentPage.Content> <StackLayout Padding=\"20,40,20,40\"> <w:PopupEntry BackgroundColor=\"Gray\" HorizontalOptions=\"FillAndExpand\" TextColor=\"Blue\" VerticalOptions=\"CenterAndExpand\" /> <w:PopupEntry HorizontalOptions=\"FillAndExpand\" Placeholder=\"Foobar\" VerticalOptions=\"CenterAndExpand\" /> <w:PopupEntry HorizontalOptions=\"FillAndExpand\" IsPassword=\"True\" Placeholder=\"Password\" VerticalOptions=\"CenterAndExpand\" /> </StackLayout> </ContentPage.Content> </ContentPage>"
  },
  "guide/InstallingCertificateExtension.html": {
    "href": "guide/InstallingCertificateExtension.html",
    "title": "Installing Certificate Extension",
    "keywords": "Installing Certificate Extension Samsung Certificate Extension provides functionalities to get and register certificates for Samsung commercial devices. It is an add-on SDK, which is installed using the Tizen Studio Package Manager. Click Tools > Tizen > Tizen Package Manager in the menu bar to launch the Package Manager. In the Extension SDK tab you can find the list of available extensions. The version of the extension is described in the lower window."
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleImage.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleImage.html",
    "title": "Class CircleImage",
    "keywords": "Class CircleImage The CircleImage is view that hold an image with circle shape. The CircleImage is extension of Xamarin.Forms.Image. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View Xamarin.Forms.Image CircleImage Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IImageController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration < Xamarin.Forms.Image > Inherited Members Xamarin.Forms.Image.SourceProperty Xamarin.Forms.Image.AspectProperty Xamarin.Forms.Image.IsOpaqueProperty Xamarin.Forms.Image.IsLoadingProperty Xamarin.Forms.Image.OnBindingContextChanged() Xamarin.Forms.Image.On<T>() Xamarin.Forms.Image.Aspect Xamarin.Forms.Image.IsLoading Xamarin.Forms.Image.IsOpaque Xamarin.Forms.Image.Source Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleImage : Image, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IGestureController, IImageController, IViewController, IVisualElementController, IElementController, IElementConfiguration<Image>, IImageElement Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController Xamarin.Forms.IImageController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Xamarin.Forms.IElementConfiguration<TElement>"
  },
  "api/UIComponents.Tizen.Wearable.Renderers.html": {
    "href": "api/UIComponents.Tizen.Wearable.Renderers.html",
    "title": "Namespace UIComponents.Tizen.Wearable.Renderers",
    "keywords": "Namespace UIComponents.Tizen.Wearable.Renderers Classes CircleImageRenderer"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer Classes CheckRenderer CircleDateTimeSelectorRenderer CircleListView CircleListViewRenderer CirclePageRenderer CircleSliderSurfaceItemImplements CircleStepperRenderer CircleSurfaceNotFoundException FileMediaSourceHandler FormsCircularUI GoogleMapViewRenderer HeaderOrFooterItemClass IndexPageRenderer InformationPopupImplementation ListViewCache ListViewItemContext MediaPlayerImpl MultimediaConvertExtensions PaddingItemClass PopupEntryRenderer RadioRenderer TizenCircleSurfaceEffect TizenConfirmPopupEffect TwoButtonPageRenderer TwoButtonPageWidget TwoButtonPopupImplementation UriMediaSourceHandler Interfaces IMediaSourceHandler"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ICircleSurfaceItem.html",
    "title": "Interface ICircleSurfaceItem",
    "keywords": "Interface ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface ICircleSurfaceItem Properties IsVisible Gets or sets CircleSurfaceItem's visibility Declaration bool IsVisible { get; set; } Property Value Type Description System.Boolean"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.RadioRenderer.html",
    "title": "Class RadioRenderer",
    "keywords": "Class RadioRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Radio > Xamarin.Forms.Platform.Tizen.ViewRenderer < Radio , Radio > RadioRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.Radio>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.SetNativeControl(ElmSharp.Radio) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetElement(Tizen.Wearable.CircularUI.Forms.Radio) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class RadioRenderer : ViewRenderer<Radio, Radio>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors RadioRenderer() Declaration public RadioRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.Radio>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Radio>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Radio> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Radio > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.Radio, ElmSharp.Radio>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.Radio>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaSourceConverter.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaSourceConverter.html",
    "title": "Class MediaSourceConverter",
    "keywords": "Class MediaSourceConverter Class that takes a string representation of a media file location and returns a MeidaSource from the specified resource. Inheritance System.Object Xamarin.Forms.TypeConverter MediaSourceConverter Inherited Members Xamarin.Forms.TypeConverter.CanConvertFrom(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [TypeConverter(typeof(MediaSource))] public sealed class MediaSourceConverter : TypeConverter Methods ConvertFromInvariantString(String) Returns a media source created from a URI that is contained in value. Declaration public override object ConvertFromInvariantString(string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Object MediaSource Overrides Xamarin.Forms.TypeConverter.ConvertFromInvariantString(System.String)"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IVideoOutput.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IVideoOutput.html",
    "title": "Interface IVideoOutput",
    "keywords": "Interface IVideoOutput Interface indicating the ouput type of the media. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IVideoOutput Properties Controller Declaration View Controller { get; set; } Property Value Type Description Xamarin.Forms.View MediaView Declaration VisualElement MediaView { get; } Property Value Type Description Xamarin.Forms.VisualElement OuputType Declaration VideoOuputType OuputType { get; } Property Value Type Description VideoOuputType"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ContextPopupEffectBehavior.html",
    "title": "Class ContextPopupEffectBehavior",
    "keywords": "Class ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Behavior Xamarin.Forms.Behavior < Xamarin.Forms.View > ContextPopupEffectBehavior Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.Behavior<Xamarin.Forms.View>.OnAttachedTo(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior<Xamarin.Forms.View>.OnDetachingFrom(Xamarin.Forms.BindableObject) Xamarin.Forms.Behavior.AssociatedType Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ContextPopupEffectBehavior : Behavior<View>, INotifyPropertyChanged, IDynamicResourceHandler, IAttachedObject Fields AcceptCommandParameterProperty BindableProperty. Identifies the AcceptCommandParameter bindable property. Declaration public static readonly BindableProperty AcceptCommandParameterProperty Field Value Type Description Xamarin.Forms.BindableProperty AcceptCommandProperty BindableProperty. Identifies the AcceptCommand bindable property. AcceptCommand is executed when the Accept button is pressed. Declaration public static readonly BindableProperty AcceptCommandProperty Field Value Type Description Xamarin.Forms.BindableProperty AcceptTextProperty BindableProperty. Identifies the AcceptText bindable property. AcceptText is to use as Accept button Declaration public static readonly BindableProperty AcceptTextProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelCommandParameterProperty BindableProperty. Identifies the CancelCommandParameter bindable property. Declaration public static readonly BindableProperty CancelCommandParameterProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelCommandProperty BindableProperty. Identifies the CancelCommand bindable property. CancelCommand is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public static readonly BindableProperty CancelCommandProperty Field Value Type Description Xamarin.Forms.BindableProperty CancelTextProperty BindableProperty. Identifies the CancelText bindable property. CancelText is to use as Cancel button Declaration public static readonly BindableProperty CancelTextProperty Field Value Type Description Xamarin.Forms.BindableProperty OffsetProperty BindableProperty. Identifies the Offset bindable property. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public static readonly BindableProperty OffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty PositionOptionProperty BindableProperty. Identifies the PositionOption bindable property. Declaration public static readonly BindableProperty PositionOptionProperty Field Value Type Description Xamarin.Forms.BindableProperty VisibilityProperty BindableProperty. Identifies the ConfirmVisibility bindable property. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public static readonly BindableProperty VisibilityProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties AcceptCommand Gets or sets command that is executed when the Accept button is pressed. Declaration public ICommand AcceptCommand { get; set; } Property Value Type Description System.Windows.Input.ICommand AcceptCommandParameter Gets or sets command paramter that is executed when the Accept button is pressed. Declaration public object AcceptCommandParameter { get; set; } Property Value Type Description System.Object AcceptText Gets or sets text of Accept button Declaration public string AcceptText { get; set; } Property Value Type Description System.String CancelCommand Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public ICommand CancelCommand { get; set; } Property Value Type Description System.Windows.Input.ICommand CancelCommandParameter Gets or sets command that is executed when the Cancel button is pressed, even if the popup disappears by selecting outside the popup. Declaration public object CancelCommandParameter { get; set; } Property Value Type Description System.Object CancelText Gets or sets text of Cancel button Declaration public string CancelText { get; set; } Property Value Type Description System.String Offset Gets or sets offset. Offset is a value of how far to move from the base tap position represented by the PositionOption type. If it isn't set, it returns 0,0. Declaration public Point Offset { get; set; } Property Value Type Description Xamarin.Forms.Point PositionOption Gets or sets position type of popup Declaration public PositionOption PositionOption { get; set; } Property Value Type Description PositionOption Visibility Gets visibility of Confirmation popup. Popup appears if ConfirmVisibility is True, and disappears when it becomes False. CancelCommand works even if it disappears to False. Declaration public bool Visibility { get; set; } Property Value Type Description System.Boolean Methods OnAttachedTo(View) Declaration protected override void OnAttachedTo(View view) Parameters Type Name Description Xamarin.Forms.View view Overrides Xamarin.Forms.Behavior<Xamarin.Forms.View>.OnAttachedTo(Xamarin.Forms.View) OnDetachingFrom(View) Declaration protected override void OnDetachingFrom(View view) Parameters Type Name Description Xamarin.Forms.View view Overrides Xamarin.Forms.Behavior<Xamarin.Forms.View>.OnDetachingFrom(Xamarin.Forms.View) Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CirclePageNotFoundException.html",
    "title": "Class CirclePageNotFoundException",
    "keywords": "Class CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. Inheritance System.Object System.Exception CirclePageNotFoundException Implements System.Runtime.Serialization.ISerializable Inherited Members System.Exception.GetBaseException() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.ToString() System.Exception.Data System.Exception.HelpLink System.Exception.HResult System.Exception.InnerException System.Exception.Message System.Exception.Source System.Exception.StackTrace System.Exception.TargetSite System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CirclePageNotFoundException : Exception, ISerializable Constructors CirclePageNotFoundException() Creates and initializes a new instance of the CirclePageNotFoundException class. Declaration public CirclePageNotFoundException() Implements System.Runtime.Serialization.ISerializable"
  },
  "api/UIComponents.Tizen.Wearable.Renderers.CircleImageRenderer.html": {
    "href": "api/UIComponents.Tizen.Wearable.Renderers.CircleImageRenderer.html",
    "title": "Class CircleImageRenderer",
    "keywords": "Class CircleImageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleImage > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleImage , Xamarin.Forms.Platform.Tizen.Native.Image > CircleImageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleImage>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image>.SetNativeControl(Xamarin.Forms.Platform.Tizen.Native.Image) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleImage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Dispose(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : UIComponents.Tizen.Wearable.Renderers Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleImageRenderer : ViewRenderer<CircleImage, Image>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Methods OnElementChanged(ElementChangedEventArgs<CircleImage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleImage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleImage > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage, Xamarin.Forms.Platform.Tizen.Native.Image>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleImage>) OnElementPropertyChanged(Object, PropertyChangedEventArgs) Declaration protected override void OnElementPropertyChanged(object sender, PropertyChangedEventArgs e) Parameters Type Name Description System.Object sender System.ComponentModel.PropertyChangedEventArgs e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleImage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) UpdateAfterLoading() Declaration protected virtual void UpdateAfterLoading() Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.Watchface.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Classes FormsWatchface"
  },
  "guide/IRotaryEventReceiver.html": {
    "href": "guide/IRotaryEventReceiver.html",
    "title": "IRotaryEventReceiver",
    "keywords": "IRotaryEventReceiver IRotaryEventReceiver is a receiver interface to receive Rotary event . When a rotary event occur, IRotaryEventReceiver calls Rotate(RotaryEventArgs) method. You can control the Rotary event using this interface. If you read the following paragraphs, you can easily rotate image according to bezel rotation. WARNING: If device or emulator is not supported bezel action. IRotaryEventReceiver is not supported. Add IRotaryEventReceiver Add IRotaryEventReceiver interface to CirclePage or Page having CircleSurfaceEffectBehavior . Implement Rotate() method to control a rotary event. RotaryEventArgs is event argument for the Rotary Event. RotaryEventArgs.IsClockwise gets the direction of bezel rotation. IsClockwise is true , when the device is rotated in the clockwise direction. The following sample receives rotary event at Rotate() method and add angle of the image following to rotary event direction. And then rotate the image. Set the event receiver to a RotaryFocusObject. Apply the implementation of IRotaryEventReceiver to the RotaryFocusObject in CirclePage. IRotaryEventReceiver implements IRotaryFocusable, only IRotaryFocusable applied to a RotaryFocusObject can receive Bezel events. For more information, see IRotaryEventReceiver API reference . The code example of this guide uses TCIRotaryEventReceiver code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIRotaryEventReceiver.xaml C# file [XamlCompilation(XamlCompilationOptions.Compile)] public partial class TCIRotaryEventReceiver : CirclePage, IRotaryEventReceiver { bool _rotating; double _angle; public TCIRotaryEventReceiver () { InitializeComponent (); _angle = 0; } public void Rotate(RotaryEventArgs args) { if (_rotating) return; _rotating = true; _angle += args.IsClockwise ? 30 : -30; Cat.RotateTo(_angle).ContinueWith( (b) => { _rotating = false; if (_angle == 360) { Cat.Rotation = 0; _angle = 0; } }); } } XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:CirclePage x:Class=\"WearableUIGallery.TC.TCIRotaryEventReceiver\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery.TC\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\" x:Name=\"MyCirclePage\" RotaryFocusObject=\"{x:Reference MyCirclePage}\"> <w:CirclePage.Content> <Image x:Name=\"Cat\" Source=\"image/cat360.png\" /> </w:CirclePage.Content> </w:CirclePage>"
  },
  "index.html": {
    "href": "index.html",
    "title": "Tizen CircularUI",
    "keywords": "Tizen CircularUI The Tizen CircularUI is a set of helpful extensions to the Xamarin Forms framework on the Samsung Gear device. The binaries are available via NuGet (package name CircularUI) with the source available here. Controls Name Description Check A subclass of Xamarin.Forms.Switch control with some different styles. CircleDateTimeSelector A control to select date or time fits in the circular screen. CircleListView A subclass of Xamarin.Forms.ListView control fits in the circular screen. CirclePage A subclass of Xamarin.Forms.Page that can show Circular ProgressBar and Circular Slider and the button on the bottom of the screen. it can also show MenuItems on the circular menu.(MoreOption) CircleProgressBarSurfaceItem A control fits in the circular screen. it can be shown in CirclePage only. CircleSliderSurfaceItem A Slider control that responds to the bezel action and fits in the circular screen. CircleScrollView A subclass of Xamarin.Forms.ScrollView that can be scrolled by the bezel action. CircleStackLayout A container to layout children linear in the circular area. CircleStepper A control to select a number of steps fits in the circular screen. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is an behavior which allows you to insert views that require CircleSurface. TwoButtonPopup A popup has two button in left and right side of the circular screen. ContextPopupEffectBehavior The behavior to show a small popup has one or two buttons sticky with any control. IndexPage A subclass of multiple Pages that can slide child page horizontal and has dots on top of the screen for the number of child pages. InformationPopup A popup has a control to show progress and one button in the bottom side of the circular screen. IRotaryEventReceiver A event receiver for using the bezel action. Radio A radio control fits in the circular screen. PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Toast A popup for simple feedback. TwoButtonPage A subclass of Xamarin.Forms.Page has two buttons on the left and right side of the circular screen. MediaView The MediaView class is used to display the video output on the screen. GoogleMapView The GoogleMapView class is used to display the google javascript API map on the screen."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen Wearable CircularUI",
    "keywords": "Tizen Wearable CircularUI This document is the API Specification for the Tizen Wearable CircularUI. Namespace Description Tizen.Wearable.CircularUI.Forms Provide the classes for the Circular screen with Tizen wearable devices. Tizen.Wearable.CircularUI.Forms.Renderer Contains the renderer classes on tizen platform for Tizen.Wearable.CircularUI.Forms. Tizen.Wearable.CircularUI.Forms.Renderer.Watchface Provide the classes for creating the Watchface on Tizen wearable devices."
  },
  "api/Tizen.Wearable.CircularUI.Forms.ZoomControlPosition.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ZoomControlPosition.html",
    "title": "Enum ZoomControlPosition",
    "keywords": "Enum ZoomControlPosition Enumeration for the Zoom control position of the GoogleMapView. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum ZoomControlPosition Fields Name Description BottomCenter The control should be placed along the bottom center of the map LeftBottom The control should be placed along the bottom left of the map LeftCenter The control should be placed along the left center of the map. LeftTop The control should be placed along the top left of the map. RightBottom The control should be placed along the bottom right of the map RightCenter The control should be placed along the right center of the map. RightTop The control should be placed along the top right of the map. TopCenter The control should be placed along the top center of the map"
  },
  "api/Tizen.Wearable.CircularUI.Forms.LayoutCanvas.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.LayoutCanvas.html",
    "title": "Class LayoutCanvas",
    "keywords": "Class LayoutCanvas Inheritance System.Object EvasObject AccessibleObject Widget Container Layout LayoutCanvas Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable < EvasObject > Inherited Members Layout.Freeze() Layout.Thaw() Layout.Resizing() Layout.Resizing(Boolean, Boolean) Layout.GetEdjeData(String) Layout.GetPartText(String) Layout.SetPartText(String, String) Layout.BoxAppend(String, EvasObject) Layout.BoxPrepend(String, EvasObject) Layout.BoxRemove(String, EvasObject) Layout.BoxRemoveAll(String, Boolean) Layout.BoxInsertAt(String, EvasObject, UInt32) Layout.BoxInsertBefore(String, EvasObject, EvasObject) Layout.SetPartContent(String, EvasObject) Layout.SetPartContent(String, EvasObject, Boolean) Layout.SetTheme(String, String, String) Layout.SetFile(String, String) Layout.SetVerticalTextAlignment(String, Double) Layout.GetVerticalTextAlignment(String) Layout.OnRealized() Layout.CreateHandle(EvasObject) Layout.EdjeObject Layout.TextBlockAccessibility Layout.BackgroundColor Layout.LanguageChanged Layout.ThemeChanged Container.AddChild(EvasObject) Container.RemoveChild(EvasObject) Container.ClearChildren() Widget.UpdatePartContents(EvasObject, String) Widget.SetFocus(Boolean) Widget.AllowFocus(Boolean) Widget.FocusNext(FocusDirection) Widget.SetNextFocusObject(EvasObject, FocusDirection) Widget.SetContent(EvasObject) Widget.SetContent(EvasObject, Boolean) Widget.SetPartColor(String, Color) Widget.GetPartColor(String) Widget.SetPartOpacity(String, Int32) Widget.GetPartOpacity(String) Widget.SignalEmit(String, String) Widget.IsEnabled Widget.Style Widget.IsFocused Widget.IsFocusAllowed Widget.Text Widget.Opacity Widget.AllowTreeFocus Widget.IsMirroredMode Widget.IsAutoMirroredMode Widget.Focused Widget.Unfocused AccessibleObject.IAccessibleObject.AppendRelation(IAccessibleRelation) AccessibleObject.IAccessibleObject.RemoveRelation(IAccessibleRelation) AccessibleObject.Highlight() AccessibleObject.Unhighlight() AccessibleObject.IAccessibleObject.ReadingInfoType AccessibleObject.IAccessibleObject.Role AccessibleObject.IAccessibleObject.CanHighlight AccessibleObject.IAccessibleObject.TranslationDomain AccessibleObject.IAccessibleObject.Name AccessibleObject.IAccessibleObject.Description AccessibleObject.IAccessibleObject.NameProvider AccessibleObject.IAccessibleObject.DescriptionProvider EvasObject.SetClip(EvasObject) EvasObject.SetAlignment(Double, Double) EvasObject.SetWeight(Double, Double) EvasObject.SetTooltipText(String) EvasObject.UnsetTooltip() EvasObject.PushTooltipMoveFreeze() EvasObject.PopTooltipMoveFreeze() EvasObject.HideTooltip() EvasObject.ShowTooltip() EvasObject.Show() EvasObject.Hide() EvasObject.Resize(Int32, Int32) EvasObject.Move(Int32, Int32) EvasObject.Lower() EvasObject.KeyGrab(String, Boolean) EvasObject.KeyUngrab(String) EvasObject.MarkChanged() EvasObject.Calculate() EvasObject.SetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.GetSizeHintAspect(AspectControl, Int32, Int32) EvasObject.StackBelow(EvasObject) EvasObject.StackAbove(EvasObject) EvasObject.RaiseTop() EvasObject.GetTextBlockGeometryByLineNumber(Int32, Int32, Int32, Int32, Int32) EvasObject.OnInvalidate() EvasObject.OnInstantiated() EvasObject.Realize(EvasObject) EvasObject.Unrealize() EvasObject.Handle EvasObject.Parent EvasObject.RealHandle EvasObject.IsRealized EvasObject.EvasCanvas EvasObject.ClassName EvasObject.WeightX EvasObject.WeightY EvasObject.AlignmentX EvasObject.AlignmentY EvasObject.MinimumWidth EvasObject.MinimumHeight EvasObject.IsVisible EvasObject.Geometry EvasObject.Color EvasObject.IsMapEnabled EvasObject.EvasMap EvasObject.RepeatEvents EvasObject.PropagateEvents EvasObject.PassEvents EvasObject.TooltipStyle EvasObject.TooltipOrientation EvasObject.TooltipWindowMode EvasObject.TooltipContentDelegate EvasObject.TooltipMoveFreezeCount EvasObject.AllEventsFrozen EvasObject.Layer EvasObject.Deleted EvasObject.KeyUp EvasObject.KeyDown EvasObject.BackButtonPressed EvasObject.MoreButtonPressed EvasObject.Moved EvasObject.Resized EvasObject.RenderPost System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class LayoutCanvas : Layout, IAccessibleObject, IContainable<EvasObject> Constructors LayoutCanvas(EvasObject) Initializes a new instance of the Xamarin.Forms.Platform.Tizen.Native.Canvas class. Declaration public LayoutCanvas(EvasObject parent) Parameters Type Name Description EvasObject parent Parent of this instance. Remarks Canvas doesn't support replacing its children, this will be ignored. Properties Children Gets list of native elements that are placed in the canvas. Declaration public IList<EvasObject> Children { get; } Property Value Type Description System.Collections.Generic.IList < EvasObject > Methods OnUnrealize() Provides destruction for native element and contained elements. Declaration protected override void OnUnrealize() Overrides EvasObject.OnUnrealize() Events LayoutUpdated Declaration public event EventHandler<LayoutEventArgs> LayoutUpdated Event Type Type Description System.EventHandler < Xamarin.Forms.Platform.Tizen.Native.LayoutEventArgs > Implements IAccessibleObject Xamarin.Forms.Platform.Tizen.Native.IContainable<T>"
  },
  "api/Tizen.Wearable.CircularUI.Forms.IGoogleMapViewController.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.IGoogleMapViewController.html",
    "title": "Interface IGoogleMapViewController",
    "keywords": "Interface IGoogleMapViewController For internal use by renderers. Inherited Members Xamarin.Forms.IVisualElementController.NativeSizeChanged() Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.IVisualElementController.Batched Xamarin.Forms.IVisualElementController.DisableLayout Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.IVisualElementController.IsInNativeLayout Xamarin.Forms.IVisualElementController.IsNativeStateConsistent Xamarin.Forms.IVisualElementController.IsPlatformEnabled Xamarin.Forms.IVisualElementController.NavigationProxy Xamarin.Forms.IVisualElementController.BatchCommitted Xamarin.Forms.IVisualElementController.FocusChangeRequested Xamarin.Forms.IElementController.EffectIsAttached(System.String) Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.IElementController.Descendants() Xamarin.Forms.IElementController.EffectControlProvider Xamarin.Forms.IElementController.LogicalChildren Xamarin.Forms.IElementController.RealParent Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public interface IGoogleMapViewController : IViewController, IVisualElementController, IElementController Events LoadMapRequested Internal Event for GoogleMapView renderer Declaration event EventHandler LoadMapRequested Event Type Type Description System.EventHandler"
  },
  "guide/Overview.html": {
    "href": "guide/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen Circular UI guides."
  },
  "guide/IndexPage.html": {
    "href": "guide/IndexPage.html",
    "title": "IndexPage",
    "keywords": "IndexPage The IndexPage allows you to know in advance the number of pages you have when you configure the application on multiple pages. It also shows the number of pages you are viewing. It is an extension of Xamarin.Forms.MultiPage . When the Page is added and removed in the Xamarin.Forms.MultiPage , the number of dot marks increases or decreases automatically at the top of window. It is similar to the CarouselPage in the Xamarin.Forms, with the addition of Index . When the Page is scrolled, the Index operates internally. Add IndexPage You can add pages and this will increase the number of dot mark by index accordingly. The maximum number of dot mark is 20 follow as the Samsung device UI limitation. In the illustrated example, three pages are added. The number of dot mark is three. Since, it is on the first page, only the first dot mark is shown as white, and the remaining dot marks are shown as grey. Since the maximun number of dot mark is limited by the samsung device UI guide, you will run into unwanted issue if you add pages more than the maximum number For more information, see the following links: IndexPage API reference Xamarin.Forms.MultiPage API reference The code example of this guide uses TCIndexPage code of WearableUIGallery. The code is available in test\\WearableUIGallery\\WearableUIGallery\\TC\\TCIndexPage.xaml XAML file <?xml version=\"1.0\" encoding=\"utf-8\" ?> <w:IndexPage x:Class=\"WearableUIGallery.TC.TCIndexPage\" xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:local=\"clr-namespace:WearableUIGallery\" xmlns:w=\"clr-namespace:Tizen.Wearable.CircularUI.Forms;assembly=Tizen.Wearable.CircularUI.Forms\"> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Red\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Red\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Green\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Green\" /> </StackLayout> </ContentPage> <ContentPage> <StackLayout> <BoxView VerticalOptions=\"FillAndExpand\" Color=\"Blue\" /> <Label HorizontalOptions=\"CenterAndExpand\" Text=\"Blue\" /> </StackLayout> </ContentPage> </w:IndexPage>"
  },
  "guide/GettingTheCertificates.html": {
    "href": "guide/GettingTheCertificates.html",
    "title": "Getting the Certificates",
    "keywords": "Getting the Certificates In order to install a Tizen application onto Samsung Tizen wearable devices, you must first register certificates containing the DUID (Device Unique Identifier) of the device. Two types of certificates are needed; the author and the distributor certificate. These certificates are used for signing and verifying the application. These certificates ensure that your signed application will run only on devices which you registered. The certification process is necessary not only for testing your apps on the actual devices but also for uploading your apps to Galaxy Apps. It guarantees that your application will not be distributed by someone else even if your application package is leaked. This document describes how to generate certificates from Samsung and how to maintain them also packaging the application. Contents: Installing Certificates Extension Creating Certificates Permit Device To Install Applications Managing Certificate Profile Certificates Tizen certificate follows the exact specifications of XML Digital signature for widgets from W3C. Samsung issues certificates for Samsung Tizen devices based on the Tizen certificate. The author certificate identifies the author, ensures future updates to the application and is used for secure IPC. The same key must be used in all versions of your application so it should be kept in a safe and secure place. The distributor certificate identifies distributor, i.e. Galaxy Apps, Tizen Store, and grants privilege. However the issued distributor certificate is not from the real distributor but just allows the installation to the registered device. After the application is uploaded to the Stores, it is replaced by the official distributor certificate. Secure Your Certificates Keep your author certificate(author.p12) file in a safe and secure place. Ensure that you have secure backups. When you upload your applications at the Store without the original author certificate (which signs your app), you will not be able to publish any updates on to your applications. The same key must be used in all versions of your applications."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleDateTimeSelectorRenderer.html",
    "title": "Class CircleDateTimeSelectorRenderer",
    "keywords": "Class CircleDateTimeSelectorRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleDateTimeSelector > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleDateTimeSelector , CircleDateTimeSelector > CircleDateTimeSelectorRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.SetNativeControl(ElmSharp.Wearable.CircleDateTimeSelector) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Dispose(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleDateTimeSelectorRenderer : ViewRenderer<CircleDateTimeSelector, CircleDateTimeSelector>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleDateTimeSelectorRenderer() Declaration public CircleDateTimeSelectorRenderer() Methods Measure(Int32, Int32) Declaration protected override Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.Measure(System.Int32, System.Int32) MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Xamarin.Forms.Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>.MinimumSize() OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleDateTimeSelector> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleDateTimeSelector > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector, ElmSharp.Wearable.CircleDateTimeSelector>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleDateTimeSelector>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IMediaSourceHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IMediaSourceHandler.html",
    "title": "Interface IMediaSourceHandler",
    "keywords": "Interface IMediaSourceHandler Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public interface IMediaSourceHandler : IRegisterable Methods SetSource(Player, MediaSource) Declaration Task<bool> SetSource(Player player, MediaSource imageSource) Parameters Type Name Description Player player MediaSource imageSource Returns Type Description System.Threading.Tasks.Task < System.Boolean >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CirclePageRenderer.html",
    "title": "Class CirclePageRenderer",
    "keywords": "Class CirclePageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CirclePage > CirclePageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetElement(Tizen.Wearable.CircularUI.Forms.CirclePage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CirclePageRenderer : VisualElementRenderer<CirclePage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CirclePageRenderer() Declaration public CirclePageRenderer() Properties CircleSurface Declaration public CircleSurface CircleSurface { get; } Property Value Type Description CircleSurface Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<CirclePage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CirclePage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CirclePage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CirclePage>) UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CirclePage>.UpdateBackgroundColor(System.Boolean) UpdateBackgroundImage(Boolean) Declaration protected void UpdateBackgroundImage(bool initialize) Parameters Type Name Description System.Boolean initialize Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleStepperRenderer.html",
    "title": "Class CircleStepperRenderer",
    "keywords": "Class CircleStepperRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleStepper > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleStepper , CircleSpinner > CircleStepperRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleStepper>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.SetNativeControl(ElmSharp.Wearable.CircleSpinner) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleStepper) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleStepperRenderer : ViewRenderer<CircleStepper, CircleSpinner>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleStepperRenderer() Declaration public CircleStepperRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Dispose(System.Boolean) Measure(Int32, Int32) Declaration protected override Size Measure(int availableWidth, int availableHeight) Parameters Type Name Description System.Int32 availableWidth System.Int32 availableHeight Returns Type Description Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.Measure(System.Int32, System.Int32) MinimumSize() Declaration protected override Size MinimumSize() Returns Type Description Xamarin.Forms.Size Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper>.MinimumSize() OnElementChanged(ElementChangedEventArgs<CircleStepper>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleStepper> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleStepper > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleStepper, ElmSharp.Wearable.CircleSpinner>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleStepper>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PositionOption.html",
    "title": "Enum PositionOption",
    "keywords": "Enum PositionOption Enumeration for position type of popup Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PositionOption Fields Name Description Absolute The value of Offset is X, Y and popup is placed on the screen. BottomOfView The popup appears at the bottom of the View using the Effect. The position is changed by Offset in the center of View. CenterOfParent In the center of the screen, move by the Offset in the Popup. Relative Set Offset.X * Window.Width, Offset.Y * Window.Height."
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewItemContext.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.ListViewItemContext.html",
    "title": "Class ListViewItemContext",
    "keywords": "Class ListViewItemContext Inheritance System.Object Xamarin.Forms.Platform.Tizen.Native.ListView.ItemContext ListViewItemContext Inherited Members Xamarin.Forms.Platform.Tizen.Native.ListView.ItemContext.Item Xamarin.Forms.Platform.Tizen.Native.ListView.ItemContext.Cell Xamarin.Forms.Platform.Tizen.Native.ListView.ItemContext.IsGroupItem Xamarin.Forms.Platform.Tizen.Native.ListView.ItemContext.Renderer System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class ListViewItemContext : ListView.ItemContext Constructors ListViewItemContext(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public ListViewItemContext(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group ListViewItemContext(Cell, TemplatedItemsList<ItemsView<Cell>, Cell>, Boolean) Declaration public ListViewItemContext(Cell cell, TemplatedItemsList<ItemsView<Cell>, Cell> group, bool isGroup) Parameters Type Name Description Xamarin.Forms.Cell cell Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group System.Boolean isGroup ListViewItemContext(TemplatedItemsList<ItemsView<Cell>, Cell>) Declaration public ListViewItemContext(TemplatedItemsList<ItemsView<Cell>, Cell> group) Parameters Type Name Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell > group Properties Group Declaration public TemplatedItemsList<ItemsView<Cell>, Cell> Group { get; set; } Property Value Type Description Xamarin.Forms.Internals.TemplatedItemsList < Xamarin.Forms.ItemsView < Xamarin.Forms.Cell >, Xamarin.Forms.Cell >"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.IndexPageRenderer.html",
    "title": "Class IndexPageRenderer",
    "keywords": "Class IndexPageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < IndexPage > IndexPageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetElement(Tizen.Wearable.CircularUI.Forms.IndexPage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class IndexPageRenderer : VisualElementRenderer<IndexPage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<IndexPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<IndexPage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < IndexPage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.IndexPage>) OnElementReady() Declaration protected override void OnElementReady() Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.IndexPage>.OnElementReady() Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.FileMediaSourceHandler.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.FileMediaSourceHandler.html",
    "title": "Class FileMediaSourceHandler",
    "keywords": "Class FileMediaSourceHandler Inheritance System.Object FileMediaSourceHandler Implements IMediaSourceHandler Xamarin.Forms.IRegisterable Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public sealed class FileMediaSourceHandler : IMediaSourceHandler, IRegisterable Methods SetSource(Player, MediaSource) Declaration public Task<bool> SetSource(Player player, MediaSource source) Parameters Type Name Description Player player MediaSource source Returns Type Description System.Threading.Tasks.Task < System.Boolean > Implements IMediaSourceHandler Xamarin.Forms.IRegisterable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CheckRenderer.html",
    "title": "Class CheckRenderer",
    "keywords": "Class CheckRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < Xamarin.Forms.Switch > Xamarin.Forms.Platform.Tizen.ViewRenderer < Xamarin.Forms.Switch , Check > Xamarin.Forms.Platform.Tizen.SwitchRenderer CheckRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.SwitchRenderer.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Switch>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.SetNativeControl(ElmSharp.Check) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Xamarin.Forms.Switch, ElmSharp.Check>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetElement(Xamarin.Forms.Switch) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Xamarin.Forms.Switch>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CheckRenderer : SwitchRenderer, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CheckRenderer() Declaration public CheckRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.SwitchRenderer.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<Switch>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<Switch> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < Xamarin.Forms.Switch > e Overrides Xamarin.Forms.Platform.Tizen.SwitchRenderer.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Xamarin.Forms.Switch>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.MediaPlayer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.MediaPlayer.html",
    "title": "Class MediaPlayer",
    "keywords": "Class MediaPlayer MediaPlayer provieds the essential components to play the media contents. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element MediaPlayer Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class MediaPlayer : Element, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable Constructors MediaPlayer() Initializes a new instance of the MediaPlayer class. Declaration public MediaPlayer() Fields AspectModeProperty Identifies the AspectMode bindable property. Declaration public static readonly BindableProperty AspectModeProperty Field Value Type Description Xamarin.Forms.BindableProperty AutoPlayProperty Identifies the AutoPlay bindable property. Declaration public static readonly BindableProperty AutoPlayProperty Field Value Type Description Xamarin.Forms.BindableProperty AutoStopProperty Identifies the AutoStop bindable property. Declaration public static readonly BindableProperty AutoStopProperty Field Value Type Description Xamarin.Forms.BindableProperty BufferingProgressProperty Identifies the BufferingProgress bindable property. Declaration public static readonly BindableProperty BufferingProgressProperty Field Value Type Description Xamarin.Forms.BindableProperty DurationProperty Identifies the Duration bindable property. Declaration public static readonly BindableProperty DurationProperty Field Value Type Description Xamarin.Forms.BindableProperty IsBufferingProperty Identifies the IsBuffering bindable property. Declaration public static readonly BindableProperty IsBufferingProperty Field Value Type Description Xamarin.Forms.BindableProperty IsMutedProperty Identifies the IsMuted bindable property. Declaration public static readonly BindableProperty IsMutedProperty Field Value Type Description Xamarin.Forms.BindableProperty PositionProperty Identifies the Position bindable property. Declaration public static readonly BindableProperty PositionProperty Field Value Type Description Xamarin.Forms.BindableProperty PositionUpdateIntervalProperty Identifies the PositionUpdateInterval bindable property. Declaration public static readonly BindableProperty PositionUpdateIntervalProperty Field Value Type Description Xamarin.Forms.BindableProperty SourceProperty Identifies the Source bindable property. Declaration public static readonly BindableProperty SourceProperty Field Value Type Description Xamarin.Forms.BindableProperty StateProperty Identifies the State bindable property. Declaration public static readonly BindableProperty StateProperty Field Value Type Description Xamarin.Forms.BindableProperty UsesEmbeddingControlsProperty Identifies the UsesEmbeddingControls bindable property. Declaration public static readonly BindableProperty UsesEmbeddingControlsProperty Field Value Type Description Xamarin.Forms.BindableProperty VideoOutputProperty Identifies the VideoOutput bindable property. Declaration public static readonly BindableProperty VideoOutputProperty Field Value Type Description Xamarin.Forms.BindableProperty VolumeProperty Identifies the Volume bindable property. Declaration public static readonly BindableProperty VolumeProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties AspectMode Gets or sets the scaling mode for the media content. Declaration public DisplayAspectMode AspectMode { get; set; } Property Value Type Description DisplayAspectMode AutoPlay Gets or sets a value whether the media content plays automatically. Declaration public bool AutoPlay { get; set; } Property Value Type Description System.Boolean AutoStop Gets or sets a value whether the media content stops automatically. Declaration public bool AutoStop { get; set; } Property Value Type Description System.Boolean BufferingProgress Gets the value indicating the buffering percentage. Declaration public double BufferingProgress { get; } Property Value Type Description System.Double Duration Gets the duration of a media content. Declaration public int Duration { get; } Property Value Type Description System.Int32 IsBuffering Gets a value indicating the buffering status. Declaration public bool IsBuffering { get; } Property Value Type Description System.Boolean IsMuted Gets or sets the value whether the volume is muted. Declaration public bool IsMuted { get; set; } Property Value Type Description System.Boolean Position Gets the value of the current position of the media content. Declaration public int Position { get; } Property Value Type Description System.Int32 PositionUpdateInterval Gets or sets the desired interval time for updating position. Declaration public int PositionUpdateInterval { get; set; } Property Value Type Description System.Int32 Source Gets or sets the source of the media content. Declaration [TypeConverter(typeof(MediaSourceConverter))] public MediaSource Source { get; set; } Property Value Type Description MediaSource State Gets the current playback state. Declaration public PlaybackState State { get; } Property Value Type Description PlaybackState UsesEmbeddingControls Gets or sets whether to use the embedding controls. Declaration public bool UsesEmbeddingControls { get; set; } Property Value Type Description System.Boolean VideoOutput Gets or sets the video output. Declaration public IVideoOutput VideoOutput { get; set; } Property Value Type Description IVideoOutput Volume Gets or sets the current volume of a media content. Declaration public double Volume { get; set; } Property Value Type Description System.Double Methods GetAlbumArts() Retrieves the album art of the stream, or null if there is no album art data. Declaration public Task<Stream> GetAlbumArts() Returns Type Description System.Threading.Tasks.Task < System.IO.Stream > Returns a Task that gets the album art of the stream GetMetadata() Gets the metadata of the media content. Declaration public Task<IDictionary<string, string>> GetMetadata() Returns Type Description System.Threading.Tasks.Task < System.Collections.Generic.IDictionary < System.String , System.String >> Returns a Task that has the metadata of the media content. Pause() Pauses the player. Declaration public void Pause() Seek(Int32) Attemps to seek the playback position. Declaration public Task<int> Seek(int ms) Parameters Type Name Description System.Int32 ms The milliseconds to seek Returns Type Description System.Threading.Tasks.Task < System.Int32 > Returns a Task that seeks the play position. Start() Starts or resumes playback. Declaration public Task<bool> Start() Returns Type Description System.Threading.Tasks.Task < System.Boolean > Returns a Task that prepares the player and play the media content. Stop() Stops playing the media content. Declaration public void Stop() Events BufferingCompleted Occurs when the buffering for the media content is completed. Declaration public event EventHandler BufferingCompleted Event Type Type Description System.EventHandler BufferingStarted Occurs when the buffering for the media content is started. Declaration public event EventHandler BufferingStarted Event Type Type Description System.EventHandler PlaybackCompleted Occurs when the playback is completed. Declaration public event EventHandler PlaybackCompleted Event Type Type Description System.EventHandler PlaybackPaused Occurs when the playback is paused. Declaration public event EventHandler PlaybackPaused Event Type Type Description System.EventHandler PlaybackStarted Occurs when the playback is started. Declaration public event EventHandler PlaybackStarted Event Type Type Description System.EventHandler PlaybackStopped Occurs when the playback is stopped. Declaration public event EventHandler PlaybackStopped Event Type Type Description System.EventHandler Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.PlaybackState.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.PlaybackState.html",
    "title": "Enum PlaybackState",
    "keywords": "Enum PlaybackState Enumerates values that define the playback state of the media content. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum PlaybackState Fields Name Description Paused Paused while playing media. Playing Playing. Stopped Stopped."
  },
  "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.InformationPopup.html",
    "title": "Class InformationPopup",
    "keywords": "Class InformationPopup Inheritance System.Object Xamarin.Forms.BindableObject InformationPopup Implements System.ComponentModel.INotifyPropertyChanged Inherited Members Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnBindingContextChanged() Xamarin.Forms.BindableObject.OnPropertyChanged(System.String) Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class InformationPopup : BindableObject, INotifyPropertyChanged, IDynamicResourceHandler Constructors InformationPopup() Declaration public InformationPopup() Fields BottomButtonProperty BindableProperty. Identifies the first button bindable property. Declaration public static readonly BindableProperty BottomButtonProperty Field Value Type Description Xamarin.Forms.BindableProperty IsProgressRunningProperty BindableProperty. Identifies the IsProgressRunning bindable property. Declaration public static readonly BindableProperty IsProgressRunningProperty Field Value Type Description Xamarin.Forms.BindableProperty TextProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TextProperty Field Value Type Description Xamarin.Forms.BindableProperty TitleProperty BindableProperty. Identifies the title bindable property. Declaration public static readonly BindableProperty TitleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BottomButton Gets or sets bottom button of the Popup. You should use only one property between Icon property and Text property because two area has the same position. Declaration public MenuItem BottomButton { get; set; } Property Value Type Description Xamarin.Forms.MenuItem IsProgressRunning Gets or sets progress visibility of the Popup. If this value is true. Popup displays circular progress and hides Title automatically. Declaration public bool IsProgressRunning { get; set; } Property Value Type Description System.Boolean Text Gets or sets text of the Popup. Declaration public string Text { get; set; } Property Value Type Description System.String Title Gets or sets title of the Popup. Declaration public string Title { get; set; } Property Value Type Description System.String Methods Dismiss() Dismisses the InformationPopup. Declaration public void Dismiss() Show() Shows the Popup. Declaration public void Show() Events BackButtonPressed Occurs when the device's back button is pressed. Declaration public event EventHandler BackButtonPressed Event Type Type Description System.EventHandler Implements System.ComponentModel.INotifyPropertyChanged"
  },
  "api/Tizen.Wearable.CircularUI.Forms.GoogleMapView.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.GoogleMapView.html",
    "title": "Class GoogleMapView",
    "keywords": "Class GoogleMapView The MapView class is used to display a map on the screen. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.NavigableElement Xamarin.Forms.VisualElement Xamarin.Forms.View GoogleMapView Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController IGoogleMapViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.View.VerticalOptionsProperty Xamarin.Forms.View.HorizontalOptionsProperty Xamarin.Forms.View.MarginProperty Xamarin.Forms.View.GetChildElements(Xamarin.Forms.Point) Xamarin.Forms.View.OnBindingContextChanged() Xamarin.Forms.View.GestureController Xamarin.Forms.View.GestureRecognizers Xamarin.Forms.View.Xamarin.Forms.Internals.IGestureController.CompositeGestureRecognizers Xamarin.Forms.View.HorizontalOptions Xamarin.Forms.View.Margin Xamarin.Forms.View.VerticalOptions Xamarin.Forms.VisualElement.NavigationProperty Xamarin.Forms.VisualElement.StyleProperty Xamarin.Forms.VisualElement.InputTransparentProperty Xamarin.Forms.VisualElement.IsEnabledProperty Xamarin.Forms.VisualElement.XProperty Xamarin.Forms.VisualElement.YProperty Xamarin.Forms.VisualElement.AnchorXProperty Xamarin.Forms.VisualElement.AnchorYProperty Xamarin.Forms.VisualElement.TranslationXProperty Xamarin.Forms.VisualElement.TranslationYProperty Xamarin.Forms.VisualElement.WidthProperty Xamarin.Forms.VisualElement.HeightProperty Xamarin.Forms.VisualElement.RotationProperty Xamarin.Forms.VisualElement.RotationXProperty Xamarin.Forms.VisualElement.RotationYProperty Xamarin.Forms.VisualElement.ScaleProperty Xamarin.Forms.VisualElement.ScaleXProperty Xamarin.Forms.VisualElement.ScaleYProperty Xamarin.Forms.VisualElement.VisualProperty Xamarin.Forms.VisualElement.IsVisibleProperty Xamarin.Forms.VisualElement.OpacityProperty Xamarin.Forms.VisualElement.BackgroundColorProperty Xamarin.Forms.VisualElement.BehaviorsProperty Xamarin.Forms.VisualElement.TriggersProperty Xamarin.Forms.VisualElement.WidthRequestProperty Xamarin.Forms.VisualElement.HeightRequestProperty Xamarin.Forms.VisualElement.MinimumWidthRequestProperty Xamarin.Forms.VisualElement.MinimumHeightRequestProperty Xamarin.Forms.VisualElement.IsFocusedProperty Xamarin.Forms.VisualElement.FlowDirectionProperty Xamarin.Forms.VisualElement.TabIndexProperty Xamarin.Forms.VisualElement.IsTabStopProperty Xamarin.Forms.VisualElement.OnTabIndexPropertyChanged(System.Int32, System.Int32) Xamarin.Forms.VisualElement.TabIndexDefaultValueCreator() Xamarin.Forms.VisualElement.OnTabStopPropertyChanged(System.Boolean, System.Boolean) Xamarin.Forms.VisualElement.TabStopDefaultValueCreator() Xamarin.Forms.VisualElement.BatchBegin() Xamarin.Forms.VisualElement.BatchCommit() Xamarin.Forms.VisualElement.Focus() Xamarin.Forms.VisualElement.Layout(Xamarin.Forms.Rectangle) Xamarin.Forms.VisualElement.Measure(System.Double, System.Double, Xamarin.Forms.MeasureFlags) Xamarin.Forms.VisualElement.Unfocus() Xamarin.Forms.VisualElement.InvalidateMeasure() Xamarin.Forms.VisualElement.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.VisualElement.OnChildrenReordered() Xamarin.Forms.VisualElement.OnMeasure(System.Double, System.Double) Xamarin.Forms.VisualElement.OnSizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.SizeAllocated(System.Double, System.Double) Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.InvalidateMeasure(Xamarin.Forms.Internals.InvalidationTrigger) Xamarin.Forms.VisualElement.ChangeVisualState() Xamarin.Forms.VisualElement.Visual Xamarin.Forms.VisualElement.FlowDirection Xamarin.Forms.VisualElement.Xamarin.Forms.IVisualElementController.EffectiveFlowDirection Xamarin.Forms.VisualElement.AnchorX Xamarin.Forms.VisualElement.AnchorY Xamarin.Forms.VisualElement.BackgroundColor Xamarin.Forms.VisualElement.Behaviors Xamarin.Forms.VisualElement.Bounds Xamarin.Forms.VisualElement.Height Xamarin.Forms.VisualElement.HeightRequest Xamarin.Forms.VisualElement.InputTransparent Xamarin.Forms.VisualElement.IsEnabled Xamarin.Forms.VisualElement.IsFocused Xamarin.Forms.VisualElement.IsVisible Xamarin.Forms.VisualElement.MinimumHeightRequest Xamarin.Forms.VisualElement.MinimumWidthRequest Xamarin.Forms.VisualElement.Opacity Xamarin.Forms.VisualElement.Rotation Xamarin.Forms.VisualElement.RotationX Xamarin.Forms.VisualElement.RotationY Xamarin.Forms.VisualElement.Scale Xamarin.Forms.VisualElement.ScaleX Xamarin.Forms.VisualElement.ScaleY Xamarin.Forms.VisualElement.TabIndex Xamarin.Forms.VisualElement.IsTabStop Xamarin.Forms.VisualElement.TranslationX Xamarin.Forms.VisualElement.TranslationY Xamarin.Forms.VisualElement.Triggers Xamarin.Forms.VisualElement.Width Xamarin.Forms.VisualElement.WidthRequest Xamarin.Forms.VisualElement.X Xamarin.Forms.VisualElement.Y Xamarin.Forms.VisualElement.Resources Xamarin.Forms.VisualElement.ChildrenReordered Xamarin.Forms.VisualElement.Focused Xamarin.Forms.VisualElement.MeasureInvalidated Xamarin.Forms.VisualElement.SizeChanged Xamarin.Forms.VisualElement.Unfocused Xamarin.Forms.NavigableElement.OnParentSet() Xamarin.Forms.NavigableElement.Navigation Xamarin.Forms.NavigableElement.Style Xamarin.Forms.NavigableElement.StyleClass Xamarin.Forms.NavigableElement.class Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class GoogleMapView : View, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, INavigationProxy, IAnimatable, IResourcesProvider, IStyleElement, IFlowDirectionController, IPropertyPropagationController, IVisualController, ITabStopElement, IStyleSelectable, IStylable, IGestureController, IGoogleMapViewController, IViewController, IVisualElementController, IElementController Constructors GoogleMapView() Declaration public GoogleMapView() Fields ItemsSourceProperty BindableProperty. Identifies the ItemsSource bindable property. Declaration public static readonly BindableProperty ItemsSourceProperty Field Value Type Description Xamarin.Forms.BindableProperty ItemTemplateProperty BindableProperty. Identifies the ItemTemplate bindable property. Declaration public static readonly BindableProperty ItemTemplateProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties ItemsSource Gets or sets the source of items to template and display. Declaration public IEnumerable ItemsSource { get; set; } Property Value Type Description System.Collections.IEnumerable ItemTemplate Gets or sets the DataTemplate to apply to the ItemsSource. Declaration public DataTemplate ItemTemplate { get; set; } Property Value Type Description Xamarin.Forms.DataTemplate Markers An IList of the Pins on this MapView. Declaration public IList<Marker> Markers { get; } Property Value Type Description System.Collections.Generic.IList < Marker > Methods Update(GoogleMapOption) Set GoogleMapOption value to MapView. Declaration public void Update(GoogleMapOption value) Parameters Type Name Description GoogleMapOption value Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IAnimatable Xamarin.Forms.ITabStopElement Xamarin.Forms.Internals.IGestureController IGoogleMapViewController Xamarin.Forms.IViewController Xamarin.Forms.IVisualElementController Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.ColorMenuItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.ColorMenuItem.html",
    "title": "Class ColorMenuItem",
    "keywords": "Class ColorMenuItem Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Xamarin.Forms.BaseMenuItem Xamarin.Forms.MenuItem ColorMenuItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.MenuItem.AcceleratorProperty Xamarin.Forms.MenuItem.CommandProperty Xamarin.Forms.MenuItem.CommandParameterProperty Xamarin.Forms.MenuItem.IsDestructiveProperty Xamarin.Forms.MenuItem.IconImageSourceProperty Xamarin.Forms.MenuItem.IsEnabledProperty Xamarin.Forms.MenuItem.TextProperty Xamarin.Forms.MenuItem.GetAccelerator(Xamarin.Forms.BindableObject) Xamarin.Forms.MenuItem.SetAccelerator(Xamarin.Forms.BindableObject, Xamarin.Forms.Accelerator) Xamarin.Forms.MenuItem.OnClicked() Xamarin.Forms.MenuItem.Command Xamarin.Forms.MenuItem.CommandParameter Xamarin.Forms.MenuItem.IconImageSource Xamarin.Forms.MenuItem.IsDestructive Xamarin.Forms.MenuItem.Text Xamarin.Forms.MenuItem.IsEnabled Xamarin.Forms.MenuItem.IsEnabledPropertyName Xamarin.Forms.MenuItem.Clicked Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class ColorMenuItem : MenuItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, IMenuItemController Fields BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BackgroundColor Gets or sets a background color value of this ActionButtonItem. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Xamarin.Forms.Color Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.html",
    "title": "Namespace Tizen.Wearable.CircularUI.Forms",
    "keywords": "Namespace Tizen.Wearable.CircularUI.Forms Classes ActionButtonItem The ActionButtonItem is a class that presents a menu item and associates it with a command BufferingProgressUpdatedEventArgs Internal use only. Contains arguments for the event that is raised when the buffering progress is updated. Check The check widget allows for toggling a value between true and false. The check is extension of Xamarin.Forms.Switch. CircleDateTimeSelector The CircleDateTimeSelector is a view that can change the value by bezel action by touching each item of \"Year: Month: Day\" and \"Hour: Minute: AM / PM\" CircleImage The CircleImage is view that hold an image with circle shape. The CircleImage is extension of Xamarin.Forms.Image. CircleListView The CircleListView is a view that represents Xamarin.Forms.ListView on Circular UI. You can move the list through bezel action. CirclePage The CirclePage is a ContentPage, which allows you to insert views that require CircleSurface, and you can show ToolbarItems with MoreOption. It has an ActionButton, and can use the MenuItem type as text, icon, command, and so on. CirclePageNotFoundException The CirclePageNotFoundException is an Exception class that occurs when a CircleSurface has no child. CircleProgressBarSurfaceItem The CircleProgressBarSurfaceItem displays circular progressbar at CirclePage. CircleScrollView The CircleScrollView has circular scroll bar. it can be scrolled by bezel action. The CircleScrollView is extension of Xamarin.Forms.ScrollView. CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. CircleStackLayout CircleStepper The CircleStepper is a class that extends Xamarin.Forms.Stepper for Circular UI. CircleSurfaceEffectBehavior The CircleSurfaceEffectBehavior is a behavior which allows you to add views that require CircleSurface. CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. CircleToolbarItem The CircleToolbarItem is a class that extends Xamarin.Forms.ToolbarItem for Circular UI. ColorMenuItem ContextPopupEffectBehavior The ContextPopupEffectBehavior is a behavior which allows you to add a context popup. EmbeddingControls A built-in media controls. FileMediaSource A MediaSource that reads a media from a file. FileMediaSourceConverter A TypeConverter that converts to FileMediaSource. GoogleMapView The MapView class is used to display a map on the screen. IndexPage The IndexPage is extension of Xamarin.Forms.MultiPage. When Page is added/removed at Multipage. circular index is added/removed automatically at the top of window. InformationPopup LayoutCanvas Marker A struct that has a latitude and longitude. MediaPlayer MediaPlayer provieds the essential components to play the media contents. MediaSource Abstract class whose implementors load media contents from files or the Web. MediaSourceConverter Class that takes a string representation of a media file location and returns a MeidaSource from the specified resource. MediaView The MediaView class is used to display the video output on the screen. PopupEntry The PopupEntry is a class that extends Xamarin.Forms.Entry. It makes a new layer when editing text on the entry. Radio The Radio is a widget that allows one or more options to be displayed and have the user choose only one of them. RotaryEventArgs Event arguments for RotaryEvent. SelectedEventArgs Event arguments for events of RadioButton. Toast The Toast class provides properties that show simple types of messages TwoButtonPage The TwoButtonPage is a page that has a rectangular area inside the circle as contents area. It also has two buttons and a Title area. TwoButtonPopup The TwoButtonPopup describe pop-up which has circular two button, title, text, and content area. UriMediaSource A MediaSource that loads a media from a URI Structs GoogleMapOption The GoogleMapOption struct used to define the properties that can be set on a GoogleMapView. LatLng A struct that has a latitude and longitude. Interfaces ICircleSurfaceItem The ICircleSurfaceItem is an interface that controls the items represented in the CircleSurface. IGoogleMapViewController For internal use by renderers. IMediaViewProvider IPlatformMediaPlayer For internal use by platform renderers. IRotaryEventReceiver The IRotaryEventReceiver is a receiver interface to take Rotary Events IRotaryFocusable The IRotaryFocusable is an interface to take a Rotary Event IVideoOutput Interface indicating the ouput type of the media. Enums CheckDisplayStyle Enumeration for the style of the Check. DateTimeType Enumeration for style type of CircleDateTimeSelector DisplayAspectMode Enumerates values that define how a media content is displayed. GoogleMapType Enumeration for the Google Map type of the MapView. PlaybackState Enumerates values that define the playback state of the media content. PositionOption Enumeration for position type of popup VideoOuputType Enumeration that specifies the video ouput. ZoomControlPosition Enumeration for the Zoom control position of the GoogleMapView. Delegates RotaryEventHandler Delegate for a triggering rotary event"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.CircleListViewRenderer.html",
    "title": "Class CircleListViewRenderer",
    "keywords": "Class CircleListViewRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < CircleListView > Xamarin.Forms.Platform.Tizen.ViewRenderer < CircleListView , CircleListView > CircleListViewRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleListView>) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.SetNativeControl(Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.Control Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetElement(Tizen.Wearable.CircularUI.Forms.CircleListView) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateBackgroundColor(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.GetNativeContentGeometry() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class CircleListViewRenderer : ViewRenderer<CircleListView, CircleListView>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors CircleListViewRenderer() Declaration public CircleListViewRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView>.Dispose(System.Boolean) OnElementChanged(ElementChangedEventArgs<CircleListView>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<CircleListView> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < CircleListView > e Overrides Xamarin.Forms.Platform.Tizen.ViewRenderer<Tizen.Wearable.CircularUI.Forms.CircleListView, Tizen.Wearable.CircularUI.Forms.Renderer.CircleListView>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.CircleListView>) Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DateTimeType.html",
    "title": "Enum DateTimeType",
    "keywords": "Enum DateTimeType Enumeration for style type of CircleDateTimeSelector Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DateTimeType Fields Name Description Date Style type of \"datepicker/circle\" Time Style type of \"timepicker/circle\""
  },
  "api/Tizen.Wearable.CircularUI.Forms.Marker.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Marker.html",
    "title": "Class Marker",
    "keywords": "Class Marker A struct that has a latitude and longitude. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element Marker Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class Marker : Element, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable Fields AddressProperty BindableProperty. Identifies the Address bindable property. Declaration public static readonly BindableProperty AddressProperty Field Value Type Description Xamarin.Forms.BindableProperty DescriptionProperty BindableProperty. Identifies the Description bindable property. Declaration public static readonly BindableProperty DescriptionProperty Field Value Type Description Xamarin.Forms.BindableProperty IsPopupOpenedProperty BindableProperty. Identifies the IsPopupOpened bindable property. Declaration public static readonly BindableProperty IsPopupOpenedProperty Field Value Type Description Xamarin.Forms.BindableProperty PositionProperty BindableProperty. Identifies the Position bindable property. Declaration public static readonly BindableProperty PositionProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Address Gets or sets an address string of Marker. Declaration public string Address { get; set; } Property Value Type Description System.String Description Gets or sets a label string of Marker pop-up. Declaration public string Description { get; set; } Property Value Type Description System.String IsPopupOpened Gets or sets a boolean value that indicates whether Marker popup is opened. Declaration public bool IsPopupOpened { get; set; } Property Value Type Description System.Boolean Position Gets or sets a position of Marker. Declaration public LatLng Position { get; set; } Property Value Type Description LatLng Methods Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() Operators Equality(Marker, Marker) Declaration public static bool operator ==(Marker left, Marker right) Parameters Type Name Description Marker left Marker right Returns Type Description System.Boolean Inequality(Marker, Marker) Declaration public static bool operator !=(Marker left, Marker right) Parameters Type Name Description Marker left Marker right Returns Type Description System.Boolean Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.MultimediaConvertExtensions.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.MultimediaConvertExtensions.html",
    "title": "Class MultimediaConvertExtensions",
    "keywords": "Class MultimediaConvertExtensions Inheritance System.Object MultimediaConvertExtensions Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public static class MultimediaConvertExtensions Methods ToMultimedia(Rect) Declaration public static Rectangle ToMultimedia(this Rect rect) Parameters Type Name Description Rect rect Returns Type Description Rectangle ToMultimeida(DisplayAspectMode) Declaration public static PlayerDisplayMode ToMultimeida(this DisplayAspectMode mode) Parameters Type Name Description DisplayAspectMode mode Returns Type Description PlayerDisplayMode"
  },
  "api/Tizen.Wearable.CircularUI.Forms.FileMediaSourceConverter.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.FileMediaSourceConverter.html",
    "title": "Class FileMediaSourceConverter",
    "keywords": "Class FileMediaSourceConverter A TypeConverter that converts to FileMediaSource. Inheritance System.Object Xamarin.Forms.TypeConverter FileMediaSourceConverter Inherited Members Xamarin.Forms.TypeConverter.CanConvertFrom(System.Type) System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [TypeConverter(typeof(FileMediaSource))] public sealed class FileMediaSourceConverter : TypeConverter Methods ConvertFromInvariantString(String) Creates a file media source given a path to a media. Declaration public override object ConvertFromInvariantString(string value) Parameters Type Name Description System.String value The value to convert. Returns Type Description System.Object FileMediaSource Overrides Xamarin.Forms.TypeConverter.ConvertFromInvariantString(System.String)"
  },
  "api/Tizen.Wearable.CircularUI.Forms.BufferingProgressUpdatedEventArgs.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.BufferingProgressUpdatedEventArgs.html",
    "title": "Class BufferingProgressUpdatedEventArgs",
    "keywords": "Class BufferingProgressUpdatedEventArgs Internal use only. Contains arguments for the event that is raised when the buffering progress is updated. Inheritance System.Object System.EventArgs BufferingProgressUpdatedEventArgs Inherited Members System.EventArgs.Empty System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class BufferingProgressUpdatedEventArgs : EventArgs Properties Progress The value indicating the buffering status(0-1). Declaration public double Progress { get; set; } Property Value Type Description System.Double"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSliderSurfaceItem.html",
    "title": "Class CircleSliderSurfaceItem",
    "keywords": "Class CircleSliderSurfaceItem The CircleSliderSurfaceItem displays circular slider at CirclePage. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleSliderSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem IRotaryFocusable Inherited Members CircleSurfaceItem.BackgroundAngleProperty CircleSurfaceItem.BackgroundAngleOffsetProperty CircleSurfaceItem.BackgroundColorProperty CircleSurfaceItem.BackgroundLineWidthProperty CircleSurfaceItem.BackgroundRadiusProperty CircleSurfaceItem.BarAngleProperty CircleSurfaceItem.BarAngleOffsetProperty CircleSurfaceItem.BarAngleMaximumProperty CircleSurfaceItem.BarAngleMinimumProperty CircleSurfaceItem.BarColorProperty CircleSurfaceItem.BarLineWidthProperty CircleSurfaceItem.BarRadiusProperty CircleSurfaceItem.IsVisibleProperty CircleSurfaceItem.IsEnabledProperty CircleSurfaceItem.BackgroundAngle CircleSurfaceItem.BackgroundAngleOffset CircleSurfaceItem.BackgroundColor CircleSurfaceItem.BackgroundLineWidth CircleSurfaceItem.BackgroundRadius CircleSurfaceItem.BarAngle CircleSurfaceItem.BarAngleOffset CircleSurfaceItem.BarAngleMaximum CircleSurfaceItem.BarAngleMinimum CircleSurfaceItem.BarColor CircleSurfaceItem.BarLineWidth CircleSurfaceItem.BarRadius CircleSurfaceItem.IsVisible CircleSurfaceItem.IsEnabled Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSliderSurfaceItem : CircleSurfaceItem, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem, IRotaryFocusable Fields IncrementProperty BindableProperty. Identifies the Increment bindable property. Declaration public static readonly BindableProperty IncrementProperty Field Value Type Description Xamarin.Forms.BindableProperty MaximumProperty BindableProperty. Identifies the Maximum bindable property. Declaration public static readonly BindableProperty MaximumProperty Field Value Type Description Xamarin.Forms.BindableProperty MinimumProperty BindableProperty. Identifies the Minimum bindable property. Declaration public static readonly BindableProperty MinimumProperty Field Value Type Description Xamarin.Forms.BindableProperty ValueProperty BindableProperty. Identifies the Value bindable property. Declaration public static readonly BindableProperty ValueProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties Increment Gets or sets the Increment value. The value of the slider is increased/decreased by the Increment value. Declaration public double Increment { get; set; } Property Value Type Description System.Double Maximum Gets or sets the maximum value of the slider. Declaration public double Maximum { get; set; } Property Value Type Description System.Double Minimum Gets or sets the minimum value of the slider. Declaration public double Minimum { get; set; } Property Value Type Description System.Double Value Gets or sets the value of the slider. Declaration public double Value { get; set; } Property Value Type Description System.Double Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem IRotaryFocusable"
  },
  "api/Tizen.Wearable.CircularUI.Forms.FileMediaSource.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.FileMediaSource.html",
    "title": "Class FileMediaSource",
    "keywords": "Class FileMediaSource A MediaSource that reads a media from a file. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element MediaSource FileMediaSource Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController Inherited Members MediaSource.FromFile(String) MediaSource.FromUri(Uri) MediaSource.OnSourceChanged() Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax [TypeConverter(typeof(FileMediaSourceConverter))] public sealed class FileMediaSource : MediaSource, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable Fields FileProperty Identifies the File bindable property. Declaration public static readonly BindableProperty FileProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties File Gets or sets the file from which this FileMediaSource will load a media. Declaration public string File { get; set; } Property Value Type Description System.String Methods OnPropertyChanged(String) Declaration protected override void OnPropertyChanged(string propertyName = null) Parameters Type Name Description System.String propertyName Overrides Xamarin.Forms.Element.OnPropertyChanged(System.String) ToString() Returns a string representation of File . Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Operators Implicit(String to FileMediaSource) Allows implicit casting from a string. Declaration public static implicit operator FileMediaSource(string file) Parameters Type Name Description System.String file Returns Type Description FileMediaSource Implicit(FileMediaSource to String) Allows implicit casting to a string. Declaration public static implicit operator string (FileMediaSource file) Parameters Type Name Description FileMediaSource file Returns Type Description System.String Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TwoButtonPageRenderer.html",
    "title": "Class TwoButtonPageRenderer",
    "keywords": "Class TwoButtonPageRenderer Inheritance System.Object Xamarin.Forms.Platform.Tizen.VisualElementRenderer < TwoButtonPage > TwoButtonPageRenderer Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider Inherited Members Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Dispose() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.GetDesiredSize(System.Double, System.Double) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetElement(Tizen.Wearable.CircularUI.Forms.TwoButtonPage) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.UpdateLayout() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.SetElement(Xamarin.Forms.VisualElement) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.IEffectControlProvider.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterEffect(Xamarin.Forms.Effect) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementPropertyChanged(System.Object, System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetNativeView(ElmSharp.EvasObject) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetAccessibilityName(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetAccessibilityDescription(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetIsAccessibilityElement(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.SetLabeledBy(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(System.String, System.Action<System.Boolean>) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(Xamarin.Forms.BindableProperty, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.RegisterPropertyHandler(System.String, System.Action) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateAllProperties(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementReady() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.MinimumSize() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Measure(System.Int32, System.Int32) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateOpacity(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateIsEnabled(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateInputTransparent(System.Boolean) Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateThemeStyle() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.ApplyTransformation() Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Xamarin.Forms.Platform.Tizen.IVisualElementRenderer.Element Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.NativeView Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.IsDisposed System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TwoButtonPageRenderer : VisualElementRenderer<TwoButtonPage>, IVisualElementRenderer, IRegisterable, IDisposable, IEffectControlProvider Constructors TwoButtonPageRenderer() Declaration public TwoButtonPageRenderer() Methods Dispose(Boolean) Declaration protected override void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.Dispose(System.Boolean) GetNativeContentGeometry() Declaration public override Rect GetNativeContentGeometry() Returns Type Description Rect Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.GetNativeContentGeometry() OnElementChanged(ElementChangedEventArgs<TwoButtonPage>) Declaration protected override void OnElementChanged(ElementChangedEventArgs<TwoButtonPage> e) Parameters Type Name Description Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs < TwoButtonPage > e Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.OnElementChanged(Xamarin.Forms.Platform.Tizen.ElementChangedEventArgs<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>) UpdateBackgroundColor(Boolean) Declaration protected override void UpdateBackgroundColor(bool initialize) Parameters Type Name Description System.Boolean initialize Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateBackgroundColor(System.Boolean) UpdateLayout() Declaration protected override void UpdateLayout() Overrides Xamarin.Forms.Platform.Tizen.VisualElementRenderer<Tizen.Wearable.CircularUI.Forms.TwoButtonPage>.UpdateLayout() Implements Xamarin.Forms.Platform.Tizen.IVisualElementRenderer Xamarin.Forms.IRegisterable System.IDisposable Xamarin.Forms.IEffectControlProvider"
  },
  "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.Renderer.TizenConfirmPopupEffect.html",
    "title": "Class TizenConfirmPopupEffect",
    "keywords": "Class TizenConfirmPopupEffect Inheritance System.Object Xamarin.Forms.Effect Xamarin.Forms.PlatformEffect < EvasObject , EvasObject > Xamarin.Forms.Platform.Tizen.PlatformEffect TizenConfirmPopupEffect Inherited Members Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.OnElementPropertyChanged(System.ComponentModel.PropertyChangedEventArgs) Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Container Xamarin.Forms.PlatformEffect<ElmSharp.EvasObject, ElmSharp.EvasObject>.Control Xamarin.Forms.Effect.Resolve(System.String) Xamarin.Forms.Effect.Element Xamarin.Forms.Effect.IsAttached Xamarin.Forms.Effect.ResolveId System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms.Renderer Assembly : Tizen.Wearable.CircularUI.Forms.Renderer.dll Syntax public class TizenConfirmPopupEffect : PlatformEffect Methods OnAttached() Declaration protected override void OnAttached() Overrides Xamarin.Forms.Effect.OnAttached() OnDetached() Declaration protected override void OnDetached() Overrides Xamarin.Forms.Effect.OnDetached()"
  },
  "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.CircleSurfaceItem.html",
    "title": "Class CircleSurfaceItem",
    "keywords": "Class CircleSurfaceItem The CircleSurfaceItem is a class that controls the items represented in the CircleSurface. Inheritance System.Object Xamarin.Forms.BindableObject Xamarin.Forms.Element CircleSurfaceItem CircleProgressBarSurfaceItem CircleSliderSurfaceItem Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem Inherited Members Xamarin.Forms.Element.MenuProperty Xamarin.Forms.Element.AutomationIdProperty Xamarin.Forms.Element.ClassIdProperty Xamarin.Forms.Element.GetMenu(Xamarin.Forms.BindableObject) Xamarin.Forms.Element.SetMenu(Xamarin.Forms.BindableObject, Xamarin.Forms.Menu) Xamarin.Forms.Element.Xamarin.Forms.IElementController.SetValueFromRenderer(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.Element.FindByName(System.String) Xamarin.Forms.Element.RemoveDynamicResource(Xamarin.Forms.BindableProperty) Xamarin.Forms.Element.SetDynamicResource(Xamarin.Forms.BindableProperty, System.String) Xamarin.Forms.Element.OnBindingContextChanged() Xamarin.Forms.Element.OnChildAdded(Xamarin.Forms.Element) Xamarin.Forms.Element.OnChildRemoved(Xamarin.Forms.Element) Xamarin.Forms.Element.OnParentSet() Xamarin.Forms.Element.OnPropertyChanged(System.String) Xamarin.Forms.Element.AutomationId Xamarin.Forms.Element.ClassId Xamarin.Forms.Element.Effects Xamarin.Forms.Element.Id Xamarin.Forms.Element.StyleId Xamarin.Forms.Element.Parent Xamarin.Forms.Element.ChildAdded Xamarin.Forms.Element.ChildRemoved Xamarin.Forms.Element.DescendantAdded Xamarin.Forms.Element.DescendantRemoved Xamarin.Forms.BindableObject.BindingContextProperty Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.ClearValue(Xamarin.Forms.BindablePropertyKey) Xamarin.Forms.BindableObject.GetValue(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.IsSet(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.RemoveBinding(Xamarin.Forms.BindableProperty) Xamarin.Forms.BindableObject.SetBinding(Xamarin.Forms.BindableProperty, Xamarin.Forms.BindingBase) Xamarin.Forms.BindableObject.ApplyBindings() Xamarin.Forms.BindableObject.OnPropertyChanging(System.String) Xamarin.Forms.BindableObject.UnapplyBindings() Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindableProperty, System.Object) Xamarin.Forms.BindableObject.SetValue(Xamarin.Forms.BindablePropertyKey, System.Object) Xamarin.Forms.BindableObject.BindingContext Xamarin.Forms.BindableObject.PropertyChanged Xamarin.Forms.BindableObject.PropertyChanging Xamarin.Forms.BindableObject.BindingContextChanged System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() System.Object.ReferenceEquals(System.Object, System.Object) System.Object.ToString() Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public class CircleSurfaceItem : Element, INotifyPropertyChanged, IDynamicResourceHandler, IElement, INameScope, IElementController, IStyleSelectable, ICircleSurfaceItem Fields BackgroundAngleOffsetProperty BindableProperty. Identifies the BackgroundAngleOffset bindable property. Declaration public static readonly BindableProperty BackgroundAngleOffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundAngleProperty BindableProperty. Identifies the BackgroundAngle bindable property. Declaration public static readonly BindableProperty BackgroundAngleProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundColorProperty BindableProperty. Identifies the BackgroundColor bindable property. Declaration public static readonly BindableProperty BackgroundColorProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundLineWidthProperty BindableProperty. Identifies the BackgroundLineWidth bindable property. Declaration public static readonly BindableProperty BackgroundLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty BackgroundRadiusProperty BindableProperty. Identifies the BackgroundRadius bindable property. Declaration public static readonly BindableProperty BackgroundRadiusProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleMaximumProperty BindableProperty. Identifies the BarAngleMaximum bindable property. Declaration public static readonly BindableProperty BarAngleMaximumProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleMinimumProperty BindableProperty. Identifies the BarAngleMinimum bindable property. Declaration public static readonly BindableProperty BarAngleMinimumProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleOffsetProperty BindableProperty. Identifies the BarAngleOffset bindable property. Declaration public static readonly BindableProperty BarAngleOffsetProperty Field Value Type Description Xamarin.Forms.BindableProperty BarAngleProperty BindableProperty. Identifies the BarAngle bindable property. Declaration public static readonly BindableProperty BarAngleProperty Field Value Type Description Xamarin.Forms.BindableProperty BarColorProperty BindableProperty. Identifies the BarColor bindable property. Declaration public static readonly BindableProperty BarColorProperty Field Value Type Description Xamarin.Forms.BindableProperty BarLineWidthProperty BindableProperty. Identifies the BarLineWidth bindable property. Declaration public static readonly BindableProperty BarLineWidthProperty Field Value Type Description Xamarin.Forms.BindableProperty BarRadiusProperty BindableProperty. Identifies the BarRadius bindable property. Declaration public static readonly BindableProperty BarRadiusProperty Field Value Type Description Xamarin.Forms.BindableProperty IsEnabledProperty BindableProperty. Identifies the IsEnabled bindable property. Declaration public static readonly BindableProperty IsEnabledProperty Field Value Type Description Xamarin.Forms.BindableProperty IsVisibleProperty BindableProperty. Identifies the IsVisible bindable property. Declaration public static readonly BindableProperty IsVisibleProperty Field Value Type Description Xamarin.Forms.BindableProperty Properties BackgroundAngle Gets or sets the background angle value. If background angle is 180, background of surface item draw 180 degree from background angle offset. Declaration public double BackgroundAngle { get; set; } Property Value Type Description System.Double BackgroundAngleOffset Gets or sets the background angle offset value. if background angle offset is 30, background of surface item start at 30 degree. Declaration public double BackgroundAngleOffset { get; set; } Property Value Type Description System.Double BackgroundColor Gets or sets the background color value. Declaration public Color BackgroundColor { get; set; } Property Value Type Description Xamarin.Forms.Color BackgroundLineWidth Gets or sets the background line width value. Declaration public int BackgroundLineWidth { get; set; } Property Value Type Description System.Int32 BackgroundRadius Gets or sets the background radius value. Declaration public double BackgroundRadius { get; set; } Property Value Type Description System.Double BarAngle Gets or sets the bar angle value. If bar angle is 180, bar of surface item draw 180 degree from bar angle offset. Declaration public double BarAngle { get; set; } Property Value Type Description System.Double BarAngleMaximum Gets or sets the bar angle maximum value. Declaration public double BarAngleMaximum { get; set; } Property Value Type Description System.Double BarAngleMinimum Gets or sets the bar angle minimum value. Declaration public double BarAngleMinimum { get; set; } Property Value Type Description System.Double BarAngleOffset Gets or sets the bar angle offset value. if bar angle offset is 30, bar of surface item start at 30 degree. Declaration public double BarAngleOffset { get; set; } Property Value Type Description System.Double BarColor Gets or sets the bar color value. Declaration public Color BarColor { get; set; } Property Value Type Description Xamarin.Forms.Color BarLineWidth Gets or sets the bar line width value. Declaration public int BarLineWidth { get; set; } Property Value Type Description System.Int32 BarRadius Gets or sets the bar radius value. Declaration public double BarRadius { get; set; } Property Value Type Description System.Double IsEnabled Gets or sets a value indicating whether this element is enabled. Declaration public bool IsEnabled { get; set; } Property Value Type Description System.Boolean IsVisible Gets or sets the visibility value of circle surface item. Declaration public bool IsVisible { get; set; } Property Value Type Description System.Boolean Implements System.ComponentModel.INotifyPropertyChanged Xamarin.Forms.IElementController ICircleSurfaceItem"
  },
  "api/Tizen.Wearable.CircularUI.Forms.DisplayAspectMode.html": {
    "href": "api/Tizen.Wearable.CircularUI.Forms.DisplayAspectMode.html",
    "title": "Enum DisplayAspectMode",
    "keywords": "Enum DisplayAspectMode Enumerates values that define how a media content is displayed. Namespace : Tizen.Wearable.CircularUI.Forms Assembly : Tizen.Wearable.CircularUI.Forms.dll Syntax public enum DisplayAspectMode Fields Name Description AspectFill Scale the media content to fill the view. AspectFit Scale the media content to fit the view. Fill Scale the media content to so it exactly fills the view. OrignalSize The original size of the media content. Extension Methods MultimediaConvertExtensions.ToMultimeida()"
  }
}